"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/colorjs.io";
exports.ids = ["vendor-chunks/colorjs.io"];
exports.modules = {

/***/ "(ssr)/./node_modules/colorjs.io/dist/color.js":
/*!***********************************************!*\
  !*** ./node_modules/colorjs.io/dist/color.js ***!
  \***********************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ Color)\n/* harmony export */ });\n// A is m x n. B is n x p. product is m x p.\nfunction multiplyMatrices (A, B) {\n\tlet m = A.length;\n\n\tif (!Array.isArray(A[0])) {\n\t\t// A is vector, convert to [[a, b, c, ...]]\n\t\tA = [A];\n\t}\n\n\tif (!Array.isArray(B[0])) {\n\t\t// B is vector, convert to [[a], [b], [c], ...]]\n\t\tB = B.map(x => [x]);\n\t}\n\n\tlet p = B[0].length;\n\tlet B_cols = B[0].map((_, i) => B.map(x => x[i])); // transpose B\n\tlet product = A.map(row => B_cols.map(col => {\n\t\tlet ret = 0;\n\n\t\tif (!Array.isArray(row)) {\n\t\t\tfor (let c of col) {\n\t\t\t\tret += row * c;\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\tfor (let i = 0; i < row.length; i++) {\n\t\t\tret += row[i] * (col[i] || 0);\n\t\t}\n\n\t\treturn ret;\n\t}));\n\n\tif (m === 1) {\n\t\tproduct = product[0]; // Avoid [[a, b, c, ...]]\n\t}\n\n\tif (p === 1) {\n\t\treturn product.map(x => x[0]); // Avoid [[a], [b], [c], ...]]\n\t}\n\n\treturn product;\n}\n\n/**\n * Various utility functions\n */\n\n\n/**\n * Check if a value is a string (including a String object)\n * @param {*} str - Value to check\n * @returns {boolean}\n */\nfunction isString (str) {\n\treturn type(str) === \"string\";\n}\n\n/**\n * Determine the internal JavaScript [[Class]] of an object.\n * @param {*} o - Value to check\n * @returns {string}\n */\nfunction type (o) {\n\tlet str = Object.prototype.toString.call(o);\n\n\treturn (str.match(/^\\[object\\s+(.*?)\\]$/)[1] || \"\").toLowerCase();\n}\n\nfunction serializeNumber (n, {precision, unit }) {\n\tif (isNone(n)) {\n\t\treturn \"none\";\n\t}\n\n\treturn toPrecision(n, precision) + (unit ?? \"\");\n}\n\n/**\n * Check if a value corresponds to a none argument\n * @param {*} n - Value to check\n * @returns {boolean}\n */\nfunction isNone (n) {\n\treturn Number.isNaN(n) || (n instanceof Number && n?.none);\n}\n\n/**\n * Replace none values with 0\n */\nfunction skipNone (n) {\n\treturn isNone(n) ? 0 : n;\n}\n\n/**\n * Round a number to a certain number of significant digits\n * @param {number} n - The number to round\n * @param {number} precision - Number of significant digits\n */\nfunction toPrecision (n, precision) {\n\tif (n === 0) {\n\t\treturn 0;\n\t}\n\tlet integer = ~~n;\n\tlet digits = 0;\n\tif (integer && precision) {\n\t\tdigits = ~~Math.log10(Math.abs(integer)) + 1;\n\t}\n\tconst multiplier = 10.0 ** (precision - digits);\n\treturn Math.floor(n * multiplier + 0.5) / multiplier;\n}\n\nconst angleFactor = {\n\tdeg: 1,\n\tgrad: 0.9,\n\trad: 180 / Math.PI,\n\tturn: 360,\n};\n\n/**\n* Parse a CSS function, regardless of its name and arguments\n* @param String str String to parse\n* @return {{name, args, rawArgs}}\n*/\nfunction parseFunction (str) {\n\tif (!str) {\n\t\treturn;\n\t}\n\n\tstr = str.trim();\n\n\tconst isFunctionRegex = /^([a-z]+)\\((.+?)\\)$/i;\n\tconst isNumberRegex = /^-?[\\d.]+$/;\n\tconst unitValueRegex = /%|deg|g?rad|turn$/;\n\tconst singleArgument = /\\/?\\s*(none|[-\\w.]+(?:%|deg|g?rad|turn)?)/g;\n\tlet parts = str.match(isFunctionRegex);\n\n\tif (parts) {\n\t\t// It is a function, parse args\n\t\tlet args = [];\n\t\tparts[2].replace(singleArgument, ($0, rawArg) => {\n\t\t\tlet match = rawArg.match(unitValueRegex);\n\t\t\tlet arg = rawArg;\n\n\t\t\tif (match) {\n\t\t\t\tlet unit = match[0];\n\t\t\t\t// Drop unit from value\n\t\t\t\tlet unitlessArg = arg.slice(0, -unit.length);\n\n\t\t\t\tif (unit === \"%\") {\n\t\t\t\t\t// Convert percentages to 0-1 numbers\n\t\t\t\t\targ = new Number(unitlessArg / 100);\n\t\t\t\t\targ.type = \"<percentage>\";\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\t// Multiply angle by appropriate factor for its unit\n\t\t\t\t\targ = new Number(unitlessArg * angleFactor[unit]);\n\t\t\t\t\targ.type = \"<angle>\";\n\t\t\t\t\targ.unit = unit;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse if (isNumberRegex.test(arg)) {\n\t\t\t\t// Convert numerical args to numbers\n\t\t\t\targ = new Number(arg);\n\t\t\t\targ.type = \"<number>\";\n\t\t\t}\n\t\t\telse if (arg === \"none\") {\n\t\t\t\targ = new Number(NaN);\n\t\t\t\targ.none = true;\n\t\t\t}\n\n\t\t\tif ($0.startsWith(\"/\")) {\n\t\t\t\t// It's alpha\n\t\t\t\targ = arg instanceof Number ? arg : new Number(arg);\n\t\t\t\targ.alpha = true;\n\t\t\t}\n\n\t\t\tif (typeof arg === \"object\" && arg instanceof Number) {\n\t\t\t\targ.raw = rawArg;\n\t\t\t}\n\n\t\t\targs.push(arg);\n\t\t});\n\n\t\treturn {\n\t\t\tname: parts[1].toLowerCase(),\n\t\t\trawName: parts[1],\n\t\t\trawArgs: parts[2],\n\t\t\t// An argument could be (as of css-color-4):\n\t\t\t// a number, percentage, degrees (hue), ident (in color())\n\t\t\targs,\n\t\t};\n\t}\n}\n\nfunction last (arr) {\n\treturn arr[arr.length - 1];\n}\n\nfunction interpolate (start, end, p) {\n\tif (isNaN(start)) {\n\t\treturn end;\n\t}\n\n\tif (isNaN(end)) {\n\t\treturn start;\n\t}\n\n\treturn start + (end - start) * p;\n}\n\nfunction interpolateInv (start, end, value) {\n\treturn (value - start) / (end - start);\n}\n\nfunction mapRange (from, to, value) {\n\treturn interpolate(to[0], to[1], interpolateInv(from[0], from[1], value));\n}\n\nfunction parseCoordGrammar (coordGrammars) {\n\treturn coordGrammars.map(coordGrammar => {\n\t\treturn coordGrammar.split(\"|\").map(type => {\n\t\t\ttype = type.trim();\n\t\t\tlet range = type.match(/^(<[a-z]+>)\\[(-?[.\\d]+),\\s*(-?[.\\d]+)\\]?$/);\n\n\t\t\tif (range) {\n\t\t\t\tlet ret = new String(range[1]);\n\t\t\t\tret.range = [+range[2], +range[3]];\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\treturn type;\n\t\t});\n\t});\n}\n\n/**\n * Clamp value between the minimum and maximum\n * @param {number} min minimum value to return\n * @param {number} val the value to return if it is between min and max\n * @param {number} max maximum value to return\n * @returns number\n */\nfunction clamp (min, val, max) {\n\treturn Math.max(Math.min(max, val), min);\n}\n\n/**\n * Copy sign of one value to another.\n * @param {number} - to number to copy sign to\n * @param {number} - from number to copy sign from\n * @returns number\n */\nfunction copySign (to, from) {\n\treturn Math.sign(to) === Math.sign(from) ? to : -to;\n}\n\n/**\n * Perform pow on a signed number and copy sign to result\n * @param {number} - base the base number\n * @param {number} - exp the exponent\n * @returns number\n */\nfunction spow (base, exp) {\n\treturn copySign(Math.abs(base) ** exp, base);\n}\n\n/**\n * Perform a divide, but return zero if the numerator is zero\n * @param {number} n - the numerator\n * @param {number} d - the denominator\n * @returns number\n */\nfunction zdiv (n, d) {\n\treturn (d === 0) ? 0 : n / d;\n}\n\n/**\n * Perform a bisect on a sorted list and locate the insertion point for\n * a value in arr to maintain sorted order.\n * @param {number[]} arr - array of sorted numbers\n * @param {number} value - value to find insertion point for\n * @param {number} lo - used to specify a the low end of a subset of the list\n * @param {number} hi - used to specify a the high end of a subset of the list\n * @returns number\n */\nfunction bisectLeft (arr, value, lo = 0, hi = arr.length) {\n\twhile (lo < hi) {\n\t\tconst mid = (lo + hi) >> 1;\n\t\tif (arr[mid] < value) {\n\t\t\tlo = mid + 1;\n\t\t}\n\t\telse {\n\t\t\thi = mid;\n\t\t}\n\t}\n\treturn lo;\n}\n\nvar util = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tbisectLeft: bisectLeft,\n\tclamp: clamp,\n\tcopySign: copySign,\n\tinterpolate: interpolate,\n\tinterpolateInv: interpolateInv,\n\tisNone: isNone,\n\tisString: isString,\n\tlast: last,\n\tmapRange: mapRange,\n\tmultiplyMatrices: multiplyMatrices,\n\tparseCoordGrammar: parseCoordGrammar,\n\tparseFunction: parseFunction,\n\tserializeNumber: serializeNumber,\n\tskipNone: skipNone,\n\tspow: spow,\n\ttoPrecision: toPrecision,\n\ttype: type,\n\tzdiv: zdiv\n});\n\n/**\n * A class for adding deep extensibility to any piece of JS code\n */\nclass Hooks {\n\tadd (name, callback, first) {\n\t\tif (typeof arguments[0] != \"string\") {\n\t\t\t// Multiple hooks\n\t\t\tfor (var name in arguments[0]) {\n\t\t\t\tthis.add(name, arguments[0][name], arguments[1]);\n\t\t\t}\n\n\t\t\treturn;\n\t\t}\n\n\t\t(Array.isArray(name) ? name : [name]).forEach(function (name) {\n\t\t\tthis[name] = this[name] || [];\n\n\t\t\tif (callback) {\n\t\t\t\tthis[name][first ? \"unshift\" : \"push\"](callback);\n\t\t\t}\n\t\t}, this);\n\t}\n\n\trun (name, env) {\n\t\tthis[name] = this[name] || [];\n\t\tthis[name].forEach(function (callback) {\n\t\t\tcallback.call(env && env.context ? env.context : env, env);\n\t\t});\n\t}\n}\n\n/**\n * The instance of {@link Hooks} used throughout Color.js\n */\nconst hooks = new Hooks();\n\n// Global defaults one may want to configure\nvar defaults = {\n\tgamut_mapping: \"css\",\n\tprecision: 5,\n\tdeltaE: \"76\", // Default deltaE method\n\tverbose: globalThis?.process?.env?.NODE_ENV?.toLowerCase() !== \"test\",\n\twarn: function warn (msg) {\n\t\tif (this.verbose) {\n\t\t\tglobalThis?.console?.warn?.(msg);\n\t\t}\n\t},\n};\n\nconst WHITES = {\n\t// for compatibility, the four-digit chromaticity-derived ones everyone else uses\n\tD50: [0.3457 / 0.3585, 1.00000, (1.0 - 0.3457 - 0.3585) / 0.3585],\n\tD65: [0.3127 / 0.3290, 1.00000, (1.0 - 0.3127 - 0.3290) / 0.3290],\n};\n\nfunction getWhite (name) {\n\tif (Array.isArray(name)) {\n\t\treturn name;\n\t}\n\n\treturn WHITES[name];\n}\n\n// Adapt XYZ from white point W1 to W2\nfunction adapt$2 (W1, W2, XYZ, options = {}) {\n\tW1 = getWhite(W1);\n\tW2 = getWhite(W2);\n\n\tif (!W1 || !W2) {\n\t\tthrow new TypeError(`Missing white point to convert ${!W1 ? \"from\" : \"\"}${!W1 && !W2 ? \"/\" : \"\"}${!W2 ? \"to\" : \"\"}`);\n\t}\n\n\tif (W1 === W2) {\n\t\t// Same whitepoints, no conversion needed\n\t\treturn XYZ;\n\t}\n\n\tlet env = {W1, W2, XYZ, options};\n\n\thooks.run(\"chromatic-adaptation-start\", env);\n\n\tif (!env.M) {\n\t\tif (env.W1 === WHITES.D65 && env.W2 === WHITES.D50) {\n\t\t\tenv.M = [\n\t\t\t\t[ 1.0479297925449969, 0.022946870601609652, -0.05019226628920524 ],\n\t\t\t\t[ 0.02962780877005599, 0.9904344267538799, -0.017073799063418826 ],\n\t\t\t\t[ -0.009243040646204504, 0.015055191490298152, 0.7518742814281371 ],\n\t\t\t];\n\t\t}\n\t\telse if (env.W1 === WHITES.D50 && env.W2 === WHITES.D65) {\n\n\t\t\tenv.M = [\n\t\t\t\t[ 0.955473421488075, -0.02309845494876471, 0.06325924320057072 ],\n\t\t\t\t[ -0.0283697093338637, 1.0099953980813041, 0.021041441191917323 ],\n\t\t\t\t[ 0.012314014864481998, -0.020507649298898964, 1.330365926242124 ],\n\t\t\t];\n\t\t}\n\t}\n\n\thooks.run(\"chromatic-adaptation-end\", env);\n\n\tif (env.M) {\n\t\treturn multiplyMatrices(env.M, env.XYZ);\n\t}\n\telse {\n\t\tthrow new TypeError(\"Only Bradford CAT with white points D50 and D65 supported for now.\");\n\t}\n}\n\nconst noneTypes = new Set([\"<number>\", \"<percentage>\", \"<angle>\"]);\n\n/**\n * Validates the coordinates of a color against a format's coord grammar and\n * maps the coordinates to the range or refRange of the coordinates.\n * @param {ColorSpace} space - Colorspace the coords are in\n * @param {object} format - the format object to validate against\n * @param {string} name - the name of the color function. e.g. \"oklab\" or \"color\"\n * @returns {object[]} - an array of type metadata for each coordinate\n */\nfunction coerceCoords (space, format, name, coords) {\n\tlet types = Object.entries(space.coords).map(([id, coordMeta], i) => {\n\t\tlet coordGrammar = format.coordGrammar[i];\n\t\tlet arg = coords[i];\n\t\tlet providedType = arg?.type;\n\n\t\t// Find grammar alternative that matches the provided type\n\t\t// Non-strict equals is intentional because we are comparing w/ string objects\n\t\tlet type;\n\t\tif (arg.none) {\n\t\t\ttype = coordGrammar.find(c => noneTypes.has(c));\n\t\t}\n\t\telse {\n\t\t\ttype = coordGrammar.find(c => c == providedType);\n\t\t}\n\n\t\t// Check that each coord conforms to its grammar\n\t\tif (!type) {\n\t\t\t// Type does not exist in the grammar, throw\n\t\t\tlet coordName = coordMeta.name || id;\n\t\t\tthrow new TypeError(`${providedType ?? arg.raw} not allowed for ${coordName} in ${name}()`);\n\t\t}\n\n\t\tlet fromRange = type.range;\n\n\t\tif (providedType === \"<percentage>\") {\n\t\t\tfromRange ||= [0, 1];\n\t\t}\n\n\t\tlet toRange = coordMeta.range || coordMeta.refRange;\n\n\t\tif (fromRange && toRange) {\n\t\t\tcoords[i] = mapRange(fromRange, toRange, coords[i]);\n\t\t}\n\n\t\treturn type;\n\t});\n\n\treturn types;\n}\n\n\n/**\n * Convert a CSS Color string to a color object\n * @param {string} str\n * @param {object} [options]\n * @param {object} [options.meta] - Object for additional information about the parsing\n * @returns {Color}\n */\nfunction parse (str, {meta} = {}) {\n\tlet env = {\"str\": String(str)?.trim()};\n\thooks.run(\"parse-start\", env);\n\n\tif (env.color) {\n\t\treturn env.color;\n\t}\n\n\tenv.parsed = parseFunction(env.str);\n\n\tif (env.parsed) {\n\t\t// Is a functional syntax\n\t\tlet name = env.parsed.name;\n\n\t\tif (name === \"color\") {\n\t\t\t// color() function\n\t\t\tlet id = env.parsed.args.shift();\n\t\t\t// Check against both <dashed-ident> and <ident> versions\n\t\t\tlet alternateId = id.startsWith(\"--\") ? id.substring(2) : `--${id}`;\n\t\t\tlet ids = [id, alternateId];\n\t\t\tlet alpha = env.parsed.rawArgs.indexOf(\"/\") > 0 ? env.parsed.args.pop() : 1;\n\n\t\t\tfor (let space of ColorSpace.all) {\n\t\t\t\tlet colorSpec = space.getFormat(\"color\");\n\n\t\t\t\tif (colorSpec) {\n\t\t\t\t\tif (ids.includes(colorSpec.id) || colorSpec.ids?.filter((specId) => ids.includes(specId)).length) {\n\t\t\t\t\t\t// From https://drafts.csswg.org/css-color-4/#color-function\n\t\t\t\t\t\t// If more <number>s or <percentage>s are provided than parameters that the colorspace takes, the excess <number>s at the end are ignored.\n\t\t\t\t\t\t// If less <number>s or <percentage>s are provided than parameters that the colorspace takes, the missing parameters default to 0. (This is particularly convenient for multichannel printers where the additional inks are spot colors or varnishes that most colors on the page won’t use.)\n\t\t\t\t\t\tconst coords = Object.keys(space.coords).map((_, i) => env.parsed.args[i] || 0);\n\n\t\t\t\t\t\tlet types;\n\n\t\t\t\t\t\tif (colorSpec.coordGrammar) {\n\t\t\t\t\t\t\ttypes = coerceCoords(space, colorSpec, \"color\", coords);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (meta) {\n\t\t\t\t\t\t\tObject.assign(meta, {formatId: \"color\", types});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif (colorSpec.id.startsWith(\"--\") && !id.startsWith(\"--\")) {\n\t\t\t\t\t\t\tdefaults.warn(`${space.name} is a non-standard space and not currently supported in the CSS spec. ` +\n\t\t\t\t\t\t\t              `Use prefixed color(${colorSpec.id}) instead of color(${id}).`);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (id.startsWith(\"--\") && !colorSpec.id.startsWith(\"--\")) {\n\t\t\t\t\t\t\tdefaults.warn(`${space.name} is a standard space and supported in the CSS spec. ` +\n\t\t\t\t\t\t\t              `Use color(${colorSpec.id}) instead of prefixed color(${id}).`);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn {spaceId: space.id, coords, alpha};\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Not found\n\t\t\tlet didYouMean = \"\";\n\t\t\tlet registryId = id in ColorSpace.registry ? id : alternateId;\n\t\t\tif (registryId in ColorSpace.registry) {\n\t\t\t\t// Used color space id instead of color() id, these are often different\n\t\t\t\tlet cssId = ColorSpace.registry[registryId].formats?.color?.id;\n\n\t\t\t\tif (cssId) {\n\t\t\t\t\tdidYouMean = `Did you mean color(${cssId})?`;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tthrow new TypeError(`Cannot parse color(${id}). ` + (didYouMean || \"Missing a plugin?\"));\n\t\t}\n\t\telse {\n\t\t\tfor (let space of ColorSpace.all) {\n\t\t\t\t// color space specific function\n\t\t\t\tlet format = space.getFormat(name);\n\t\t\t\tif (format && format.type === \"function\") {\n\t\t\t\t\tlet alpha = 1;\n\n\t\t\t\t\tif (format.lastAlpha || last(env.parsed.args).alpha) {\n\t\t\t\t\t\talpha = env.parsed.args.pop();\n\t\t\t\t\t}\n\n\t\t\t\t\tlet coords = env.parsed.args;\n\n\t\t\t\t\tlet types;\n\n\t\t\t\t\tif (format.coordGrammar) {\n\t\t\t\t\t\ttypes = coerceCoords(space, format, name, coords);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (meta) {\n\t\t\t\t\t\tObject.assign(meta, {formatId: format.name, types});\n\t\t\t\t\t}\n\n\t\t\t\t\treturn {\n\t\t\t\t\t\tspaceId: space.id,\n\t\t\t\t\t\tcoords, alpha,\n\t\t\t\t\t};\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// Custom, colorspace-specific format\n\t\tfor (let space of ColorSpace.all) {\n\t\t\tfor (let formatId in space.formats) {\n\t\t\t\tlet format = space.formats[formatId];\n\n\t\t\t\tif (format.type !== \"custom\") {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif (format.test && !format.test(env.str)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tlet color = format.parse(env.str);\n\n\t\t\t\tif (color) {\n\t\t\t\t\tcolor.alpha ??= 1;\n\n\t\t\t\t\tif (meta) {\n\t\t\t\t\t\tmeta.formatId = formatId;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn color;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\n\t// If we're here, we couldn't parse\n\tthrow new TypeError(`Could not parse ${str} as a color. Missing a plugin?`);\n}\n\n/**\n * Resolves a color reference (object or string) to a plain color object\n * @param {Color | {space, coords, alpha} | string | Array<Color | {space, coords, alpha} | string> } color\n * @returns {{space, coords, alpha} | Array<{space, coords, alpha}}>\n */\nfunction getColor (color) {\n\tif (Array.isArray(color)) {\n\t\treturn color.map(getColor);\n\t}\n\n\tif (!color) {\n\t\tthrow new TypeError(\"Empty color reference\");\n\t}\n\n\tif (isString(color)) {\n\t\tcolor = parse(color);\n\t}\n\n\t// Object fixup\n\tlet space = color.space || color.spaceId;\n\n\tif (!(space instanceof ColorSpace)) {\n\t\t// Convert string id to color space object\n\t\tcolor.space = ColorSpace.get(space);\n\t}\n\n\tif (color.alpha === undefined) {\n\t\tcolor.alpha = 1;\n\t}\n\n\treturn color;\n}\n\nconst ε$7 = .000075;\n\n/**\n * Class to represent a color space\n */\nclass ColorSpace {\n\tconstructor (options) {\n\t\tthis.id = options.id;\n\t\tthis.name = options.name;\n\t\tthis.base = options.base ? ColorSpace.get(options.base) : null;\n\t\tthis.aliases = options.aliases;\n\n\t\tif (this.base) {\n\t\t\tthis.fromBase = options.fromBase;\n\t\t\tthis.toBase = options.toBase;\n\t\t}\n\n\t\t// Coordinate metadata\n\n\t\tlet coords = options.coords ?? this.base.coords;\n\n\t\tfor (let name in coords) {\n\t\t\tif (!(\"name\" in coords[name])) {\n\t\t\t\tcoords[name].name = name;\n\t\t\t}\n\t\t}\n\t\tthis.coords = coords;\n\n\t\t// White point\n\n\t\tlet white = options.white ?? this.base.white ?? \"D65\";\n\t\tthis.white = getWhite(white);\n\n\t\t// Sort out formats\n\n\t\tthis.formats = options.formats ?? {};\n\n\t\tfor (let name in this.formats) {\n\t\t\tlet format = this.formats[name];\n\t\t\tformat.type ||= \"function\";\n\t\t\tformat.name ||= name;\n\t\t}\n\n\t\tif (!this.formats.color?.id) {\n\t\t\tthis.formats.color = {\n\t\t\t\t...this.formats.color ?? {},\n\t\t\t\tid: options.cssId || this.id,\n\t\t\t};\n\t\t}\n\n\t\t// Gamut space\n\n\t\tif (options.gamutSpace) {\n\t\t\t// Gamut space explicitly specified\n\t\t\tthis.gamutSpace = options.gamutSpace === \"self\" ? this : ColorSpace.get(options.gamutSpace);\n\t\t}\n\t\telse {\n\t\t\t// No gamut space specified, calculate a sensible default\n\t\t\tif (this.isPolar) {\n\t\t\t\t// Do not check gamut through polar coordinates\n\t\t\t\tthis.gamutSpace = this.base;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tthis.gamutSpace =  this;\n\t\t\t}\n\t\t}\n\n\t\t// Optimize inGamut for unbounded spaces\n\t\tif (this.gamutSpace.isUnbounded) {\n\t\t\tthis.inGamut = (coords, options) => {\n\t\t\t\treturn true;\n\t\t\t};\n\t\t}\n\n\t\t// Other stuff\n\t\tthis.referred = options.referred;\n\n\t\t// Compute ancestors and store them, since they will never change\n\t\tObject.defineProperty(this, \"path\", {\n\t\t\tvalue: getPath(this).reverse(),\n\t\t\twritable: false,\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t});\n\n\t\thooks.run(\"colorspace-init-end\", this);\n\t}\n\n\tinGamut (coords, {epsilon = ε$7} = {}) {\n\t\tif (!this.equals(this.gamutSpace)) {\n\t\t\tcoords = this.to(this.gamutSpace, coords);\n\t\t\treturn this.gamutSpace.inGamut(coords, {epsilon});\n\t\t}\n\n\t\tlet coordMeta = Object.values(this.coords);\n\n\t\treturn coords.every((c, i) => {\n\t\t\tlet meta = coordMeta[i];\n\n\t\t\tif (meta.type !== \"angle\" && meta.range) {\n\t\t\t\tif (Number.isNaN(c)) {\n\t\t\t\t\t// NaN is always in gamut\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\n\t\t\t\tlet [min, max] = meta.range;\n\t\t\t\treturn (min === undefined || c >= min - epsilon)\n\t\t\t\t    && (max === undefined || c <= max + epsilon);\n\t\t\t}\n\n\t\t\treturn true;\n\t\t});\n\t}\n\n\tget isUnbounded () {\n\t\treturn Object.values(this.coords).every(coord => !(\"range\" in coord));\n\t}\n\n\tget cssId () {\n\t\treturn this.formats?.color?.id || this.id;\n\t}\n\n\tget isPolar () {\n\t\tfor (let id in this.coords) {\n\t\t\tif (this.coords[id].type === \"angle\") {\n\t\t\t\treturn true;\n\t\t\t}\n\t\t}\n\n\t\treturn false;\n\t}\n\n\tgetFormat (format) {\n\t\tif (typeof format === \"object\") {\n\t\t\tformat = processFormat(format, this);\n\t\t\treturn format;\n\t\t}\n\n\t\tlet ret;\n\t\tif (format === \"default\") {\n\t\t\t// Get first format\n\t\t\tret = Object.values(this.formats)[0];\n\t\t}\n\t\telse {\n\t\t\tret = this.formats[format];\n\t\t}\n\n\t\tif (ret) {\n\t\t\tret = processFormat(ret, this);\n\t\t\treturn ret;\n\t\t}\n\n\t\treturn null;\n\t}\n\n\t/**\n\t * Check if this color space is the same as another color space reference.\n\t * Allows proxying color space objects and comparing color spaces with ids.\n\t * @param {string | ColorSpace} space ColorSpace object or id to compare to\n\t * @returns {boolean}\n\t */\n\tequals (space) {\n\t\tif (!space) {\n\t\t\treturn false;\n\t\t}\n\n\t\treturn this === space || this.id === space || this.id === space.id;\n\t}\n\n\tto (space, coords) {\n\t\tif (arguments.length === 1) {\n\t\t\tconst color = getColor(space);\n\t\t\t[space, coords] = [color.space, color.coords];\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tif (this.equals(space)) {\n\t\t\t// Same space, no change needed\n\t\t\treturn coords;\n\t\t}\n\n\t\t// Convert NaN to 0, which seems to be valid in every coordinate of every color space\n\t\tcoords = coords.map(c => Number.isNaN(c) ? 0 : c);\n\n\t\t// Find connection space = lowest common ancestor in the base tree\n\t\tlet myPath = this.path;\n\t\tlet otherPath = space.path;\n\n\t\tlet connectionSpace, connectionSpaceIndex;\n\n\t\tfor (let i = 0; i < myPath.length; i++) {\n\t\t\tif (myPath[i].equals(otherPath[i])) {\n\t\t\t\tconnectionSpace = myPath[i];\n\t\t\t\tconnectionSpaceIndex = i;\n\t\t\t}\n\t\t\telse {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (!connectionSpace) {\n\t\t\t// This should never happen\n\t\t\tthrow new Error(`Cannot convert between color spaces ${this} and ${space}: no connection space was found`);\n\t\t}\n\n\t\t// Go up from current space to connection space\n\t\tfor (let i = myPath.length - 1; i > connectionSpaceIndex; i--) {\n\t\t\tcoords = myPath[i].toBase(coords);\n\t\t}\n\n\t\t// Go down from connection space to target space\n\t\tfor (let i = connectionSpaceIndex + 1; i < otherPath.length; i++) {\n\t\t\tcoords = otherPath[i].fromBase(coords);\n\t\t}\n\n\t\treturn coords;\n\t}\n\n\tfrom (space, coords) {\n\t\tif (arguments.length === 1) {\n\t\t\tconst color = getColor(space);\n\t\t\t[space, coords] = [color.space, color.coords];\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\treturn space.to(this, coords);\n\t}\n\n\ttoString () {\n\t\treturn `${this.name} (${this.id})`;\n\t}\n\n\tgetMinCoords () {\n\t\tlet ret = [];\n\n\t\tfor (let id in this.coords) {\n\t\t\tlet meta = this.coords[id];\n\t\t\tlet range = meta.range || meta.refRange;\n\t\t\tret.push(range?.min ?? 0);\n\t\t}\n\n\t\treturn ret;\n\t}\n\n\tstatic registry = {};\n\n\t// Returns array of unique color spaces\n\tstatic get all () {\n\t\treturn [...new Set(Object.values(ColorSpace.registry))];\n\t}\n\n\tstatic register (id, space) {\n\t\tif (arguments.length === 1) {\n\t\t\tspace = arguments[0];\n\t\t\tid = space.id;\n\t\t}\n\n\t\tspace = this.get(space);\n\n\t\tif (this.registry[id] && this.registry[id] !== space) {\n\t\t\tthrow new Error(`Duplicate color space registration: '${id}'`);\n\t\t}\n\t\tthis.registry[id] = space;\n\n\t\t// Register aliases when called without an explicit ID.\n\t\tif (arguments.length === 1 && space.aliases) {\n\t\t\tfor (let alias of space.aliases) {\n\t\t\t\tthis.register(alias, space);\n\t\t\t}\n\t\t}\n\n\t\treturn space;\n\t}\n\n\t/**\n\t * Lookup ColorSpace object by name\n\t * @param {ColorSpace | string} name\n\t */\n\tstatic get (space, ...alternatives) {\n\t\tif (!space || space instanceof ColorSpace) {\n\t\t\treturn space;\n\t\t}\n\n\t\tlet argType = type(space);\n\n\t\tif (argType === \"string\") {\n\t\t\t// It's a color space id\n\t\t\tlet ret = ColorSpace.registry[space.toLowerCase()];\n\n\t\t\tif (!ret) {\n\t\t\t\tthrow new TypeError(`No color space found with id = \"${space}\"`);\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t}\n\n\t\tif (alternatives.length) {\n\t\t\treturn ColorSpace.get(...alternatives);\n\t\t}\n\n\t\tthrow new TypeError(`${space} is not a valid color space`);\n\t}\n\n\t/**\n\t * Get metadata about a coordinate of a color space\n\t *\n\t * @static\n\t * @param {Array | string} ref\n\t * @param {ColorSpace | string} [workingSpace]\n\t * @return {Object}\n\t */\n\tstatic resolveCoord (ref, workingSpace) {\n\t\tlet coordType = type(ref);\n\t\tlet space, coord;\n\n\t\tif (coordType === \"string\") {\n\t\t\tif (ref.includes(\".\")) {\n\t\t\t\t// Absolute coordinate\n\t\t\t\t[space, coord] = ref.split(\".\");\n\t\t\t}\n\t\t\telse {\n\t\t\t\t// Relative coordinate\n\t\t\t\t[space, coord] = [, ref];\n\t\t\t}\n\t\t}\n\t\telse if (Array.isArray(ref)) {\n\t\t\t[space, coord] = ref;\n\t\t}\n\t\telse {\n\t\t\t// Object\n\t\t\tspace = ref.space;\n\t\t\tcoord = ref.coordId;\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tif (!space) {\n\t\t\tspace = workingSpace;\n\t\t}\n\n\t\tif (!space) {\n\t\t\tthrow new TypeError(`Cannot resolve coordinate reference ${ref}: No color space specified and relative references are not allowed here`);\n\t\t}\n\n\t\tcoordType = type(coord);\n\n\t\tif (coordType === \"number\" || coordType === \"string\" && coord >= 0) {\n\t\t\t// Resolve numerical coord\n\t\t\tlet meta = Object.entries(space.coords)[coord];\n\n\t\t\tif (meta) {\n\t\t\t\treturn {space, id: meta[0], index: coord, ...meta[1]};\n\t\t\t}\n\t\t}\n\n\t\tspace = ColorSpace.get(space);\n\n\t\tlet normalizedCoord = coord.toLowerCase();\n\n\t\tlet i = 0;\n\t\tfor (let id in space.coords) {\n\t\t\tlet meta = space.coords[id];\n\n\t\t\tif (id.toLowerCase() === normalizedCoord || meta.name?.toLowerCase() === normalizedCoord) {\n\t\t\t\treturn {space, id, index: i, ...meta};\n\t\t\t}\n\n\t\t\ti++;\n\t\t}\n\n\t\tthrow new TypeError(`No \"${coord}\" coordinate found in ${space.name}. Its coordinates are: ${Object.keys(space.coords).join(\", \")}`);\n\t}\n\n\tstatic DEFAULT_FORMAT = {\n\t\ttype: \"functions\",\n\t\tname: \"color\",\n\t};\n}\n\nfunction getPath (space) {\n\tlet ret = [space];\n\n\tfor (let s = space; s = s.base;) {\n\t\tret.push(s);\n\t}\n\n\treturn ret;\n}\n\nfunction processFormat (format, {coords} = {}) {\n\tif (format.coords && !format.coordGrammar) {\n\t\tformat.type ||= \"function\";\n\t\tformat.name ||= \"color\";\n\n\t\t// Format has not been processed\n\t\tformat.coordGrammar = parseCoordGrammar(format.coords);\n\n\t\tlet coordFormats = Object.entries(coords).map(([id, coordMeta], i) => {\n\t\t\t// Preferred format for each coord is the first one\n\t\t\tlet outputType = format.coordGrammar[i][0];\n\n\t\t\tlet fromRange = coordMeta.range || coordMeta.refRange;\n\t\t\tlet toRange = outputType.range, suffix = \"\";\n\n\t\t\t// Non-strict equals intentional since outputType could be a string object\n\t\t\tif (outputType == \"<percentage>\") {\n\t\t\t\ttoRange = [0, 100];\n\t\t\t\tsuffix = \"%\";\n\t\t\t}\n\t\t\telse if (outputType == \"<angle>\") {\n\t\t\t\tsuffix = \"deg\";\n\t\t\t}\n\n\t\t\treturn  {fromRange, toRange, suffix};\n\t\t});\n\n\t\tformat.serializeCoords = (coords, precision) => {\n\t\t\treturn coords.map((c, i) => {\n\t\t\t\tlet {fromRange, toRange, suffix} = coordFormats[i];\n\n\t\t\t\tif (fromRange && toRange) {\n\t\t\t\t\tc = mapRange(fromRange, toRange, c);\n\t\t\t\t}\n\n\t\t\t\tc = serializeNumber(c, {precision, unit: suffix});\n\n\t\t\t\treturn c;\n\t\t\t});\n\t\t};\n\t}\n\n\treturn format;\n}\n\nvar xyz_d65 = new ColorSpace({\n\tid: \"xyz-d65\",\n\tname: \"XYZ D65\",\n\tcoords: {\n\t\tx: {name: \"X\"},\n\t\ty: {name: \"Y\"},\n\t\tz: {name: \"Z\"},\n\t},\n\twhite: \"D65\",\n\tformats: {\n\t\tcolor: {\n\t\t\tids: [\"xyz-d65\", \"xyz\"],\n\t\t},\n\t},\n\taliases: [\"xyz\"],\n});\n\n/**\n * Convenience class for RGB color spaces\n * @extends {ColorSpace}\n */\nclass RGBColorSpace extends ColorSpace {\n\t/**\n\t * Creates a new RGB ColorSpace.\n\t * If coords are not specified, they will use the default RGB coords.\n\t * Instead of `fromBase()` and `toBase()` functions,\n\t * you can specify to/from XYZ matrices and have `toBase()` and `fromBase()` automatically generated.\n\t * @param {*} options - Same options as {@link ColorSpace} plus:\n\t * @param {number[][]} options.toXYZ_M - Matrix to convert to XYZ\n\t * @param {number[][]} options.fromXYZ_M - Matrix to convert from XYZ\n\t */\n\tconstructor (options) {\n\t\tif (!options.coords) {\n\t\t\toptions.coords = {\n\t\t\t\tr: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Red\",\n\t\t\t\t},\n\t\t\t\tg: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Green\",\n\t\t\t\t},\n\t\t\t\tb: {\n\t\t\t\t\trange: [0, 1],\n\t\t\t\t\tname: \"Blue\",\n\t\t\t\t},\n\t\t\t};\n\t\t}\n\n\t\tif (!options.base) {\n\t\t\toptions.base = xyz_d65;\n\t\t}\n\n\t\tif (options.toXYZ_M && options.fromXYZ_M) {\n\t\t\toptions.toBase ??= rgb => {\n\t\t\t\tlet xyz = multiplyMatrices(options.toXYZ_M, rgb);\n\n\t\t\t\tif (this.white !== this.base.white) {\n\t\t\t\t\t// Perform chromatic adaptation\n\t\t\t\t\txyz = adapt$2(this.white, this.base.white, xyz);\n\t\t\t\t}\n\n\t\t\t\treturn xyz;\n\t\t\t};\n\n\t\t\toptions.fromBase ??= xyz => {\n\t\t\t\txyz = adapt$2(this.base.white, this.white, xyz);\n\t\t\t\treturn multiplyMatrices(options.fromXYZ_M, xyz);\n\t\t\t};\n\t\t}\n\n\t\toptions.referred ??= \"display\";\n\n\t\tsuper(options);\n\t}\n}\n\n/**\n * Get the coordinates of a color in any color space\n * @param {Color} color\n * @param {string | ColorSpace} [space = color.space] The color space to convert to. Defaults to the color's current space\n * @returns {number[]} The color coordinates in the given color space\n */\nfunction getAll (color, space) {\n\tcolor = getColor(color);\n\n\tif (!space || color.space.equals(space)) {\n\t\t// No conversion needed\n\t\treturn color.coords.slice();\n\t}\n\n\tspace = ColorSpace.get(space);\n\treturn space.from(color);\n}\n\nfunction get (color, prop) {\n\tcolor = getColor(color);\n\n\tlet {space, index} = ColorSpace.resolveCoord(prop, color.space);\n\tlet coords = getAll(color, space);\n\treturn coords[index];\n}\n\nfunction setAll (color, space, coords) {\n\tcolor = getColor(color);\n\n\tspace = ColorSpace.get(space);\n\tcolor.coords = space.to(color.space, coords);\n\treturn color;\n}\n\nsetAll.returns = \"color\";\n\n// Set properties and return current instance\nfunction set (color, prop, value) {\n\tcolor = getColor(color);\n\n\tif (arguments.length === 2 && type(arguments[1]) === \"object\") {\n\t\t// Argument is an object literal\n\t\tlet object = arguments[1];\n\t\tfor (let p in object) {\n\t\t\tset(color, p, object[p]);\n\t\t}\n\t}\n\telse {\n\t\tif (typeof value === \"function\") {\n\t\t\tvalue = value(get(color, prop));\n\t\t}\n\n\t\tlet {space, index} = ColorSpace.resolveCoord(prop, color.space);\n\t\tlet coords = getAll(color, space);\n\t\tcoords[index] = value;\n\t\tsetAll(color, space, coords);\n\t}\n\n\treturn color;\n}\n\nset.returns = \"color\";\n\nvar XYZ_D50 = new ColorSpace({\n\tid: \"xyz-d50\",\n\tname: \"XYZ D50\",\n\twhite: \"D50\",\n\tbase: xyz_d65,\n\tfromBase: coords => adapt$2(xyz_d65.white, \"D50\", coords),\n\ttoBase: coords => adapt$2(\"D50\", xyz_d65.white, coords),\n});\n\n// κ * ε  = 2^3 = 8\nconst ε$6 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst ε3$1 = 24 / 116;\nconst κ$4 = 24389 / 27;   // 29^3/3^3\n\nlet white$4 = WHITES.D50;\n\nvar lab = new ColorSpace({\n\tid: \"lab\",\n\tname: \"Lab\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\ta: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t\tb: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t},\n\n\t// Assuming XYZ is relative to D50, convert to CIE Lab\n\t// from CIE standard, which now defines these as a rational fraction\n\twhite: white$4,\n\n\tbase: XYZ_D50,\n\t// Convert D50-adapted XYX to Lab\n\t//  CIE 15.3:2004 section 8.2.1.1\n\tfromBase (XYZ) {\n\t\t// compute xyz, which is XYZ scaled relative to reference white\n\t\tlet xyz = XYZ.map((value, i) => value / white$4[i]);\n\n\t\t// now compute f\n\t\tlet f = xyz.map(value => value > ε$6 ? Math.cbrt(value) : (κ$4 * value + 16) / 116);\n\n\t\treturn [\n\t\t\t(116 * f[1]) - 16,   // L\n\t\t\t500 * (f[0] - f[1]), // a\n\t\t\t200 * (f[1] - f[2]),  // b\n\t\t];\n\t},\n\t// Convert Lab to D50-adapted XYZ\n\t// Same result as CIE 15.3:2004 Appendix D although the derivation is different\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\ttoBase (Lab) {\n\t\t// compute f, starting with the luminance-related term\n\t\tlet f = [];\n\t\tf[1] = (Lab[0] + 16) / 116;\n\t\tf[0] = Lab[1] / 500 + f[1];\n\t\tf[2] = f[1] - Lab[2] / 200;\n\n\t\t// compute xyz\n\t\tlet xyz = [\n\t\t\tf[0]   > ε3$1 ? Math.pow(f[0], 3)                : (116 * f[0] - 16) / κ$4,\n\t\t\tLab[0] > 8  ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$4,\n\t\t\tf[2]   > ε3$1 ? Math.pow(f[2], 3)                : (116 * f[2] - 16) / κ$4,\n\t\t];\n\n\t\t// Compute XYZ by scaling xyz by reference white\n\t\treturn xyz.map((value, i) => value * white$4[i]);\n\t},\n\n\tformats: {\n\t\t\"lab\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n\nfunction constrain (angle) {\n\treturn ((angle % 360) + 360) % 360;\n}\n\nfunction adjust (arc, angles) {\n\tif (arc === \"raw\") {\n\t\treturn angles;\n\t}\n\n\tlet [a1, a2] = angles.map(constrain);\n\n\tlet angleDiff = a2 - a1;\n\n\tif (arc === \"increasing\") {\n\t\tif (angleDiff < 0) {\n\t\t\ta2 += 360;\n\t\t}\n\t}\n\telse if (arc === \"decreasing\") {\n\t\tif (angleDiff > 0) {\n\t\t\ta1 += 360;\n\t\t}\n\t}\n\telse if (arc === \"longer\") {\n\t\tif (-180 < angleDiff && angleDiff < 180) {\n\t\t\tif (angleDiff > 0) {\n\t\t\t\ta1 += 360;\n\t\t\t}\n\t\t\telse {\n\t\t\t\ta2 += 360;\n\t\t\t}\n\t\t}\n\t}\n\telse if (arc === \"shorter\") {\n\t\tif (angleDiff > 180) {\n\t\t\ta1 += 360;\n\t\t}\n\t\telse if (angleDiff < -180) {\n\t\t\ta2 += 360;\n\t\t}\n\t}\n\n\treturn [a1, a2];\n}\n\nvar lch = new ColorSpace({\n\tid: \"lch\",\n\tname: \"LCH\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 150],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: lab,\n\tfromBase (Lab) {\n\t\t// Convert to polar form\n\t\tlet [L, a, b] = Lab;\n\t\tlet hue;\n\t\tconst ε = 0.02;\n\n\t\tif (Math.abs(a) < ε && Math.abs(b) < ε) {\n\t\t\thue = NaN;\n\t\t}\n\t\telse {\n\t\t\thue = Math.atan2(b, a) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tL, // L is still L\n\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\n\t\t\tconstrain(hue), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\ttoBase (LCH) {\n\t\t// Convert from polar form\n\t\tlet [Lightness, Chroma, Hue] = LCH;\n\t\t// Clamp any negative Chroma\n\t\tif (Chroma < 0) {\n\t\t\tChroma = 0;\n\t\t}\n\t\t// Deal with NaN Hue\n\t\tif (isNaN(Hue)) {\n\t\t\tHue = 0;\n\t\t}\n\t\treturn [\n\t\t\tLightness, // L is still L\n\t\t\tChroma * Math.cos(Hue * Math.PI / 180), // a\n\t\t\tChroma * Math.sin(Hue * Math.PI / 180),  // b\n\t\t];\n\t},\n\n\tformats: {\n\t\t\"lch\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>\", \"<number> | <angle>\"],\n\t\t},\n\t},\n});\n\n// deltaE2000 is a statistically significant improvement\n// and is recommended by the CIE and Idealliance\n// especially for color differences less than 10 deltaE76\n// but is wicked complicated\n// and many implementations have small errors!\n// DeltaE2000 is also discontinuous; in case this\n// matters to you, use deltaECMC instead.\n\nconst Gfactor = 25 ** 7;\nconst π$1 = Math.PI;\nconst r2d = 180 / π$1;\nconst d2r$1 = π$1 / 180;\n\nfunction pow7 (x) {\n\t// Faster than x ** 7 or Math.pow(x, 7)\n\n\tconst x2 = x * x;\n\tconst x7 = x2 * x2 * x2 * x;\n\n\treturn x7;\n}\n\nfunction deltaE2000 (color, sample, {kL = 1, kC = 1, kH = 1} = {}) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and the function parameter as the sample,\n\t// calculate deltaE 2000.\n\n\t// This implementation assumes the parametric\n\t// weighting factors kL, kC and kH\n\t// for the influence of viewing conditions\n\t// are all 1, as sadly seems typical.\n\t// kL should be increased for lightness texture or noise\n\t// and kC increased for chroma noise\n\n\tlet [L1, a1, b1] = lab.from(color);\n\tlet C1 = lch.from(lab, [L1, a1, b1])[1];\n\tlet [L2, a2, b2] = lab.from(sample);\n\tlet C2 = lch.from(lab, [L2, a2, b2])[1];\n\n\t// Check for negative Chroma,\n\t// which might happen through\n\t// direct user input of LCH values\n\n\tif (C1 < 0) {\n\t\tC1 = 0;\n\t}\n\tif (C2 < 0) {\n\t\tC2 = 0;\n\t}\n\n\tlet Cbar = (C1 + C2) / 2; // mean Chroma\n\n\t// calculate a-axis asymmetry factor from mean Chroma\n\t// this turns JND ellipses for near-neutral colors back into circles\n\tlet C7 = pow7(Cbar);\n\n\tlet G = 0.5 * (1 - Math.sqrt(C7 / (C7 + Gfactor)));\n\n\t// scale a axes by asymmetry factor\n\t// this by the way is why there is no Lab2000 colorspace\n\tlet adash1 = (1 + G) * a1;\n\tlet adash2 = (1 + G) * a2;\n\n\t// calculate new Chroma from scaled a and original b axes\n\tlet Cdash1 = Math.sqrt(adash1 ** 2 + b1 ** 2);\n\tlet Cdash2 = Math.sqrt(adash2 ** 2 + b2 ** 2);\n\n\t// calculate new hues, with zero hue for true neutrals\n\t// and in degrees, not radians\n\n\tlet h1 = (adash1 === 0 && b1 === 0) ? 0 : Math.atan2(b1, adash1);\n\tlet h2 = (adash2 === 0 && b2 === 0) ? 0 : Math.atan2(b2, adash2);\n\n\tif (h1 < 0) {\n\t\th1 += 2 * π$1;\n\t}\n\tif (h2 < 0) {\n\t\th2 += 2 * π$1;\n\t}\n\n\th1 *= r2d;\n\th2 *= r2d;\n\n\t// Lightness and Chroma differences; sign matters\n\tlet ΔL = L2 - L1;\n\tlet ΔC = Cdash2 - Cdash1;\n\n\t// Hue difference, getting the sign correct\n\tlet hdiff = h2 - h1;\n\tlet hsum = h1 + h2;\n\tlet habs = Math.abs(hdiff);\n\tlet Δh;\n\n\tif (Cdash1 * Cdash2 === 0) {\n\t\tΔh = 0;\n\t}\n\telse if (habs <= 180) {\n\t\tΔh = hdiff;\n\t}\n\telse if (hdiff > 180) {\n\t\tΔh = hdiff - 360;\n\t}\n\telse if (hdiff < -180) {\n\t\tΔh = hdiff + 360;\n\t}\n\telse {\n\t\tdefaults.warn(\"the unthinkable has happened\");\n\t}\n\n\t// weighted Hue difference, more for larger Chroma\n\tlet ΔH = 2 * Math.sqrt(Cdash2 * Cdash1) * Math.sin(Δh * d2r$1 / 2);\n\n\t// calculate mean Lightness and Chroma\n\tlet Ldash = (L1 + L2) / 2;\n\tlet Cdash = (Cdash1 + Cdash2) / 2;\n\tlet Cdash7 = pow7(Cdash);\n\n\t// Compensate for non-linearity in the blue region of Lab.\n\t// Four possibilities for hue weighting factor,\n\t// depending on the angles, to get the correct sign\n\tlet hdash;\n\tif (Cdash1 * Cdash2 === 0) {\n\t\thdash = hsum;   // which should be zero\n\t}\n\telse if (habs <= 180) {\n\t\thdash = hsum / 2;\n\t}\n\telse if (hsum < 360) {\n\t\thdash = (hsum + 360) / 2;\n\t}\n\telse {\n\t\thdash = (hsum - 360) / 2;\n\t}\n\n\t// positional corrections to the lack of uniformity of CIELAB\n\t// These are all trying to make JND ellipsoids more like spheres\n\n\t// SL Lightness crispening factor\n\t// a background with L=50 is assumed\n\tlet lsq = (Ldash - 50) ** 2;\n\tlet SL = 1 + ((0.015 * lsq) / Math.sqrt(20 + lsq));\n\n\t// SC Chroma factor, similar to those in CMC and deltaE 94 formulae\n\tlet SC = 1 + 0.045 * Cdash;\n\n\t// Cross term T for blue non-linearity\n\tlet T = 1;\n\tT -= (0.17 * Math.cos((     hdash - 30)  * d2r$1));\n\tT += (0.24 * Math.cos(  2 * hdash        * d2r$1));\n\tT += (0.32 * Math.cos(((3 * hdash) + 6)  * d2r$1));\n\tT -= (0.20 * Math.cos(((4 * hdash) - 63) * d2r$1));\n\n\t// SH Hue factor depends on Chroma,\n\t// as well as adjusted hue angle like deltaE94.\n\tlet SH = 1 + 0.015 * Cdash * T;\n\n\t// RT Hue rotation term compensates for rotation of JND ellipses\n\t// and Munsell constant hue lines\n\t// in the medium-high Chroma blue region\n\t// (Hue 225 to 315)\n\tlet Δθ = 30 * Math.exp(-1 * (((hdash - 275) / 25) ** 2));\n\tlet RC = 2 * Math.sqrt(Cdash7 / (Cdash7 + Gfactor));\n\tlet RT = -1 * Math.sin(2 * Δθ * d2r$1) * RC;\n\n\t// Finally calculate the deltaE, term by term as root sume of squares\n\tlet dE = (ΔL / (kL * SL)) ** 2;\n\tdE += (ΔC / (kC * SC)) ** 2;\n\tdE += (ΔH / (kH * SH)) ** 2;\n\tdE += RT * (ΔC / (kC * SC)) * (ΔH / (kH * SH));\n\treturn Math.sqrt(dE);\n\t// Yay!!!\n}\n\n// Recalculated for consistent reference white\n// see https://github.com/w3c/csswg-drafts/issues/6642#issuecomment-943521484\nconst XYZtoLMS_M$1 = [\n\t[ 0.8190224379967030, 0.3619062600528904, -0.1288737815209879 ],\n\t[ 0.0329836539323885, 0.9292868615863434,  0.0361446663506424 ],\n\t[ 0.0481771893596242, 0.2642395317527308,  0.6335478284694309 ],\n];\n// inverse of XYZtoLMS_M\nconst LMStoXYZ_M$1 = [\n\t[  1.2268798758459243, -0.5578149944602171,  0.2813910456659647 ],\n\t[ -0.0405757452148008,  1.1122868032803170, -0.0717110580655164 ],\n\t[ -0.0763729366746601, -0.4214933324022432,  1.5869240198367816 ],\n];\nconst LMStoLab_M = [\n\t[ 0.2104542683093140,  0.7936177747023054, -0.0040720430116193 ],\n\t[ 1.9779985324311684, -2.4285922420485799,  0.4505937096174110 ],\n\t[ 0.0259040424655478,  0.7827717124575296, -0.8086757549230774 ],\n];\n// LMStoIab_M inverted\nconst LabtoLMS_M = [\n\t[ 1.0000000000000000,  0.3963377773761749,  0.2158037573099136 ],\n\t[ 1.0000000000000000, -0.1055613458156586, -0.0638541728258133 ],\n\t[ 1.0000000000000000, -0.0894841775298119, -1.2914855480194092 ],\n];\n\nvar OKLab = new ColorSpace({\n\tid: \"oklab\",\n\tname: \"Oklab\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\ta: {\n\t\t\trefRange: [-0.4, 0.4],\n\t\t},\n\t\tb: {\n\t\t\trefRange: [-0.4, 0.4],\n\t\t},\n\t},\n\n\t// Note that XYZ is relative to D65\n\twhite: \"D65\",\n\tbase: xyz_d65,\n\tfromBase (XYZ) {\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M$1, XYZ);\n\n\t\t// non-linearity\n\t\tlet LMSg = LMS.map(val => Math.cbrt(val));\n\n\t\treturn multiplyMatrices(LMStoLab_M, LMSg);\n\n\t},\n\ttoBase (OKLab) {\n\t\t// move to LMS cone domain\n\t\tlet LMSg = multiplyMatrices(LabtoLMS_M, OKLab);\n\n\t\t// restore linearity\n\t\tlet LMS = LMSg.map(val => val ** 3);\n\n\t\treturn multiplyMatrices(LMStoXYZ_M$1, LMS);\n\t},\n\n\tformats: {\n\t\t\"oklab\": {\n\t\t\tcoords: [\"<percentage> | <number>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in CIE Lab\n\n\nfunction deltaEOK (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaEOK, term by term as root sum of squares\n\tlet [L1, a1, b1] = OKLab.from(color);\n\tlet [L2, a2, b2] = OKLab.from(sample);\n\tlet ΔL = L1 - L2;\n\tlet Δa = a1 - a2;\n\tlet Δb = b1 - b2;\n\treturn Math.sqrt(ΔL ** 2 + Δa ** 2 + Δb ** 2);\n}\n\nconst ε$5 = .000075;\n\n/**\n * Check if a color is in gamut of either its own or another color space\n * @return {Boolean} Is the color in gamut?\n */\nfunction inGamut (color, space, {epsilon = ε$5} = {}) {\n\tcolor = getColor(color);\n\n\tif (!space) {\n\t\tspace = color.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\tlet coords = color.coords;\n\n\tif (space !== color.space) {\n\t\tcoords = space.from(color);\n\t}\n\n\treturn space.inGamut(coords, {epsilon});\n}\n\nfunction clone (color) {\n\treturn {\n\t\tspace: color.space,\n\t\tcoords: color.coords.slice(),\n\t\talpha: color.alpha,\n\t};\n}\n\n/**\n * Euclidean distance of colors in an arbitrary color space\n */\nfunction distance (color1, color2, space = \"lab\") {\n\tspace = ColorSpace.get(space);\n\n\t// Assume getColor() is called on color in space.from()\n\tlet coords1 = space.from(color1);\n\tlet coords2 = space.from(color2);\n\n\treturn Math.sqrt(coords1.reduce((acc, c1, i) => {\n\t\tlet c2 = coords2[i];\n\t\tif (isNaN(c1) || isNaN(c2)) {\n\t\t\treturn acc;\n\t\t}\n\n\t\treturn acc + (c2 - c1) ** 2;\n\t}, 0));\n}\n\nfunction deltaE76 (color, sample) {\n\t// Assume getColor() is called in the distance function\n\treturn distance(color, sample, \"lab\");\n}\n\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n\n// CMC by the Color Measurement Committee of the\n// Bradford Society of Dyeists and Colorsts, 1994.\n// Uses LCH rather than Lab,\n// with different weights for L, C and H differences\n// A nice increase in accuracy for modest increase in complexity\nconst π = Math.PI;\nconst d2r = π / 180;\n\nfunction deltaECMC (color, sample, {l = 2, c = 1} = {}) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE CMC.\n\n\t// This implementation assumes the parametric\n\t// weighting factors l:c are 2:1\n\t// which is typical for non-textile uses.\n\n\tlet [L1, a1, b1] = lab.from(color);\n\tlet [, C1, H1] = lch.from(lab, [L1, a1, b1]);\n\tlet [L2, a2, b2] = lab.from(sample);\n\tlet C2 = lch.from(lab, [L2, a2, b2])[1];\n\n\t// let [L1, a1, b1] = color.getAll(lab);\n\t// let C1 = color.get(\"lch.c\");\n\t// let H1 = color.get(\"lch.h\");\n\t// let [L2, a2, b2] = sample.getAll(lab);\n\t// let C2 = sample.get(\"lch.c\");\n\n\t// Check for negative Chroma,\n\t// which might happen through\n\t// direct user input of LCH values\n\n\tif (C1 < 0) {\n\t\tC1 = 0;\n\t}\n\tif (C2 < 0) {\n\t\tC2 = 0;\n\t}\n\n\t// we don't need H2 as ΔH is calculated from Δa, Δb and ΔC\n\n\t// Lightness and Chroma differences\n\t// These are (color - sample), unlike deltaE2000\n\tlet ΔL = L1 - L2;\n\tlet ΔC = C1 - C2;\n\n\tlet Δa = a1 - a2;\n\tlet Δb = b1 - b2;\n\n\t// weighted Hue difference, less for larger Chroma difference\n\n\tlet H2 = (Δa ** 2) + (Δb ** 2) - (ΔC ** 2);\n\t// due to roundoff error it is possible that, for zero a and b,\n\t// ΔC > Δa + Δb is 0, resulting in attempting\n\t// to take the square root of a negative number\n\n\t// trying instead the equation from Industrial Color Physics\n\t// By Georg A. Klein\n\n\t// let ΔH = ((a1 * b2) - (a2 * b1)) / Math.sqrt(0.5 * ((C2 * C1) + (a2 * a1) + (b2 * b1)));\n\t// console.log({ΔH});\n\t// This gives the same result to 12 decimal places\n\t// except it sometimes NaNs when trying to root a negative number\n\n\t// let ΔH = Math.sqrt(H2); we never actually use the root, it gets squared again!!\n\n\t// positional corrections to the lack of uniformity of CIELAB\n\t// These are all trying to make JND ellipsoids more like spheres\n\n\t// SL Lightness crispening factor, depends entirely on L1 not L2\n\tlet SL = 0.511;\t// linear portion of the Y to L transfer function\n\tif (L1 >= 16) {\t// cubic portion\n\t\tSL = (0.040975 * L1) / (1 + 0.01765 * L1);\n\t}\n\n\t// SC Chroma factor\n\tlet SC = ((0.0638 * C1) / (1 + 0.0131 * C1)) + 0.638;\n\n\t// Cross term T for blue non-linearity\n\tlet T;\n\tif (Number.isNaN(H1)) {\n\t\tH1 = 0;\n\t}\n\n\tif (H1 >= 164 && H1 <= 345) {\n\t\tT = 0.56 + Math.abs(0.2 * Math.cos((H1 + 168) * d2r));\n\t}\n\telse {\n\t\tT = 0.36 + Math.abs(0.4 * Math.cos((H1 + 35) * d2r));\n\t}\n\t// console.log({T});\n\n\t// SH Hue factor also depends on C1,\n\tlet C4 = Math.pow(C1, 4);\n\tlet F = Math.sqrt(C4 / (C4 + 1900));\n\tlet SH = SC * ((F * T) + 1 - F);\n\n\t// Finally calculate the deltaE, term by term as root sume of squares\n\tlet dE = (ΔL / (l * SL)) ** 2;\n\tdE += (ΔC / (c * SC)) ** 2;\n\tdE += (H2 / (SH ** 2));\n\t// dE += (ΔH / SH)  ** 2;\n\treturn Math.sqrt(dE);\n\t// Yay!!!\n}\n\nconst Yw$1 = 203;\t// absolute luminance of media white\n\nvar XYZ_Abs_D65 = new ColorSpace({\n// Absolute CIE XYZ, with a D65 whitepoint,\n// as used in most HDR colorspaces as a starting point.\n// SDR spaces are converted per BT.2048\n// so that diffuse, media white is 203 cd/m²\n\tid: \"xyz-abs-d65\",\n\tcssId: \"--xyz-abs-d65\",\n\tname: \"Absolute XYZ D65\",\n\tcoords: {\n\t\tx: {\n\t\t\trefRange: [0, 9504.7],\n\t\t\tname: \"Xa\",\n\t\t},\n\t\ty: {\n\t\t\trefRange: [0, 10000],\n\t\t\tname: \"Ya\",\n\t\t},\n\t\tz: {\n\t\t\trefRange: [0, 10888.3],\n\t\t\tname: \"Za\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\tfromBase (XYZ) {\n\t\t// Make XYZ absolute, not relative to media white\n\t\t// Maximum luminance in PQ is 10,000 cd/m²\n\t\t// Relative XYZ has Y=1 for media white\n\t\treturn XYZ.map (v => Math.max(v * Yw$1, 0));\n\t},\n\ttoBase (AbsXYZ) {\n\t\t// Convert to media-white relative XYZ\n\t\treturn AbsXYZ.map(v => Math.max(v / Yw$1, 0));\n\t},\n});\n\nconst b$1 = 1.15;\nconst g = 0.66;\nconst n$1 = 2610 / (2 ** 14);\nconst ninv$1 = (2 ** 14) / 2610;\nconst c1$2 = 3424 / (2 ** 12);\nconst c2$2 = 2413 / (2 ** 7);\nconst c3$2 = 2392 / (2 ** 7);\nconst p = 1.7 * 2523 / (2 ** 5);\nconst pinv = (2 ** 5) / (1.7 * 2523);\nconst d = -0.56;\nconst d0 = 1.6295499532821566E-11;\n\nconst XYZtoCone_M = [\n\t[  0.41478972, 0.579999,  0.0146480 ],\n\t[ -0.2015100,  1.120649,  0.0531008 ],\n\t[ -0.0166008,  0.264800,  0.6684799 ],\n];\n// XYZtoCone_M inverted\nconst ConetoXYZ_M = [\n\t[  1.9242264357876067,  -1.0047923125953657,  0.037651404030618   ],\n\t[  0.35031676209499907,  0.7264811939316552, -0.06538442294808501 ],\n\t[ -0.09098281098284752, -0.3127282905230739,  1.5227665613052603  ],\n];\nconst ConetoIab_M = [\n\t[  0.5,       0.5,       0        ],\n\t[  3.524000, -4.066708,  0.542708 ],\n\t[  0.199076,  1.096799, -1.295875 ],\n];\n// ConetoIab_M inverted\nconst IabtoCone_M = [\n\t[ 1,                   0.1386050432715393,   0.05804731615611886 ],\n\t[ 0.9999999999999999, -0.1386050432715393,  -0.05804731615611886 ],\n\t[ 0.9999999999999998, -0.09601924202631895, -0.8118918960560388  ],\n];\n\nvar Jzazbz = new ColorSpace({\n\tid: \"jzazbz\",\n\tname: \"Jzazbz\",\n\tcoords: {\n\t\tjz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Jz\",\n\t\t},\n\t\taz: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t},\n\t\tbz: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t},\n\t},\n\n\tbase: XYZ_Abs_D65,\n\tfromBase (XYZ) {\n\t\t// First make XYZ absolute, not relative to media white\n\t\t// Maximum luminance in PQ is 10,000 cd/m²\n\t\t// Relative XYZ has Y=1 for media white\n\t\t// BT.2048 says media white Y=203 at PQ 58\n\n\t\tlet [ Xa, Ya, Za ] = XYZ;\n\n\t\t// modify X and Y\n\t\tlet Xm = (b$1 * Xa) - ((b$1 - 1) * Za);\n\t\tlet Ym = (g * Ya) - ((g - 1) * Xa);\n\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoCone_M, [ Xm, Ym, Za ]);\n\n\t\t// PQ-encode LMS\n\t\tlet PQLMS = LMS.map (function (val) {\n\t\t\tlet num = c1$2 + (c2$2 * ((val / 10000) ** n$1));\n\t\t\tlet denom = 1 + (c3$2 * ((val / 10000) ** n$1));\n\n\t\t\treturn (num / denom)  ** p;\n\t\t});\n\n\t\t// almost there, calculate Iz az bz\n\t\tlet [ Iz, az, bz] = multiplyMatrices(ConetoIab_M, PQLMS);\n\t\t// console.log({Iz, az, bz});\n\n\t\tlet Jz = ((1 + d) * Iz) / (1 + (d * Iz)) - d0;\n\t\treturn [Jz, az, bz];\n\t},\n\ttoBase (Jzazbz) {\n\t\tlet [Jz, az, bz] = Jzazbz;\n\t\tlet Iz = (Jz + d0) / (1 + d - d * (Jz + d0));\n\n\t\t// bring into LMS cone domain\n\t\tlet PQLMS = multiplyMatrices(IabtoCone_M, [ Iz, az, bz ]);\n\n\t\t// convert from PQ-coded to linear-light\n\t\tlet LMS = PQLMS.map(function (val) {\n\t\t\tlet num = (c1$2 - (val ** pinv));\n\t\t\tlet denom = (c3$2 * (val ** pinv)) - c2$2;\n\t\t\tlet x = 10000 * ((num / denom) ** ninv$1);\n\n\t\t\treturn (x); \t// luminance relative to diffuse white, [0, 70 or so].\n\t\t});\n\n\t\t// modified abs XYZ\n\t\tlet [ Xm, Ym, Za ] = multiplyMatrices(ConetoXYZ_M, LMS);\n\n\t\t// restore standard D50 relative XYZ, relative to media white\n\t\tlet Xa = (Xm + ((b$1 - 1) * Za)) / b$1;\n\t\tlet Ya = (Ym + ((g - 1) * Xa)) / g;\n\t\treturn [ Xa, Ya, Za ];\n\t},\n\n\tformats: {\n\t\t// https://drafts.csswg.org/css-color-hdr/#Jzazbz\n\t\t\"color\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n\nvar jzczhz = new ColorSpace({\n\tid: \"jzczhz\",\n\tname: \"JzCzHz\",\n\tcoords: {\n\t\tjz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Jz\",\n\t\t},\n\t\tcz: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\thz: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: Jzazbz,\n\tfromBase (jzazbz) {\n\t\t// Convert to polar form\n\t\tlet [Jz, az, bz] = jzazbz;\n\t\tlet hue;\n\t\tconst ε = 0.0002; // chromatic components much smaller than a,b\n\n\t\tif (Math.abs(az) < ε && Math.abs(bz) < ε) {\n\t\t\thue = NaN;\n\t\t}\n\t\telse {\n\t\t\thue = Math.atan2(bz, az) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tJz, // Jz is still Jz\n\t\t\tMath.sqrt(az ** 2 + bz ** 2), // Chroma\n\t\t\tconstrain(hue), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\ttoBase (jzczhz) {\n\t\t// Convert from polar form\n\t\t// debugger;\n\t\treturn [\n\t\t\tjzczhz[0], // Jz is still Jz\n\t\t\tjzczhz[1] * Math.cos(jzczhz[2] * Math.PI / 180), // az\n\t\t\tjzczhz[1] * Math.sin(jzczhz[2] * Math.PI / 180),  // bz\n\t\t];\n\t},\n});\n\n// More accurate color-difference formulae\n// than the simple 1976 Euclidean distance in Lab\n\n// Uses JzCzHz, which has improved perceptual uniformity\n// and thus a simple Euclidean root-sum of ΔL² ΔC² ΔH²\n// gives good results.\n\nfunction deltaEJz (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE in JzCzHz.\n\tlet [Jz1, Cz1, Hz1] = jzczhz.from(color);\n\tlet [Jz2, Cz2, Hz2] = jzczhz.from(sample);\n\n\t// Lightness and Chroma differences\n\t// sign does not matter as they are squared.\n\tlet ΔJ = Jz1 - Jz2;\n\tlet ΔC = Cz1 - Cz2;\n\n\t// length of chord for ΔH\n\tif ((Number.isNaN(Hz1)) && (Number.isNaN(Hz2))) {\n\t\t// both undefined hues\n\t\tHz1 = 0;\n\t\tHz2 = 0;\n\t}\n\telse if (Number.isNaN(Hz1)) {\n\t\t// one undefined, set to the defined hue\n\t\tHz1 = Hz2;\n\t}\n\telse if (Number.isNaN(Hz2)) {\n\t\tHz2 = Hz1;\n\t}\n\n\tlet Δh = Hz1 - Hz2;\n\tlet ΔH = 2 * Math.sqrt(Cz1 * Cz2) * Math.sin((Δh / 2) * (Math.PI / 180));\n\n\treturn Math.sqrt(ΔJ ** 2 + ΔC ** 2 + ΔH ** 2);\n}\n\nconst c1$1 = 3424 / 4096;\nconst c2$1 = 2413 / 128;\nconst c3$1 = 2392 / 128;\nconst m1$1 = 2610 / 16384;\nconst m2 = 2523 / 32;\nconst im1 = 16384 / 2610;\nconst im2 = 32 / 2523;\n\n// The matrix below includes the 4% crosstalk components\n// and is from the Dolby \"What is ICtCp\" paper\"\nconst XYZtoLMS_M = [\n\t[  0.3592832590121217,  0.6976051147779502, -0.0358915932320290 ],\n\t[ -0.1920808463704993,  1.1004767970374321,  0.0753748658519118 ],\n\t[  0.0070797844607479,  0.0748396662186362,  0.8433265453898765 ],\n];\n// linear-light Rec.2020 to LMS, again with crosstalk\n// rational terms from Jan Fröhlich,\n// Encoding High Dynamic Range andWide Color Gamut Imagery, p.97\n// and ITU-R BT.2124-0 p.2\n/*\nconst Rec2020toLMS_M = [\n\t[ 1688 / 4096,  2146 / 4096,   262 / 4096 ],\n\t[  683 / 4096,  2951 / 4096,   462 / 4096 ],\n\t[   99 / 4096,   309 / 4096,  3688 / 4096 ]\n];\n*/\n// this includes the Ebner LMS coefficients,\n// the rotation, and the scaling to [-0.5,0.5] range\n// rational terms from Fröhlich p.97\n// and ITU-R BT.2124-0 pp.2-3\nconst LMStoIPT_M = [\n\t[  2048 / 4096,   2048 / 4096,       0      ],\n\t[  6610 / 4096, -13613 / 4096,  7003 / 4096 ],\n\t[ 17933 / 4096, -17390 / 4096,  -543 / 4096 ],\n];\n\n// inverted matrices, calculated from the above\nconst IPTtoLMS_M = [\n\t[ 0.9999999999999998,  0.0086090370379328,  0.1110296250030260 ],\n\t[ 0.9999999999999998, -0.0086090370379328, -0.1110296250030259 ],\n\t[ 0.9999999999999998,  0.5600313357106791, -0.3206271749873188 ],\n];\n/*\nconst LMStoRec2020_M = [\n\t[ 3.4375568932814012112,   -2.5072112125095058195,   0.069654319228104608382],\n\t[-0.79142868665644156125,   1.9838372198740089874,  -0.19240853321756742626 ],\n\t[-0.025646662911506476363, -0.099240248643945566751, 1.1248869115554520431  ]\n];\n*/\nconst LMStoXYZ_M = [\n\t[  2.0701522183894223, -1.3263473389671563,  0.2066510476294053 ],\n\t[  0.3647385209748072,  0.6805660249472273, -0.0453045459220347 ],\n\t[ -0.0497472075358123, -0.0492609666966131,  1.1880659249923042 ],\n];\n\n// Only the PQ form of ICtCp is implemented here. There is also an HLG form.\n// from Dolby, \"WHAT IS ICTCP?\"\n// https://professional.dolby.com/siteassets/pdfs/ictcp_dolbywhitepaper_v071.pdf\n// and\n// Dolby, \"Perceptual Color Volume\n// Measuring the Distinguishable Colors of HDR and WCG Displays\"\n// https://professional.dolby.com/siteassets/pdfs/dolby-vision-measuring-perceptual-color-volume-v7.1.pdf\nvar ictcp = new ColorSpace({\n\tid: \"ictcp\",\n\tname: \"ICTCP\",\n\t// From BT.2100-2 page 7:\n\t// During production, signal values are expected to exceed the\n\t// range E′ = [0.0 : 1.0]. This provides processing headroom and avoids\n\t// signal degradation during cascaded processing. Such values of E′,\n\t// below 0.0 or exceeding 1.0, should not be clipped during production\n\t// and exchange.\n\t// Values below 0.0 should not be clipped in reference displays (even\n\t// though they represent “negative” light) to allow the black level of\n\t// the signal (LB) to be properly set using test signals known as “PLUGE”\n\tcoords: {\n\t\ti: {\n\t\t\trefRange: [0, 1],\t// Constant luminance,\n\t\t\tname: \"I\",\n\t\t},\n\t\tct: {\n\t\t\trefRange: [-0.5, 0.5],\t// Full BT.2020 gamut in range [-0.5, 0.5]\n\t\t\tname: \"CT\",\n\t\t},\n\t\tcp: {\n\t\t\trefRange: [-0.5, 0.5],\n\t\t\tname: \"CP\",\n\t\t},\n\t},\n\n\tbase: XYZ_Abs_D65,\n\tfromBase (XYZ) {\n\t\t// move to LMS cone domain\n\t\tlet LMS = multiplyMatrices(XYZtoLMS_M, XYZ);\n\n\t\treturn LMStoICtCp(LMS);\n\t},\n\ttoBase (ICtCp) {\n\t\tlet LMS = ICtCptoLMS(ICtCp);\n\n\t\treturn multiplyMatrices(LMStoXYZ_M, LMS);\n\t},\n});\n\nfunction LMStoICtCp (LMS) {\n\t// apply the PQ EOTF\n\t// we can't ever be dividing by zero because of the \"1 +\" in the denominator\n\tlet PQLMS = LMS.map (function (val) {\n\t\tlet num = c1$1 + (c2$1 * ((val / 10000) ** m1$1));\n\t\tlet denom = 1 + (c3$1 * ((val / 10000) ** m1$1));\n\n\t\treturn (num / denom)  ** m2;\n\t});\n\n\t// LMS to IPT, with rotation for Y'C'bC'r compatibility\n\treturn multiplyMatrices(LMStoIPT_M, PQLMS);\n}\n\nfunction ICtCptoLMS (ICtCp) {\n\tlet PQLMS = multiplyMatrices(IPTtoLMS_M, ICtCp);\n\n\t// From BT.2124-0 Annex 2 Conversion 3\n\tlet LMS = PQLMS.map (function (val) {\n\t\tlet num  = Math.max((val ** im2) - c1$1, 0);\n\t\tlet denom = (c2$1 - (c3$1 * (val ** im2)));\n\t\treturn 10000 * ((num / denom) ** im1);\n\t});\n\n\treturn LMS;\n}\n\n// Delta E in ICtCp space,\n// which the ITU calls Delta E ITP, which is shorter\n// formulae from ITU Rec. ITU-R BT.2124-0\n\nfunction deltaEITP (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\t// Given this color as the reference\n\t// and a sample,\n\t// calculate deltaE in ICtCp\n\t// which is simply the Euclidean distance\n\n\tlet [ I1, T1, P1 ] = ictcp.from(color);\n\tlet [ I2, T2, P2 ] = ictcp.from(sample);\n\n\t// the 0.25 factor is to undo the encoding scaling in Ct\n\t// the 720 is so that 1 deltaE = 1 JND\n\t// per  ITU-R BT.2124-0 p.3\n\n\treturn 720 * Math.sqrt((I1 - I2) ** 2 + (0.25 * (T1 - T2) ** 2) + (P1 - P2) ** 2);\n}\n\nconst white$3 = WHITES.D65;\nconst adaptedCoef = 0.42;\nconst adaptedCoefInv = 1 / adaptedCoef;\nconst tau = 2 * Math.PI;\n\nconst cat16 = [\n\t[  0.401288,  0.650173, -0.051461 ],\n\t[ -0.250268,  1.204414,  0.045854 ],\n\t[ -0.002079,  0.048952,  0.953127 ],\n];\n\nconst cat16Inv = [\n\t[1.8620678550872327, -1.0112546305316843, 0.14918677544445175],\n\t[0.38752654323613717, 0.6214474419314753, -0.008973985167612518],\n\t[-0.015841498849333856, -0.03412293802851557, 1.0499644368778496],\n];\n\nconst m1 = [\n\t[460.0, 451.0, 288.0],\n\t[460.0, -891.0, -261.0],\n\t[460.0, -220.0, -6300.0],\n];\n\nconst surroundMap = {\n\tdark: [0.8, 0.525, 0.8],\n\tdim: [0.9, 0.59, 0.9],\n\taverage: [1, 0.69, 1],\n};\n\nconst hueQuadMap = {\n\t// Red, Yellow, Green, Blue, Red\n\th: [20.14, 90.00, 164.25, 237.53, 380.14],\n\te: [0.8, 0.7, 1.0, 1.2, 0.8],\n\tH: [0.0, 100.0, 200.0, 300.0, 400.0],\n};\n\nconst rad2deg = 180 / Math.PI;\nconst deg2rad$1 = Math.PI / 180;\n\nfunction adapt$1 (coords, fl) {\n\tconst temp = coords.map(c => {\n\t\tconst x = spow(fl * Math.abs(c) * 0.01, adaptedCoef);\n\t\treturn 400 * copySign(x, c) / (x + 27.13);\n\t});\n\treturn temp;\n}\n\nfunction unadapt (adapted, fl) {\n\tconst constant = 100 / fl * (27.13 ** adaptedCoefInv);\n\treturn adapted.map(c => {\n\t\tconst cabs = Math.abs(c);\n\t\treturn copySign(constant * spow(cabs / (400 - cabs), adaptedCoefInv), c);\n\t});\n}\n\nfunction hueQuadrature (h) {\n\tlet hp = constrain(h);\n\tif (hp <= hueQuadMap.h[0]) {\n\t\thp += 360;\n\t}\n\n\tconst i = bisectLeft(hueQuadMap.h, hp) - 1;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\tconst Hi = hueQuadMap.H[i];\n\n\tconst t = (hp - hi) / ei;\n\treturn Hi + (100 * t) / (t + (hii - hp) / eii);\n}\n\nfunction invHueQuadrature (H) {\n\tlet Hp = ((H % 400 + 400) % 400);\n\tconst i = Math.floor(0.01 * Hp);\n\tHp = Hp % 100;\n\tconst [hi, hii] = hueQuadMap.h.slice(i, i + 2);\n\tconst [ei, eii] = hueQuadMap.e.slice(i, i + 2);\n\n\treturn constrain(\n\t\t(Hp * (eii * hi - ei * hii) - 100 * hi * eii) /\n\t\t(Hp * (eii - ei) - 100 * eii),\n\t);\n}\n\nfunction environment (\n\trefWhite,\n\tadaptingLuminance,\n\tbackgroundLuminance,\n\tsurround,\n\tdiscounting,\n) {\n\n\tconst env = {};\n\n\tenv.discounting = discounting;\n\tenv.refWhite = refWhite;\n\tenv.surround = surround;\n\tconst xyzW = refWhite.map(c => {\n\t\treturn c * 100;\n\t});\n\n\t// The average luminance of the environment in `cd/m^2cd/m` (a.k.a. nits)\n\tenv.la = adaptingLuminance;\n\t// The relative luminance of the nearby background\n\tenv.yb = backgroundLuminance;\n\t// Absolute luminance of the reference white.\n\tconst yw = xyzW[1];\n\n\t// Cone response for reference white\n\tconst rgbW = multiplyMatrices(cat16, xyzW);\n\n\t// Surround: dark, dim, and average\n\tsurround = surroundMap[env.surround];\n\tconst f = surround[0];\n\tenv.c = surround[1];\n\tenv.nc = surround[2];\n\n\tconst k = 1 / (5 * env.la + 1);\n\tconst k4 = k ** 4;\n\n\t// Factor of luminance level adaptation\n\tenv.fl = (k4 * env.la + 0.1 * (1 - k4) * (1 - k4) * Math.cbrt(5 * env.la));\n\tenv.flRoot = env.fl ** 0.25;\n\n\tenv.n = env.yb / yw;\n\tenv.z = 1.48 + Math.sqrt(env.n);\n\tenv.nbb = 0.725 * (env.n ** -0.2);\n\tenv.ncb = env.nbb;\n\n\t// Degree of adaptation calculating if not discounting\n\t// illuminant (assumed eye is fully adapted)\n\tconst d = (discounting) ?\n\t\t1 :\n\t\tMath.max(\n\t\t\tMath.min(f * (1 - 1 / 3.6 * Math.exp((-env.la - 42) / 92)), 1),\n\t\t\t0,\n\t\t);\n\tenv.dRgb = rgbW.map(c => {\n\t\treturn interpolate(1, yw / c, d);\n\t});\n\tenv.dRgbInv = env.dRgb.map(c => {\n\t\treturn 1 / c;\n\t});\n\n\t// Achromatic response\n\tconst rgbCW = rgbW.map((c, i) => {\n\t\treturn c * env.dRgb[i];\n\t});\n\tconst rgbAW = adapt$1(rgbCW, env.fl);\n\tenv.aW = env.nbb * (2 * rgbAW[0] + rgbAW[1] + 0.05 * rgbAW[2]);\n\n\t// console.log(env);\n\n\treturn env;\n}\n\n// Pre-calculate everything we can with the viewing conditions\nconst viewingConditions$1 = environment(\n\twhite$3,\n\t64 / Math.PI * 0.2, 20,\n\t\"average\",\n\tfalse,\n);\n\nfunction fromCam16 (cam16, env) {\n\n\t// These check ensure one, and only one attribute for a\n\t// given category is provided.\n\tif (!((cam16.J !== undefined) ^ (cam16.Q !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'J' or 'Q'\");\n\t}\n\n\tif (!((cam16.C !== undefined) ^ (cam16.M !== undefined) ^ (cam16.s !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'C', 'M' or 's'\");\n\t}\n\n\t// Hue is absolutely required\n\tif (!((cam16.h !== undefined) ^ (cam16.H !== undefined))) {\n\t\tthrow new Error(\"Conversion requires one and only one: 'h' or 'H'\");\n\t}\n\n\t// Black\n\tif (cam16.J === 0.0 || cam16.Q === 0.0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\n\t// Break hue into Cartesian components\n\tlet hRad = 0.0;\n\tif (cam16.h !== undefined) {\n\t\thRad = constrain(cam16.h) * deg2rad$1;\n\t}\n\telse {\n\t\thRad = invHueQuadrature(cam16.H) * deg2rad$1;\n\t}\n\n\tconst cosh = Math.cos(hRad);\n\tconst sinh = Math.sin(hRad);\n\n\t// Calculate `Jroot` from one of the lightness derived coordinates.\n\tlet Jroot = 0.0;\n\tif (cam16.J !== undefined) {\n\t\tJroot = spow(cam16.J, 1 / 2) * 0.1;\n\t}\n\telse if (cam16.Q !== undefined) {\n\t\tJroot = 0.25 * env.c * cam16.Q / ((env.aW + 4) * env.flRoot);\n\t}\n\n\t// Calculate the `t` value from one of the chroma derived coordinates\n\tlet alpha = 0.0;\n\tif (cam16.C !== undefined) {\n\t\talpha = cam16.C / Jroot;\n\t}\n\telse if (cam16.M !== undefined) {\n\t\talpha = (cam16.M / env.flRoot) / Jroot;\n\t}\n\telse if (cam16.s !== undefined) {\n\t\talpha = 0.0004 * (cam16.s ** 2) * (env.aW + 4) / env.c;\n\t}\n\tconst t = spow(\n\t\talpha * Math.pow(1.64 - Math.pow(0.29, env.n), -0.73),\n\t\t10 / 9,\n\t);\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\t// Achromatic response\n\tconst A = env.aW * spow(Jroot, 2 / env.c / env.z);\n\n\t// Calculate red-green and yellow-blue components\n\tconst p1 = 5e4 / 13 * env.nc * env.ncb * et;\n\tconst p2 = A / env.nbb;\n\tconst r = (\n\t\t23 * (p2 + 0.305) *\n\t\tzdiv(t, 23 * p1 + t * (11 * cosh + 108 * sinh))\n\t);\n\tconst a = r * cosh;\n\tconst b = r * sinh;\n\n\t// Calculate back from cone response to XYZ\n\tconst rgb_c = unadapt(\n\t\tmultiplyMatrices(m1, [p2, a, b]).map(c => {\n\t\t\treturn c * 1 / 1403;\n\t\t}),\n\t\tenv.fl,\n\t);\n\treturn multiplyMatrices(\n\t\tcat16Inv,\n\t\trgb_c.map((c, i) => {\n\t\t\treturn c * env.dRgbInv[i];\n\t\t}),\n\t).map(c => {\n\t\treturn c / 100;\n\t});\n}\n\n\nfunction toCam16 (xyzd65, env) {\n\t// Cone response\n\tconst xyz100 = xyzd65.map(c => {\n\t\treturn c * 100;\n\t});\n\tconst rgbA = adapt$1(\n\t\tmultiplyMatrices(cat16, xyz100).map((c, i) => {\n\t\t\treturn c * env.dRgb[i];\n\t\t}),\n\t\tenv.fl,\n\t);\n\n\t// Calculate hue from red-green and yellow-blue components\n\tconst a = rgbA[0] + (-12 * rgbA[1] + rgbA[2]) / 11;\n\tconst b = (rgbA[0] + rgbA[1] - 2 * rgbA[2]) / 9;\n\tconst hRad = ((Math.atan2(b, a) % tau) + tau) % tau;\n\n\t// Eccentricity\n\tconst et = 0.25 * (Math.cos(hRad + 2) + 3.8);\n\n\tconst t = (\n\t\t5e4 / 13 * env.nc * env.ncb *\n\t\tzdiv(\n\t\t\tet * Math.sqrt(a ** 2 + b ** 2),\n\t\t\trgbA[0] + rgbA[1] + 1.05 * rgbA[2] + 0.305,\n\t\t)\n\t);\n\tconst alpha = spow(t, 0.9) * Math.pow(1.64 - Math.pow(0.29, env.n), 0.73);\n\n\t// Achromatic response\n\tconst A = env.nbb * (2 * rgbA[0] + rgbA[1] + 0.05 * rgbA[2]);\n\n\tconst Jroot = spow(A / env.aW, 0.5 * env.c * env.z);\n\n\t// Lightness\n\tconst J = 100 * spow(Jroot, 2);\n\n\t// Brightness\n\tconst Q = (4 / env.c * Jroot * (env.aW + 4) * env.flRoot);\n\n\t// Chroma\n\tconst C = alpha * Jroot;\n\n\t// Colorfulness\n\tconst M = C * env.flRoot;\n\n\t// Hue\n\tconst h = constrain(hRad * rad2deg);\n\n\t// Hue quadrature\n\tconst H = hueQuadrature(h);\n\n\t// Saturation\n\tconst s = 50 * spow(env.c * alpha / (env.aW + 4), 1 / 2);\n\n\t// console.log({J: J, C: C, h: h, s: s, Q: Q, M: M, H: H});\n\n\treturn {J: J, C: C, h: h, s: s, Q: Q, M: M, H: H};\n}\n\n\n// Provided as a way to directly evaluate the CAM16 model\n// https://observablehq.com/@jrus/cam16: reference implementation\n// https://arxiv.org/pdf/1802.06067.pdf: Nico Schlömer\n// https://onlinelibrary.wiley.com/doi/pdf/10.1002/col.22324: hue quadrature\n// https://www.researchgate.net/publication/318152296_Comprehensive_color_solutions_CAM16_CAT16_and_CAM16-UCS\n// Results compared against: https://github.com/colour-science/colour\nvar cam16 = new ColorSpace({\n\tid: \"cam16-jmh\",\n\tcssId: \"--cam16-jmh\",\n\tname: \"CAM16-JMh\",\n\tcoords: {\n\t\tj: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"J\",\n\t\t},\n\t\tm: {\n\t\t\trefRange: [0, 105.0],\n\t\t\tname: \"Colorfulness\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\n\tfromBase (xyz) {\n\t\tconst cam16 = toCam16(xyz, viewingConditions$1);\n\t\treturn [cam16.J, cam16.M, cam16.h];\n\t},\n\ttoBase (cam16) {\n\t\treturn fromCam16(\n\t\t\t{J: cam16[0], M: cam16[1], h: cam16[2]},\n\t\t\tviewingConditions$1,\n\t\t);\n\t},\n});\n\nconst white$2 = WHITES.D65;\nconst ε$4 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst κ$3 = 24389 / 27;   // 29^3/3^3\n\nfunction toLstar (y) {\n\t// Convert XYZ Y to L*\n\n\tconst fy = (y > ε$4) ? Math.cbrt(y) : (κ$3 * y + 16) / 116;\n\treturn (116.0 * fy) - 16.0;\n}\n\nfunction fromLstar (lstar) {\n\t// Convert L* back to XYZ Y\n\n\treturn (lstar > 8) ?  Math.pow((lstar + 16) / 116, 3) : lstar / κ$3;\n}\n\nfunction fromHct (coords, env) {\n\t// Use Newton's method to try and converge as quick as possible or\n\t// converge as close as we can. While the requested precision is achieved\n\t// most of the time, it may not always be achievable. Especially past the\n\t// visible spectrum, the algorithm will likely struggle to get the same\n\t// precision. If, for whatever reason, we cannot achieve the accuracy we\n\t// seek in the allotted iterations, just return the closest we were able to\n\t// get.\n\n\tlet [h, c, t] = coords;\n\tlet xyz = [];\n\tlet j = 0;\n\n\t// Shortcut out for black\n\tif (t === 0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\n\t// Calculate the Y we need to target\n\tlet y = fromLstar(t);\n\n\t// A better initial guess yields better results. Polynomials come from\n\t// curve fitting the T vs J response.\n\tif (t > 0) {\n\t\tj = 0.00379058511492914 * t ** 2 + 0.608983189401032 * t + 0.9155088574762233;\n\t}\n\telse {\n\t\tj = 9.514440756550361e-06 * t ** 2 + 0.08693057439788597 * t - 21.928975842194614;\n\t}\n\n\t// Threshold of how close is close enough, and max number of attempts.\n\t// More precision and more attempts means more time spent iterating. Higher\n\t// required precision gives more accuracy but also increases the chance of\n\t// not hitting the goal. 2e-12 allows us to convert round trip with\n\t// reasonable accuracy of six decimal places or more.\n\tconst threshold = 2e-12;\n\tconst max_attempts = 15;\n\n\tlet attempt = 0;\n\tlet last = Infinity;\n\n\t// Try to find a J such that the returned y matches the returned y of the L*\n\twhile (attempt <= max_attempts) {\n\t\txyz = fromCam16({J: j, C: c, h: h}, env);\n\n\t\t// If we are within range, return XYZ\n\t\t// If we are closer than last time, save the values\n\t\tconst delta = Math.abs(xyz[1] - y);\n\t\tif (delta < last) {\n\t\t\tif (delta <= threshold) {\n\t\t\t\treturn xyz;\n\t\t\t}\n\t\t\tlast = delta;\n\t\t}\n\n\t\t// f(j_root) = (j ** (1 / 2)) * 0.1\n\t\t// f(j) = ((f(j_root) * 100) ** 2) / j - 1 = 0\n\t\t// f(j_root) = Y = y / 100\n\t\t// f(j) = (y ** 2) / j - 1\n\t\t// f'(j) = (2 * y) / j\n\t\tj = j - (xyz[1] - y) * j / (2 * xyz[1]);\n\n\t\tattempt += 1;\n\t}\n\n\t// We could not acquire the precision we desired,\n\t// return our closest attempt.\n\treturn fromCam16({J: j, C: c, h: h}, env);\n}\n\nfunction toHct (xyz, env) {\n\t// Calculate HCT by taking the L* of CIE LCh D65 and CAM16 chroma and hue.\n\n\tconst t = toLstar(xyz[1]);\n\tif (t === 0.0) {\n\t\treturn [0.0, 0.0, 0.0];\n\t}\n\tconst cam16 = toCam16(xyz, viewingConditions);\n\treturn [constrain(cam16.h), cam16.C, t];\n}\n\n// Pre-calculate everything we can with the viewing conditions\nconst viewingConditions = environment(\n\twhite$2, 200 / Math.PI * fromLstar(50.0),\n\tfromLstar(50.0) * 100,\n\t\"average\",\n\tfalse,\n);\n\n// https://material.io/blog/science-of-color-design\n// This is not a port of the material-color-utilities,\n// but instead implements the full color space as described,\n// combining CAM16 JCh and Lab D65. This does not clamp conversion\n// to HCT to specific chroma bands and provides support for wider\n// gamuts than Google currently supports and does so at a greater\n// precision (> 8 bits back to sRGB).\n// This implementation comes from https://github.com/facelessuser/coloraide\n// which is licensed under MIT.\nvar hct = new ColorSpace({\n\tid: \"hct\",\n\tname: \"HCT\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 145],\n\t\t\tname: \"Colorfulness\",\n\t\t},\n\t\tt: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Tone\",\n\t\t},\n\t},\n\n\tbase: xyz_d65,\n\n\tfromBase (xyz) {\n\t\treturn toHct(xyz);\n\t},\n\ttoBase (hct) {\n\t\treturn fromHct(hct, viewingConditions);\n\t},\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--hct\",\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n\nconst deg2rad = Math.PI / 180;\nconst ucsCoeff = [1.00, 0.007, 0.0228];\n\n/**\n* Convert HCT chroma and hue (CAM16 JMh colorfulness and hue) using UCS logic for a and b.\n* @param {number[]} coords - HCT coordinates.\n* @return {number[]}\n*/\nfunction convertUcsAb (coords) {\n\t// We want the distance between the actual color.\n\t// If chroma is negative, it will throw off our calculations.\n\t// Normally, converting back to the base and forward will correct it.\n\t// If we have a negative chroma after this, then we have a color that\n\t// cannot resolve to positive chroma.\n\tif (coords[1] < 0) {\n\t\tcoords = hct.fromBase(hct.toBase(coords));\n\t}\n\n\t// Only in extreme cases (usually outside the visible spectrum)\n\t// can the input value for log become negative.\n\t// Avoid domain error by forcing a zero result via \"max\" if necessary.\n\tconst M = Math.log(Math.max(1 + ucsCoeff[2] * coords[1] * viewingConditions.flRoot, 1.0)) / ucsCoeff[2];\n\tconst hrad = coords[0] * deg2rad;\n\tconst a = M * Math.cos(hrad);\n\tconst b = M * Math.sin(hrad);\n\n\treturn [coords[2], a, b];\n}\n\n\n/**\n* Color distance using HCT.\n* @param {Color} color - Color to compare.\n* @param {Color} sample - Color to compare.\n* @return {number[]}\n*/\nfunction deltaEHCT (color, sample) {\n\t[color, sample] = getColor([color, sample]);\n\n\tlet [ t1, a1, b1 ] = convertUcsAb(hct.from(color));\n\tlet [ t2, a2, b2 ] = convertUcsAb(hct.from(sample));\n\n\t// Use simple euclidean distance with a and b using UCS conversion\n\t// and LCh lightness (HCT tone).\n\treturn Math.sqrt((t1 - t2) ** 2 + (a1 - a2) ** 2 + (b1 - b2) ** 2);\n}\n\nvar deltaEMethods = {\n\tdeltaE76,\n\tdeltaECMC,\n\tdeltaE2000,\n\tdeltaEJz,\n\tdeltaEITP,\n\tdeltaEOK,\n\tdeltaEHCT,\n};\n\n/**\n * Calculate the epsilon to 2 degrees smaller than the specified JND.\n * @param {Number} jnd - The target \"just noticeable difference\".\n * @returns {Number}\n */\nfunction calcEpsilon (jnd) {\n\t// Calculate the epsilon to 2 degrees smaller than the specified JND.\n\n\tconst order = (!jnd) ? 0 : Math.floor(Math.log10(Math.abs(jnd)));\n\t// Limit to an arbitrary value to ensure value is never too small and causes infinite loops.\n\treturn Math.max(parseFloat(`1e${order - 2}`), 1e-6);\n}\n\nconst GMAPPRESET = {\n\t\"hct\": {\n\t\tmethod: \"hct.c\",\n\t\tjnd: 2,\n\t\tdeltaEMethod: \"hct\",\n\t\tblackWhiteClamp: {},\n\t},\n\t\"hct-tonal\": {\n\t\tmethod: \"hct.c\",\n\t\tjnd: 0,\n\t\tdeltaEMethod: \"hct\",\n\t\tblackWhiteClamp: { channel: \"hct.t\", min: 0, max: 100 },\n\t},\n};\n\n/**\n * Force coordinates to be in gamut of a certain color space.\n * Mutates the color it is passed.\n * @param {Object|string} options object or spaceId string\n * @param {string} options.method - How to force into gamut.\n *        If \"clip\", coordinates are just clipped to their reference range.\n *        If \"css\", coordinates are reduced according to the CSS 4 Gamut Mapping Algorithm.\n *        If in the form [colorSpaceId].[coordName], that coordinate is reduced\n *        until the color is in gamut. Please note that this may produce nonsensical\n *        results for certain coordinates (e.g. hue) or infinite loops if reducing the coordinate never brings the color in gamut.\n * @param {ColorSpace|string} options.space - The space whose gamut we want to map to\n * @param {string} options.deltaEMethod - The delta E method to use while performing gamut mapping.\n *        If no method is specified, delta E 2000 is used.\n * @param {Number} options.jnd - The \"just noticeable difference\" to target.\n * @param {Object} options.blackWhiteClamp - Used to configure SDR black and clamping.\n *        \"channel\" indicates the \"space.channel\" to use for determining when to clamp.\n *        \"min\" indicates the lower limit for black clamping and \"max\" indicates the upper\n *        limit for white clamping.\n */\n\nfunction toGamut (\n\tcolor,\n\t{\n\t\tmethod = defaults.gamut_mapping,\n\t\tspace = undefined,\n\t\tdeltaEMethod = \"\",\n\t\tjnd = 2,\n\t\tblackWhiteClamp = {},\n\t} = {},\n) {\n\tcolor = getColor(color);\n\n\tif (isString(arguments[1])) {\n\t\tspace = arguments[1];\n\t}\n\telse if (!space) {\n\t\tspace = color.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\n\t// 3 spaces:\n\t// color.space: current color space\n\t// space: space whose gamut we are mapping to\n\t// mapSpace: space with the coord we're reducing\n\n\tif (inGamut(color, space, { epsilon: 0 })) {\n\t\treturn color;\n\t}\n\n\tlet spaceColor;\n\tif (method === \"css\") {\n\t\tspaceColor = toGamutCSS(color, { space });\n\t}\n\telse {\n\t\tif (method !== \"clip\" && !inGamut(color, space)) {\n\n\t\t\tif (Object.prototype.hasOwnProperty.call(GMAPPRESET, method)) {\n\t\t\t\t({method, jnd, deltaEMethod, blackWhiteClamp} = GMAPPRESET[method]);\n\t\t\t}\n\n\t\t\t// Get the correct delta E method\n\t\t\tlet de = deltaE2000;\n\t\t\tif (deltaEMethod !== \"\") {\n\t\t\t\tfor (let m in deltaEMethods) {\n\t\t\t\t\tif (\"deltae\" + deltaEMethod.toLowerCase() === m.toLowerCase()) {\n\t\t\t\t\t\tde = deltaEMethods[m];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tlet clipped = toGamut(to(color, space), { method: \"clip\", space });\n\t\t\tif (de(color, clipped) > jnd) {\n\n\t\t\t\t// Clamp to SDR white and black if required\n\t\t\t\tif (Object.keys(blackWhiteClamp).length === 3) {\n\t\t\t\t\tlet channelMeta = ColorSpace.resolveCoord(blackWhiteClamp.channel);\n\t\t\t\t\tlet channel = get(to(color, channelMeta.space), channelMeta.id);\n\t\t\t\t\tif (isNone(channel)) {\n\t\t\t\t\t\tchannel = 0;\n\t\t\t\t\t}\n\t\t\t\t\tif (channel >= blackWhiteClamp.max) {\n\t\t\t\t\t\treturn to({ space: \"xyz-d65\", coords: WHITES[\"D65\"] }, color.space);\n\t\t\t\t\t}\n\t\t\t\t\telse if (channel <= blackWhiteClamp.min) {\n\t\t\t\t\t\treturn to({ space: \"xyz-d65\", coords: [0, 0, 0] }, color.space);\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\t// Reduce a coordinate of a certain color space until the color is in gamut\n\t\t\t\tlet coordMeta = ColorSpace.resolveCoord(method);\n\t\t\t\tlet mapSpace = coordMeta.space;\n\t\t\t\tlet coordId = coordMeta.id;\n\n\t\t\t\tlet mappedColor = to(color, mapSpace);\n\t\t\t\t// If we were already in the mapped color space, we need to resolve undefined channels\n\t\t\t\tmappedColor.coords.forEach((c, i) => {\n\t\t\t\t\tif (isNone(c)) {\n\t\t\t\t\t\tmappedColor.coords[i] = 0;\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t\tlet bounds = coordMeta.range || coordMeta.refRange;\n\t\t\t\tlet min = bounds[0];\n\t\t\t\tlet ε = calcEpsilon(jnd);\n\t\t\t\tlet low = min;\n\t\t\t\tlet high = get(mappedColor, coordId);\n\n\t\t\t\twhile (high - low > ε) {\n\t\t\t\t\tlet clipped = clone(mappedColor);\n\t\t\t\t\tclipped = toGamut(clipped, { space, method: \"clip\" });\n\t\t\t\t\tlet deltaE = de(mappedColor, clipped);\n\n\t\t\t\t\tif (deltaE - jnd < ε) {\n\t\t\t\t\t\tlow = get(mappedColor, coordId);\n\t\t\t\t\t}\n\t\t\t\t\telse {\n\t\t\t\t\t\thigh = get(mappedColor, coordId);\n\t\t\t\t\t}\n\n\t\t\t\t\tset(mappedColor, coordId, (low + high) / 2);\n\t\t\t\t}\n\n\t\t\t\tspaceColor = to(mappedColor, space);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tspaceColor = clipped;\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\tspaceColor = to(color, space);\n\t\t}\n\n\t\tif (method === \"clip\" // Dumb coord clipping\n\t\t\t// finish off smarter gamut mapping with clip to get rid of ε, see #17\n\t\t\t|| !inGamut(spaceColor, space, { epsilon: 0 })\n\t\t) {\n\t\t\tlet bounds = Object.values(space.coords).map(c => c.range || []);\n\n\t\t\tspaceColor.coords = spaceColor.coords.map((c, i) => {\n\t\t\t\tlet [min, max] = bounds[i];\n\n\t\t\t\tif (min !== undefined) {\n\t\t\t\t\tc = Math.max(min, c);\n\t\t\t\t}\n\n\t\t\t\tif (max !== undefined) {\n\t\t\t\t\tc = Math.min(c, max);\n\t\t\t\t}\n\n\t\t\t\treturn c;\n\t\t\t});\n\t\t}\n\t}\n\n\tif (space !== color.space) {\n\t\tspaceColor = to(spaceColor, color.space);\n\t}\n\n\tcolor.coords = spaceColor.coords;\n\treturn color;\n}\n\ntoGamut.returns = \"color\";\n\n// The reference colors to be used if lightness is out of the range 0-1 in the\n// `Oklch` space. These are created in the `Oklab` space, as it is used by the\n// DeltaEOK calculation, so it is guaranteed to be imported.\nconst COLORS = {\n\tWHITE: { space: OKLab, coords: [1, 0, 0] },\n\tBLACK: { space: OKLab, coords: [0, 0, 0] },\n};\n\n/**\n * Given a color `origin`, returns a new color that is in gamut using\n * the CSS Gamut Mapping Algorithm. If `space` is specified, it will be in gamut\n * in `space`, and returned in `space`. Otherwise, it will be in gamut and\n * returned in the color space of `origin`.\n * @param {Object} origin\n * @param {Object} options\n * @param {ColorSpace|string} options.space\n * @returns {Color}\n */\nfunction toGamutCSS (origin, {space} = {}) {\n\tconst JND = 0.02;\n\tconst ε = 0.0001;\n\n\torigin = getColor(origin);\n\n\tif (!space) {\n\t\tspace = origin.space;\n\t}\n\n\tspace = ColorSpace.get(space);\n\tconst oklchSpace = ColorSpace.get(\"oklch\");\n\n\tif (space.isUnbounded) {\n\t\treturn to(origin, space);\n\t}\n\n\tconst origin_OKLCH = to(origin, oklchSpace);\n\tlet L = origin_OKLCH.coords[0];\n\n\t// return media white or black, if lightness is out of range\n\tif (L >= 1) {\n\t\tconst white = to(COLORS.WHITE, space);\n\t\twhite.alpha = origin.alpha;\n\t\treturn to(white, space);\n\t}\n\tif (L <= 0) {\n\t\tconst black = to(COLORS.BLACK, space);\n\t\tblack.alpha = origin.alpha;\n\t\treturn to(black, space);\n\t}\n\n\tif (inGamut(origin_OKLCH, space, {epsilon: 0})) {\n\t\treturn to(origin_OKLCH, space);\n\t}\n\n\tfunction clip (_color) {\n\t\tconst destColor = to(_color, space);\n\t\tconst spaceCoords = Object.values(space.coords);\n\t\tdestColor.coords = destColor.coords.map((coord, index) => {\n\t\t\tif (\"range\" in spaceCoords[index]) {\n\t\t\t\tconst [min, max] =  spaceCoords[index].range;\n\t\t\t\treturn clamp(min, coord, max);\n\t\t\t}\n\t\t\treturn coord;\n\t\t});\n\t\treturn destColor;\n\t}\n\tlet min = 0;\n\tlet max = origin_OKLCH.coords[1];\n\tlet min_inGamut = true;\n\tlet current = clone(origin_OKLCH);\n\tlet clipped = clip(current);\n\n\tlet E = deltaEOK(clipped, current);\n\tif (E < JND) {\n\t\treturn clipped;\n\t}\n\n\twhile ((max - min) > ε) {\n\t\tconst chroma = (min + max) / 2;\n\t\tcurrent.coords[1] = chroma;\n\t\tif (min_inGamut && inGamut(current, space, {epsilon: 0})) {\n\t\t\tmin = chroma;\n\t\t}\n\t\telse {\n\t\t\tclipped = clip(current);\n\t\t\tE = deltaEOK(clipped, current);\n\t\t\tif (E < JND) {\n\t\t\t\tif ((JND - E < ε)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tmin_inGamut = false;\n\t\t\t\t\tmin = chroma;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tmax = chroma;\n\t\t\t}\n\t\t}\n\t}\n\treturn clipped;\n}\n\n/**\n * Convert to color space and return a new color\n * @param {Object|string} space - Color space object or id\n * @param {Object} options\n * @param {boolean} options.inGamut - Whether to force resulting color in gamut\n * @returns {Color}\n */\nfunction to (color, space, {inGamut} = {}) {\n\tcolor = getColor(color);\n\tspace = ColorSpace.get(space);\n\n\tlet coords = space.from(color);\n\tlet ret = {space, coords, alpha: color.alpha};\n\n\tif (inGamut) {\n\t\tret = toGamut(ret, inGamut === true ? undefined : inGamut);\n\t}\n\n\treturn ret;\n}\n\nto.returns = \"color\";\n\n/**\n * Generic toString() method, outputs a color(spaceId ...coords) function, a functional syntax, or custom formats defined by the color space\n * @param {Object} options\n * @param {number} options.precision - Significant digits\n * @param {boolean} options.inGamut - Adjust coordinates to fit in gamut first? [default: false]\n */\nfunction serialize (color, {\n\tprecision = defaults.precision,\n\tformat = \"default\",\n\tinGamut: inGamut$1 = true,\n\t...customOptions\n} = {}) {\n\tlet ret;\n\n\tcolor = getColor(color);\n\n\tlet formatId = format;\n\tformat = color.space.getFormat(format)\n\t       ?? color.space.getFormat(\"default\")\n\t       ?? ColorSpace.DEFAULT_FORMAT;\n\n\t// The assignment to coords and inGamut needs to stay in the order they are now\n\t// The order of the assignment was changed as a workaround for a bug in Next.js\n\t// See this issue for details: https://github.com/color-js/color.js/issues/260\n\n\tlet coords = color.coords.slice(); // clone so we can manipulate it\n\n\tinGamut$1 ||= format.toGamut;\n\n\tif (inGamut$1 && !inGamut(color)) {\n\t\t// FIXME what happens if the color contains NaNs?\n\t\tcoords = toGamut(clone(color), inGamut$1 === true ? undefined : inGamut$1).coords;\n\t}\n\n\tif (format.type === \"custom\") {\n\t\tcustomOptions.precision = precision;\n\n\t\tif (format.serialize) {\n\t\t\tret = format.serialize(coords, color.alpha, customOptions);\n\t\t}\n\t\telse {\n\t\t\tthrow new TypeError(`format ${formatId} can only be used to parse colors, not for serialization`);\n\t\t}\n\t}\n\telse {\n\t\t// Functional syntax\n\t\tlet name = format.name || \"color\";\n\n\t\tif (format.serializeCoords) {\n\t\t\tcoords = format.serializeCoords(coords, precision);\n\t\t}\n\t\telse {\n\t\t\tif (precision !== null) {\n\t\t\t\tcoords = coords.map(c => {\n\t\t\t\t\treturn serializeNumber(c, {precision});\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\n\t\tlet args = [...coords];\n\n\t\tif (name === \"color\") {\n\t\t\t// If output is a color() function, add colorspace id as first argument\n\t\t\tlet cssId = format.id || format.ids?.[0] || color.space.id;\n\t\t\targs.unshift(cssId);\n\t\t}\n\n\t\tlet alpha = color.alpha;\n\t\tif (precision !== null) {\n\t\t\talpha = serializeNumber(alpha, {precision});\n\t\t}\n\n\t\tlet strAlpha = color.alpha >= 1 || format.noAlpha ? \"\" : `${format.commas ? \",\" : \" /\"} ${alpha}`;\n\t\tret = `${name}(${args.join(format.commas ? \", \" : \" \")}${strAlpha})`;\n\t}\n\n\treturn ret;\n}\n\n// convert an array of linear-light rec2020 values to CIE XYZ\n// using  D65 (no chromatic adaptation)\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n// 0 is actually calculated as  4.994106574466076e-17\nconst toXYZ_M$5 = [\n\t[ 0.6369580483012914, 0.14461690358620832,  0.1688809751641721  ],\n\t[ 0.2627002120112671, 0.6779980715188708,   0.05930171646986196 ],\n\t[ 0.000000000000000,  0.028072693049087428, 1.060985057710791   ],\n];\n\n// from ITU-R BT.2124-0 Annex 2 p.3\nconst fromXYZ_M$5 = [\n\t[  1.716651187971268,  -0.355670783776392, -0.253366281373660  ],\n\t[ -0.666684351832489,   1.616481236634939,  0.0157685458139111 ],\n\t[  0.017639857445311,  -0.042770613257809,  0.942103121235474  ],\n];\n\nvar REC2020Linear = new RGBColorSpace({\n\tid: \"rec2020-linear\",\n\tcssId: \"--rec2020-linear\",\n\tname: \"Linear REC.2020\",\n\twhite: \"D65\",\n\ttoXYZ_M: toXYZ_M$5,\n\tfromXYZ_M: fromXYZ_M$5,\n});\n\n// import sRGB from \"./srgb.js\";\n\nconst α = 1.09929682680944;\nconst β = 0.018053968510807;\n\nvar REC2020 = new RGBColorSpace({\n\tid: \"rec2020\",\n\tname: \"REC.2020\",\n\tbase: REC2020Linear,\n\t// Non-linear transfer function from Rec. ITU-R BT.2020-2 table 4\n\ttoBase (RGB) {\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val < β * 4.5) {\n\t\t\t\treturn val / 4.5;\n\t\t\t}\n\n\t\t\treturn Math.pow((val + α - 1) / α, 1 / 0.45);\n\t\t});\n\t},\n\tfromBase (RGB) {\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val >= β) {\n\t\t\t\treturn α * Math.pow(val, 0.45) - (α - 1);\n\t\t\t}\n\n\t\t\treturn 4.5 * val;\n\t\t});\n\t},\n});\n\nconst toXYZ_M$4 = [\n\t[0.4865709486482162, 0.26566769316909306, 0.1982172852343625],\n\t[0.2289745640697488, 0.6917385218365064,  0.079286914093745],\n\t[0.0000000000000000, 0.04511338185890264, 1.043944368900976],\n];\n\nconst fromXYZ_M$4 = [\n\t[ 2.493496911941425,   -0.9313836179191239, -0.40271078445071684],\n\t[-0.8294889695615747,   1.7626640603183463,  0.023624685841943577],\n\t[ 0.03584583024378447, -0.07617238926804182, 0.9568845240076872],\n];\n\nvar P3Linear = new RGBColorSpace({\n\tid: \"p3-linear\",\n\tcssId: \"--display-p3-linear\",\n\tname: \"Linear P3\",\n\twhite: \"D65\",\n\ttoXYZ_M: toXYZ_M$4,\n\tfromXYZ_M: fromXYZ_M$4,\n});\n\n// This is the linear-light version of sRGB\n// as used for example in SVG filters\n// or in Canvas\n\n// This matrix was calculated directly from the RGB and white chromaticities\n// when rounded to 8 decimal places, it agrees completely with the official matrix\n// see https://github.com/w3c/csswg-drafts/issues/5922\nconst toXYZ_M$3 = [\n\t[ 0.41239079926595934, 0.357584339383878,   0.1804807884018343  ],\n\t[ 0.21263900587151027, 0.715168678767756,   0.07219231536073371 ],\n\t[ 0.01933081871559182, 0.11919477979462598, 0.9505321522496607  ],\n];\n\n// This matrix is the inverse of the above;\n// again it agrees with the official definition when rounded to 8 decimal places\nconst fromXYZ_M$3 = [\n\t[  3.2409699419045226,  -1.537383177570094,   -0.4986107602930034  ],\n\t[ -0.9692436362808796,   1.8759675015077202,   0.04155505740717559 ],\n\t[  0.05563007969699366, -0.20397695888897652,  1.0569715142428786  ],\n];\n\nvar sRGBLinear = new RGBColorSpace({\n\tid: \"srgb-linear\",\n\tname: \"Linear sRGB\",\n\twhite: \"D65\",\n\ttoXYZ_M: toXYZ_M$3,\n\tfromXYZ_M: fromXYZ_M$3,\n});\n\n/* List of CSS color keywords\n * Note that this does not include currentColor, transparent,\n * or system colors\n */\n\n// To produce: Visit https://www.w3.org/TR/css-color-4/#named-colors\n// and run in the console:\n// copy($$(\"tr\", $(\".named-color-table tbody\")).map(tr => `\"${tr.cells[2].textContent.trim()}\": [${tr.cells[4].textContent.trim().split(/\\s+/).map(c => c === \"0\"? \"0\" : c === \"255\"? \"1\" : c + \" / 255\").join(\", \")}]`).join(\",\\n\"))\nvar KEYWORDS = {\n\t\"aliceblue\": [240 / 255, 248 / 255, 1],\n\t\"antiquewhite\": [250 / 255, 235 / 255, 215 / 255],\n\t\"aqua\": [0, 1, 1],\n\t\"aquamarine\": [127 / 255, 1, 212 / 255],\n\t\"azure\": [240 / 255, 1, 1],\n\t\"beige\": [245 / 255, 245 / 255, 220 / 255],\n\t\"bisque\": [1, 228 / 255, 196 / 255],\n\t\"black\": [0, 0, 0],\n\t\"blanchedalmond\": [1, 235 / 255, 205 / 255],\n\t\"blue\": [0, 0, 1],\n\t\"blueviolet\": [138 / 255, 43 / 255, 226 / 255],\n\t\"brown\": [165 / 255, 42 / 255, 42 / 255],\n\t\"burlywood\": [222 / 255, 184 / 255, 135 / 255],\n\t\"cadetblue\": [95 / 255, 158 / 255, 160 / 255],\n\t\"chartreuse\": [127 / 255, 1, 0],\n\t\"chocolate\": [210 / 255, 105 / 255, 30 / 255],\n\t\"coral\": [1, 127 / 255, 80 / 255],\n\t\"cornflowerblue\": [100 / 255, 149 / 255, 237 / 255],\n\t\"cornsilk\": [1, 248 / 255, 220 / 255],\n\t\"crimson\": [220 / 255, 20 / 255, 60 / 255],\n\t\"cyan\": [0, 1, 1],\n\t\"darkblue\": [0, 0, 139 / 255],\n\t\"darkcyan\": [0, 139 / 255, 139 / 255],\n\t\"darkgoldenrod\": [184 / 255, 134 / 255, 11 / 255],\n\t\"darkgray\": [169 / 255, 169 / 255, 169 / 255],\n\t\"darkgreen\": [0, 100 / 255, 0],\n\t\"darkgrey\": [169 / 255, 169 / 255, 169 / 255],\n\t\"darkkhaki\": [189 / 255, 183 / 255, 107 / 255],\n\t\"darkmagenta\": [139 / 255, 0, 139 / 255],\n\t\"darkolivegreen\": [85 / 255, 107 / 255, 47 / 255],\n\t\"darkorange\": [1, 140 / 255, 0],\n\t\"darkorchid\": [153 / 255, 50 / 255, 204 / 255],\n\t\"darkred\": [139 / 255, 0, 0],\n\t\"darksalmon\": [233 / 255, 150 / 255, 122 / 255],\n\t\"darkseagreen\": [143 / 255, 188 / 255, 143 / 255],\n\t\"darkslateblue\": [72 / 255, 61 / 255, 139 / 255],\n\t\"darkslategray\": [47 / 255, 79 / 255, 79 / 255],\n\t\"darkslategrey\": [47 / 255, 79 / 255, 79 / 255],\n\t\"darkturquoise\": [0, 206 / 255, 209 / 255],\n\t\"darkviolet\": [148 / 255, 0, 211 / 255],\n\t\"deeppink\": [1, 20 / 255, 147 / 255],\n\t\"deepskyblue\": [0, 191 / 255, 1],\n\t\"dimgray\": [105 / 255, 105 / 255, 105 / 255],\n\t\"dimgrey\": [105 / 255, 105 / 255, 105 / 255],\n\t\"dodgerblue\": [30 / 255, 144 / 255, 1],\n\t\"firebrick\": [178 / 255, 34 / 255, 34 / 255],\n\t\"floralwhite\": [1, 250 / 255, 240 / 255],\n\t\"forestgreen\": [34 / 255, 139 / 255, 34 / 255],\n\t\"fuchsia\": [1, 0, 1],\n\t\"gainsboro\": [220 / 255, 220 / 255, 220 / 255],\n\t\"ghostwhite\": [248 / 255, 248 / 255, 1],\n\t\"gold\": [1, 215 / 255, 0],\n\t\"goldenrod\": [218 / 255, 165 / 255, 32 / 255],\n\t\"gray\": [128 / 255, 128 / 255, 128 / 255],\n\t\"green\": [0, 128 / 255, 0],\n\t\"greenyellow\": [173 / 255, 1, 47 / 255],\n\t\"grey\": [128 / 255, 128 / 255, 128 / 255],\n\t\"honeydew\": [240 / 255, 1, 240 / 255],\n\t\"hotpink\": [1, 105 / 255, 180 / 255],\n\t\"indianred\": [205 / 255, 92 / 255, 92 / 255],\n\t\"indigo\": [75 / 255, 0, 130 / 255],\n\t\"ivory\": [1, 1, 240 / 255],\n\t\"khaki\": [240 / 255, 230 / 255, 140 / 255],\n\t\"lavender\": [230 / 255, 230 / 255, 250 / 255],\n\t\"lavenderblush\": [1, 240 / 255, 245 / 255],\n\t\"lawngreen\": [124 / 255, 252 / 255, 0],\n\t\"lemonchiffon\": [1, 250 / 255, 205 / 255],\n\t\"lightblue\": [173 / 255, 216 / 255, 230 / 255],\n\t\"lightcoral\": [240 / 255, 128 / 255, 128 / 255],\n\t\"lightcyan\": [224 / 255, 1, 1],\n\t\"lightgoldenrodyellow\": [250 / 255, 250 / 255, 210 / 255],\n\t\"lightgray\": [211 / 255, 211 / 255, 211 / 255],\n\t\"lightgreen\": [144 / 255, 238 / 255, 144 / 255],\n\t\"lightgrey\": [211 / 255, 211 / 255, 211 / 255],\n\t\"lightpink\": [1, 182 / 255, 193 / 255],\n\t\"lightsalmon\": [1, 160 / 255, 122 / 255],\n\t\"lightseagreen\": [32 / 255, 178 / 255, 170 / 255],\n\t\"lightskyblue\": [135 / 255, 206 / 255, 250 / 255],\n\t\"lightslategray\": [119 / 255, 136 / 255, 153 / 255],\n\t\"lightslategrey\": [119 / 255, 136 / 255, 153 / 255],\n\t\"lightsteelblue\": [176 / 255, 196 / 255, 222 / 255],\n\t\"lightyellow\": [1, 1, 224 / 255],\n\t\"lime\": [0, 1, 0],\n\t\"limegreen\": [50 / 255, 205 / 255, 50 / 255],\n\t\"linen\": [250 / 255, 240 / 255, 230 / 255],\n\t\"magenta\": [1, 0, 1],\n\t\"maroon\": [128 / 255, 0, 0],\n\t\"mediumaquamarine\": [102 / 255, 205 / 255, 170 / 255],\n\t\"mediumblue\": [0, 0, 205 / 255],\n\t\"mediumorchid\": [186 / 255, 85 / 255, 211 / 255],\n\t\"mediumpurple\": [147 / 255, 112 / 255, 219 / 255],\n\t\"mediumseagreen\": [60 / 255, 179 / 255, 113 / 255],\n\t\"mediumslateblue\": [123 / 255, 104 / 255, 238 / 255],\n\t\"mediumspringgreen\": [0, 250 / 255, 154 / 255],\n\t\"mediumturquoise\": [72 / 255, 209 / 255, 204 / 255],\n\t\"mediumvioletred\": [199 / 255, 21 / 255, 133 / 255],\n\t\"midnightblue\": [25 / 255, 25 / 255, 112 / 255],\n\t\"mintcream\": [245 / 255, 1, 250 / 255],\n\t\"mistyrose\": [1, 228 / 255, 225 / 255],\n\t\"moccasin\": [1, 228 / 255, 181 / 255],\n\t\"navajowhite\": [1, 222 / 255, 173 / 255],\n\t\"navy\": [0, 0, 128 / 255],\n\t\"oldlace\": [253 / 255, 245 / 255, 230 / 255],\n\t\"olive\": [128 / 255, 128 / 255, 0],\n\t\"olivedrab\": [107 / 255, 142 / 255, 35 / 255],\n\t\"orange\": [1, 165 / 255, 0],\n\t\"orangered\": [1, 69 / 255, 0],\n\t\"orchid\": [218 / 255, 112 / 255, 214 / 255],\n\t\"palegoldenrod\": [238 / 255, 232 / 255, 170 / 255],\n\t\"palegreen\": [152 / 255, 251 / 255, 152 / 255],\n\t\"paleturquoise\": [175 / 255, 238 / 255, 238 / 255],\n\t\"palevioletred\": [219 / 255, 112 / 255, 147 / 255],\n\t\"papayawhip\": [1, 239 / 255, 213 / 255],\n\t\"peachpuff\": [1, 218 / 255, 185 / 255],\n\t\"peru\": [205 / 255, 133 / 255, 63 / 255],\n\t\"pink\": [1, 192 / 255, 203 / 255],\n\t\"plum\": [221 / 255, 160 / 255, 221 / 255],\n\t\"powderblue\": [176 / 255, 224 / 255, 230 / 255],\n\t\"purple\": [128 / 255, 0, 128 / 255],\n\t\"rebeccapurple\": [102 / 255, 51 / 255, 153 / 255],\n\t\"red\": [1, 0, 0],\n\t\"rosybrown\": [188 / 255, 143 / 255, 143 / 255],\n\t\"royalblue\": [65 / 255, 105 / 255, 225 / 255],\n\t\"saddlebrown\": [139 / 255, 69 / 255, 19 / 255],\n\t\"salmon\": [250 / 255, 128 / 255, 114 / 255],\n\t\"sandybrown\": [244 / 255, 164 / 255, 96 / 255],\n\t\"seagreen\": [46 / 255, 139 / 255, 87 / 255],\n\t\"seashell\": [1, 245 / 255, 238 / 255],\n\t\"sienna\": [160 / 255, 82 / 255, 45 / 255],\n\t\"silver\": [192 / 255, 192 / 255, 192 / 255],\n\t\"skyblue\": [135 / 255, 206 / 255, 235 / 255],\n\t\"slateblue\": [106 / 255, 90 / 255, 205 / 255],\n\t\"slategray\": [112 / 255, 128 / 255, 144 / 255],\n\t\"slategrey\": [112 / 255, 128 / 255, 144 / 255],\n\t\"snow\": [1, 250 / 255, 250 / 255],\n\t\"springgreen\": [0, 1, 127 / 255],\n\t\"steelblue\": [70 / 255, 130 / 255, 180 / 255],\n\t\"tan\": [210 / 255, 180 / 255, 140 / 255],\n\t\"teal\": [0, 128 / 255, 128 / 255],\n\t\"thistle\": [216 / 255, 191 / 255, 216 / 255],\n\t\"tomato\": [1, 99 / 255, 71 / 255],\n\t\"turquoise\": [64 / 255, 224 / 255, 208 / 255],\n\t\"violet\": [238 / 255, 130 / 255, 238 / 255],\n\t\"wheat\": [245 / 255, 222 / 255, 179 / 255],\n\t\"white\": [1, 1, 1],\n\t\"whitesmoke\": [245 / 255, 245 / 255, 245 / 255],\n\t\"yellow\": [1, 1, 0],\n\t\"yellowgreen\": [154 / 255, 205 / 255, 50 / 255],\n};\n\nlet coordGrammar = Array(3).fill(\"<percentage> | <number>[0, 255]\");\nlet coordGrammarNumber = Array(3).fill(\"<number>[0, 255]\");\n\nvar sRGB = new RGBColorSpace({\n\tid: \"srgb\",\n\tname: \"sRGB\",\n\tbase: sRGBLinear,\n\tfromBase: rgb => {\n\t\t// convert an array of linear-light sRGB values in the range 0.0-1.0\n\t\t// to gamma corrected form\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs > 0.0031308) {\n\t\t\t\treturn sign * (1.055 * (abs ** (1 / 2.4)) - 0.055);\n\t\t\t}\n\n\t\t\treturn 12.92 * val;\n\t\t});\n\t},\n\ttoBase: rgb => {\n\t\t// convert an array of sRGB values in the range 0.0 - 1.0\n\t\t// to linear light (un-companded) form.\n\t\t// https://en.wikipedia.org/wiki/SRGB\n\t\treturn rgb.map(val => {\n\t\t\tlet sign = val < 0 ? -1 : 1;\n\t\t\tlet abs = val * sign;\n\n\t\t\tif (abs <= 0.04045) {\n\t\t\t\treturn val / 12.92;\n\t\t\t}\n\n\t\t\treturn sign * (((abs + 0.055) / 1.055) ** 2.4);\n\t\t});\n\t},\n\tformats: {\n\t\t\"rgb\": {\n\t\t\tcoords: coordGrammar,\n\t\t},\n\t\t\"rgb_number\": {\n\t\t\tname: \"rgb\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t\tnoAlpha: true,\n\t\t},\n\t\t\"color\": { /* use defaults */ },\n\t\t\"rgba\": {\n\t\t\tcoords: coordGrammar,\n\t\t\tcommas: true,\n\t\t\tlastAlpha: true,\n\t\t},\n\t\t\"rgba_number\": {\n\t\t\tname: \"rgba\",\n\t\t\tcommas: true,\n\t\t\tcoords: coordGrammarNumber,\n\t\t},\n\t\t\"hex\": {\n\t\t\ttype: \"custom\",\n\t\t\ttoGamut: true,\n\t\t\ttest: str => /^#([a-f0-9]{3,4}){1,2}$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tif (str.length <= 5) {\n\t\t\t\t\t// #rgb or #rgba, duplicate digits\n\t\t\t\t\tstr = str.replace(/[a-f0-9]/gi, \"$&$&\");\n\t\t\t\t}\n\n\t\t\t\tlet rgba = [];\n\t\t\t\tstr.replace(/[a-f0-9]{2}/gi, component => {\n\t\t\t\t\trgba.push(parseInt(component, 16) / 255);\n\t\t\t\t});\n\n\t\t\t\treturn {\n\t\t\t\t\tspaceId: \"srgb\",\n\t\t\t\t\tcoords: rgba.slice(0, 3),\n\t\t\t\t\talpha: rgba.slice(3)[0],\n\t\t\t\t};\n\t\t\t},\n\t\t\tserialize: (coords, alpha, {\n\t\t\t\tcollapse = true, // collapse to 3-4 digit hex when possible?\n\t\t\t} = {}) => {\n\t\t\t\tif (alpha < 1) {\n\t\t\t\t\tcoords.push(alpha);\n\t\t\t\t}\n\n\t\t\t\tcoords = coords.map(c => Math.round(c * 255));\n\n\t\t\t\tlet collapsible = collapse && coords.every(c => c % 17 === 0);\n\n\t\t\t\tlet hex = coords.map(c => {\n\t\t\t\t\tif (collapsible) {\n\t\t\t\t\t\treturn (c / 17).toString(16);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn c.toString(16).padStart(2, \"0\");\n\t\t\t\t}).join(\"\");\n\n\t\t\t\treturn \"#\" + hex;\n\t\t\t},\n\t\t},\n\t\t\"keyword\": {\n\t\t\ttype: \"custom\",\n\t\t\ttest: str => /^[a-z]+$/i.test(str),\n\t\t\tparse (str) {\n\t\t\t\tstr = str.toLowerCase();\n\t\t\t\tlet ret = {spaceId: \"srgb\", coords: null, alpha: 1};\n\n\t\t\t\tif (str === \"transparent\") {\n\t\t\t\t\tret.coords = KEYWORDS.black;\n\t\t\t\t\tret.alpha = 0;\n\t\t\t\t}\n\t\t\t\telse {\n\t\t\t\t\tret.coords = KEYWORDS[str];\n\t\t\t\t}\n\n\t\t\t\tif (ret.coords) {\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t},\n\t\t},\n\t},\n});\n\nvar P3 = new RGBColorSpace({\n\tid: \"p3\",\n\tcssId: \"display-p3\",\n\tname: \"P3\",\n\tbase: P3Linear,\n\t// Gamma encoding/decoding is the same as sRGB\n\tfromBase: sRGB.fromBase,\n\ttoBase: sRGB.toBase,\n});\n\n// Default space for CSS output. Code in Color.js makes this wider if there's a DOM available\ndefaults.display_space = sRGB;\n\nlet supportsNone;\n\nif (typeof CSS !== \"undefined\" && CSS.supports) {\n\t// Find widest supported color space for CSS\n\tfor (let space of [lab, REC2020, P3]) {\n\t\tlet coords = space.getMinCoords();\n\t\tlet color = {space, coords, alpha: 1};\n\t\tlet str = serialize(color);\n\n\t\tif (CSS.supports(\"color\", str)) {\n\t\t\tdefaults.display_space = space;\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\n/**\n * Returns a serialization of the color that can actually be displayed in the browser.\n * If the default serialization can be displayed, it is returned.\n * Otherwise, the color is converted to Lab, REC2020, or P3, whichever is the widest supported.\n * In Node.js, this is basically equivalent to `serialize()` but returns a `String` object instead.\n *\n * @export\n * @param {{space, coords} | Color | string} color\n * @param {*} [options={}] Options to be passed to serialize()\n * @param {ColorSpace | string} [options.space = defaults.display_space] Color space to use for serialization if default is not supported\n * @returns {String} String object containing the serialized color with a color property containing the converted color (or the original, if no conversion was necessary)\n */\nfunction display (color, {space = defaults.display_space, ...options} = {}) {\n\tlet ret = serialize(color, options);\n\n\tif (typeof CSS === \"undefined\" || CSS.supports(\"color\", ret) || !defaults.display_space) {\n\t\tret = new String(ret);\n\t\tret.color = color;\n\t}\n\telse {\n\t\t// If we're here, what we were about to output is not supported\n\t\tlet fallbackColor = color;\n\n\t\t// First, check if the culprit is none values\n\t\tlet hasNone = color.coords.some(isNone) || isNone(color.alpha);\n\n\t\tif (hasNone) {\n\t\t\t// Does the browser support none values?\n\t\t\tif (!(supportsNone ??= CSS.supports(\"color\", \"hsl(none 50% 50%)\"))) {\n\t\t\t\t// Nope, try again without none\n\t\t\t\tfallbackColor = clone(color);\n\t\t\t\tfallbackColor.coords = fallbackColor.coords.map(skipNone);\n\t\t\t\tfallbackColor.alpha = skipNone(fallbackColor.alpha);\n\n\t\t\t\tret = serialize(fallbackColor, options);\n\n\t\t\t\tif (CSS.supports(\"color\", ret)) {\n\t\t\t\t\t// We're done, now it's supported\n\t\t\t\t\tret = new String(ret);\n\t\t\t\t\tret.color = fallbackColor;\n\t\t\t\t\treturn ret;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// If we're here, the color function is not supported\n\t\t// Fall back to fallback space\n\t\tfallbackColor = to(fallbackColor, space);\n\t\tret = new String(serialize(fallbackColor, options));\n\t\tret.color = fallbackColor;\n\t}\n\n\treturn ret;\n}\n\nfunction equals (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\treturn color1.space === color2.space\n\t       && color1.alpha === color2.alpha\n\t       && color1.coords.every((c, i) => c === color2.coords[i]);\n}\n\n/**\n * Relative luminance\n */\n\nfunction getLuminance (color) {\n\t// Assume getColor() is called on color in get()\n\treturn get(color, [xyz_d65, \"y\"]);\n}\n\nfunction setLuminance (color, value) {\n\t// Assume getColor() is called on color in set()\n\tset(color, [xyz_d65, \"y\"], value);\n}\n\nfunction register$2 (Color) {\n\tObject.defineProperty(Color.prototype, \"luminance\", {\n\t\tget () {\n\t\t\treturn getLuminance(this);\n\t\t},\n\t\tset (value) {\n\t\t\tsetLuminance(this, value);\n\t\t},\n\t});\n}\n\nvar luminance = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tgetLuminance: getLuminance,\n\tregister: register$2,\n\tsetLuminance: setLuminance\n});\n\n// WCAG 2.0 contrast https://www.w3.org/TR/WCAG20-TECHS/G18.html\n// Simple contrast, with fixed 5% viewing flare contribution\n// Symmetric, does not matter which is foreground and which is background\n\n\nfunction contrastWCAG21 (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\tlet Y1 = Math.max(getLuminance(color1), 0);\n\tlet Y2 = Math.max(getLuminance(color2), 0);\n\n\tif (Y2 > Y1) {\n\t\t[Y1, Y2] = [Y2, Y1];\n\t}\n\n\treturn (Y1 + .05) / (Y2 + .05);\n}\n\n// APCA 0.0.98G\n// https://github.com/Myndex/apca-w3\n// see also https://github.com/w3c/silver/issues/643\n\n\n// exponents\nconst normBG = 0.56;\nconst normTXT = 0.57;\nconst revTXT = 0.62;\nconst revBG = 0.65;\n\n// clamps\nconst blkThrs = 0.022;\nconst blkClmp = 1.414;\nconst loClip = 0.1;\nconst deltaYmin = 0.0005;\n\n// scalers\n// see https://github.com/w3c/silver/issues/645\nconst scaleBoW = 1.14;\nconst loBoWoffset = 0.027;\nconst scaleWoB = 1.14;\n\nfunction fclamp (Y) {\n\tif (Y >= blkThrs) {\n\t\treturn Y;\n\t}\n\treturn Y + (blkThrs - Y) ** blkClmp;\n}\n\nfunction linearize (val) {\n\tlet sign = val < 0 ? -1 : 1;\n\tlet abs = Math.abs(val);\n\treturn sign * Math.pow(abs, 2.4);\n}\n\n// Not symmetric, requires a foreground (text) color, and a background color\nfunction contrastAPCA (background, foreground) {\n\tforeground = getColor(foreground);\n\tbackground = getColor(background);\n\n\tlet S;\n\tlet C;\n\tlet Sapc;\n\n\t// Myndex as-published, assumes sRGB inputs\n\tlet R, G, B;\n\n\tforeground = to(foreground, \"srgb\");\n\t// Should these be clamped to in-gamut values?\n\n\t// Calculates \"screen luminance\" with non-standard simple gamma EOTF\n\t// weights should be from CSS Color 4, not the ones here which are via Myndex and copied from Lindbloom\n\t[R, G, B] = foreground.coords;\n\tlet lumTxt = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;\n\n\tbackground = to(background, \"srgb\");\n\t[R, G, B] = background.coords;\n\tlet lumBg = linearize(R) * 0.2126729 + linearize(G) * 0.7151522 + linearize(B) * 0.0721750;\n\n\t// toe clamping of very dark values to account for flare\n\tlet Ytxt = fclamp(lumTxt);\n\tlet Ybg = fclamp(lumBg);\n\n\t// are we \"Black on White\" (dark on light), or light on dark?\n\tlet BoW = Ybg > Ytxt;\n\n\t// why is this a delta, when Y is not perceptually uniform?\n\t// Answer: it is a noise gate, see\n\t// https://github.com/LeaVerou/color.js/issues/208\n\tif (Math.abs(Ybg - Ytxt) < deltaYmin) {\n\t\tC = 0;\n\t}\n\telse {\n\t\tif (BoW) {\n\t\t\t// dark text on light background\n\t\t\tS = Ybg ** normBG - Ytxt ** normTXT;\n\t\t\tC = S * scaleBoW;\n\t\t}\n\t\telse {\n\t\t\t// light text on dark background\n\t\t\tS = Ybg ** revBG - Ytxt ** revTXT;\n\t\t\tC = S * scaleWoB;\n\t\t}\n\t}\n\tif (Math.abs(C) < loClip) {\n\t\tSapc = 0;\n\t}\n\telse if (C > 0) {\n\t\t// not clear whether Woffset is loBoWoffset or loWoBoffset\n\t\t// but they have the same value\n\t\tSapc = C - loBoWoffset;\n\t}\n\telse {\n\t\tSapc = C + loBoWoffset;\n\t}\n\n\treturn Sapc * 100;\n}\n\n// Michelson  luminance contrast\n// the relation between the spread and the sum of the two luminances\n// Symmetric, does not matter which is foreground and which is background\n// No black level compensation for flare.\n\n\nfunction contrastMichelson (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\tlet Y1 = Math.max(getLuminance(color1), 0);\n\tlet Y2 = Math.max(getLuminance(color2), 0);\n\n\tif (Y2 > Y1) {\n\t\t[Y1, Y2] = [Y2, Y1];\n\t}\n\n\tlet denom = (Y1 + Y2);\n\treturn denom === 0 ? 0 : (Y1 - Y2) / denom;\n}\n\n// Weber luminance contrast\n// The difference between the two luminances divided by the lower luminance\n// Symmetric, does not matter which is foreground and which is background\n// No black level compensation for flare.\n\n\n// the darkest sRGB color above black is #000001 and this produces\n// a plain Weber contrast of ~45647.\n// So, setting the divide-by-zero result at 50000 is a reasonable\n// max clamp for the plain Weber\nconst max = 50000;\n\nfunction contrastWeber (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\tlet Y1 = Math.max(getLuminance(color1), 0);\n\tlet Y2 = Math.max(getLuminance(color2), 0);\n\n\tif (Y2 > Y1) {\n\t\t[Y1, Y2] = [Y2, Y1];\n\t}\n\n\treturn Y2 === 0 ? max : (Y1 - Y2) / Y2;\n}\n\n// CIE Lightness difference, as used by Google Material Design\n// Google HCT Tone is the same as CIE Lightness\n// https://material.io/blog/science-of-color-design\n\n\nfunction contrastLstar (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\tlet L1 = get(color1, [lab, \"l\"]);\n\tlet L2 = get(color2, [lab, \"l\"]);\n\n\treturn Math.abs(L1 - L2);\n}\n\n// κ * ε  = 2^3 = 8\nconst ε$3 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst ε3 = 24 / 116;\nconst κ$2 = 24389 / 27;   // 29^3/3^3\n\nlet white$1 = WHITES.D65;\n\nvar lab_d65 = new ColorSpace({\n\tid: \"lab-d65\",\n\tname: \"Lab D65\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\ta: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t\tb: {\n\t\t\trefRange: [-125, 125],\n\t\t},\n\t},\n\n\t// Assuming XYZ is relative to D65, convert to CIE Lab\n\t// from CIE standard, which now defines these as a rational fraction\n\twhite: white$1,\n\n\tbase: xyz_d65,\n\t// Convert D65-adapted XYZ to Lab\n\t//  CIE 15.3:2004 section 8.2.1.1\n\tfromBase (XYZ) {\n\t\t// compute xyz, which is XYZ scaled relative to reference white\n\t\tlet xyz = XYZ.map((value, i) => value / white$1[i]);\n\n\t\t// now compute f\n\t\tlet f = xyz.map(value => value > ε$3 ? Math.cbrt(value) : (κ$2 * value + 16) / 116);\n\n\t\treturn [\n\t\t\t(116 * f[1]) - 16,   // L\n\t\t\t500 * (f[0] - f[1]), // a\n\t\t\t200 * (f[1] - f[2]),  // b\n\t\t];\n\t},\n\t// Convert Lab to D65-adapted XYZ\n\t// Same result as CIE 15.3:2004 Appendix D although the derivation is different\n\t// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n\ttoBase (Lab) {\n\t\t// compute f, starting with the luminance-related term\n\t\tlet f = [];\n\t\tf[1] = (Lab[0] + 16) / 116;\n\t\tf[0] = Lab[1] / 500 + f[1];\n\t\tf[2] = f[1] - Lab[2] / 200;\n\n\t\t// compute xyz\n\t\tlet xyz = [\n\t\t\tf[0]   > ε3 ? Math.pow(f[0], 3)                : (116 * f[0] - 16) / κ$2,\n\t\t\tLab[0] > 8  ? Math.pow((Lab[0] + 16) / 116, 3) : Lab[0] / κ$2,\n\t\t\tf[2]   > ε3 ? Math.pow(f[2], 3)                : (116 * f[2] - 16) / κ$2,\n\t\t];\n\n\t\t// Compute XYZ by scaling xyz by reference white\n\t\treturn xyz.map((value, i) => value * white$1[i]);\n\t},\n\n\tformats: {\n\t\t\"lab-d65\": {\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n\n// Delta Phi Star perceptual lightness contrast\n// See https://github.com/Myndex/deltaphistar\n// The (difference between two Lstars each raised to phi) raised to (1/phi)\n// Symmetric, does not matter which is foreground and which is background\n\n\nconst phi = Math.pow(5, 0.5) * 0.5 + 0.5; // Math.phi can be used if Math.js\n\nfunction contrastDeltaPhi (color1, color2) {\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\tlet Lstr1 = get(color1, [lab_d65, \"l\"]);\n\tlet Lstr2 = get(color2, [lab_d65, \"l\"]);\n\n\tlet deltaPhiStar = Math.abs(Math.pow(Lstr1, phi) - Math.pow(Lstr2, phi));\n\n\tlet contrast = Math.pow(deltaPhiStar, (1 / phi)) * Math.SQRT2 - 40;\n\n\treturn (contrast < 7.5) ? 0.0 : contrast ;\n}\n\nvar contrastMethods = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tcontrastAPCA: contrastAPCA,\n\tcontrastDeltaPhi: contrastDeltaPhi,\n\tcontrastLstar: contrastLstar,\n\tcontrastMichelson: contrastMichelson,\n\tcontrastWCAG21: contrastWCAG21,\n\tcontrastWeber: contrastWeber\n});\n\nfunction contrast (background, foreground, o = {}) {\n\tif (isString(o)) {\n\t\to = {algorithm: o};\n\t}\n\n\tlet {algorithm, ...rest} = o;\n\n\tif (!algorithm) {\n\t\tlet algorithms = Object.keys(contrastMethods).map(a => a.replace(/^contrast/, \"\")).join(\", \");\n\t\tthrow new TypeError(`contrast() function needs a contrast algorithm. Please specify one of: ${algorithms}`);\n\t}\n\n\tbackground = getColor(background);\n\tforeground = getColor(foreground);\n\n\tfor (let a in contrastMethods) {\n\t\tif (\"contrast\" + algorithm.toLowerCase() === a.toLowerCase()) {\n\t\t\treturn contrastMethods[a](background, foreground, rest);\n\t\t}\n\t}\n\n\tthrow new TypeError(`Unknown contrast algorithm: ${algorithm}`);\n}\n\n// Chromaticity coordinates\nfunction uv (color) {\n\t// Assumes getAll() calls getColor() on color\n\tlet [X, Y, Z] = getAll(color, xyz_d65);\n\tlet denom = X + 15 * Y + 3 * Z;\n\treturn [4 * X / denom, 9 * Y / denom];\n}\n\nfunction xy (color) {\n\t// Assumes getAll() calls getColor() on color\n\tlet [X, Y, Z] = getAll(color, xyz_d65);\n\tlet  sum = X + Y + Z;\n\treturn [X / sum, Y / sum];\n}\n\nfunction register$1 (Color) {\n\t// no setters, as lightness information is lost\n\t// when converting color to chromaticity\n\tObject.defineProperty(Color.prototype, \"uv\", {\n\t\tget () {\n\t\t\treturn uv(this);\n\t\t},\n\t});\n\n\tObject.defineProperty(Color.prototype, \"xy\", {\n\t\tget () {\n\t\t\treturn xy(this);\n\t\t},\n\t});\n}\n\nvar chromaticity = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tregister: register$1,\n\tuv: uv,\n\txy: xy\n});\n\nfunction deltaE (c1, c2, o = {}) {\n\tif (isString(o)) {\n\t\to = {method: o};\n\t}\n\n\tlet {method = defaults.deltaE, ...rest} = o;\n\n\tfor (let m in deltaEMethods) {\n\t\tif (\"deltae\" + method.toLowerCase() === m.toLowerCase()) {\n\t\t\treturn deltaEMethods[m](c1, c2, rest);\n\t\t}\n\t}\n\n\tthrow new TypeError(`Unknown deltaE method: ${method}`);\n}\n\nfunction lighten (color, amount = .25) {\n\tlet space = ColorSpace.get(\"oklch\", \"lch\");\n\tlet lightness = [space, \"l\"];\n\treturn set(color, lightness, l => l * (1 + amount));\n}\n\nfunction darken (color, amount = .25) {\n\tlet space = ColorSpace.get(\"oklch\", \"lch\");\n\tlet lightness = [space, \"l\"];\n\treturn set(color, lightness, l => l * (1 - amount));\n}\n\nvar variations = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tdarken: darken,\n\tlighten: lighten\n});\n\n/**\n * Functions related to color interpolation\n */\n\n/**\n * Return an intermediate color between two colors\n * Signatures: mix(c1, c2, p, options)\n *             mix(c1, c2, options)\n *             mix(color)\n * @param {Color | string} c1 The first color\n * @param {Color | string} [c2] The second color\n * @param {number} [p=.5] A 0-1 percentage where 0 is c1 and 1 is c2\n * @param {Object} [o={}]\n * @return {Color}\n */\nfunction mix (c1, c2, p = .5, o = {}) {\n\t[c1, c2] = [getColor(c1), getColor(c2)];\n\n\tif (type(p) === \"object\") {\n\t\t[p, o] = [.5, p];\n\t}\n\n\tlet r = range(c1, c2, o);\n\treturn r(p);\n}\n\n/**\n *\n * @param {Color | string | Function} c1 The first color or a range\n * @param {Color | string} [c2] The second color if c1 is not a range\n * @param {Object} [options={}]\n * @return {Color[]}\n */\nfunction steps (c1, c2, options = {}) {\n\tlet colorRange;\n\n\tif (isRange(c1)) {\n\t\t// Tweaking existing range\n\t\t[colorRange, options] = [c1, c2];\n\t\t[c1, c2] = colorRange.rangeArgs.colors;\n\t}\n\n\tlet {\n\t\tmaxDeltaE, deltaEMethod,\n\t\tsteps = 2, maxSteps = 1000,\n\t\t...rangeOptions\n\t} = options;\n\n\tif (!colorRange) {\n\t\t[c1, c2] = [getColor(c1), getColor(c2)];\n\t\tcolorRange = range(c1, c2, rangeOptions);\n\t}\n\n\tlet totalDelta = deltaE(c1, c2);\n\tlet actualSteps = maxDeltaE > 0 ? Math.max(steps, Math.ceil(totalDelta / maxDeltaE) + 1) : steps;\n\tlet ret = [];\n\n\tif (maxSteps !== undefined) {\n\t\tactualSteps = Math.min(actualSteps, maxSteps);\n\t}\n\n\tif (actualSteps === 1) {\n\t\tret = [{p: .5, color: colorRange(.5)}];\n\t}\n\telse {\n\t\tlet step = 1 / (actualSteps - 1);\n\t\tret = Array.from({length: actualSteps}, (_, i) => {\n\t\t\tlet p = i * step;\n\t\t\treturn {p, color: colorRange(p)};\n\t\t});\n\t}\n\n\tif (maxDeltaE > 0) {\n\t\t// Iterate over all stops and find max deltaE\n\t\tlet maxDelta = ret.reduce((acc, cur, i) => {\n\t\t\tif (i === 0) {\n\t\t\t\treturn 0;\n\t\t\t}\n\n\t\t\tlet ΔΕ = deltaE(cur.color, ret[i - 1].color, deltaEMethod);\n\t\t\treturn Math.max(acc, ΔΕ);\n\t\t}, 0);\n\n\t\twhile (maxDelta > maxDeltaE) {\n\t\t\t// Insert intermediate stops and measure maxDelta again\n\t\t\t// We need to do this for all pairs, otherwise the midpoint shifts\n\t\t\tmaxDelta = 0;\n\n\t\t\tfor (let i = 1; (i < ret.length) && (ret.length < maxSteps); i++) {\n\t\t\t\tlet prev = ret[i - 1];\n\t\t\t\tlet cur = ret[i];\n\n\t\t\t\tlet p = (cur.p + prev.p) / 2;\n\t\t\t\tlet color = colorRange(p);\n\t\t\t\tmaxDelta = Math.max(maxDelta, deltaE(color, prev.color), deltaE(color, cur.color));\n\t\t\t\tret.splice(i, 0, {p, color: colorRange(p)});\n\t\t\t\ti++;\n\t\t\t}\n\t\t}\n\t}\n\n\tret = ret.map(a => a.color);\n\n\treturn ret;\n}\n\n/**\n * Interpolate to color2 and return a function that takes a 0-1 percentage\n * @param {Color | string | Function} color1 The first color or an existing range\n * @param {Color | string} [color2] If color1 is a color, this is the second color\n * @param {Object} [options={}]\n * @returns {Function} A function that takes a 0-1 percentage and returns a color\n */\nfunction range (color1, color2, options = {}) {\n\tif (isRange(color1)) {\n\t\t// Tweaking existing range\n\t\tlet [r, options] = [color1, color2];\n\n\t\treturn range(...r.rangeArgs.colors, {...r.rangeArgs.options, ...options});\n\t}\n\n\tlet {space, outputSpace, progression, premultiplied} = options;\n\n\tcolor1 = getColor(color1);\n\tcolor2 = getColor(color2);\n\n\t// Make sure we're working on copies of these colors\n\tcolor1 = clone(color1);\n\tcolor2 = clone(color2);\n\n\tlet rangeArgs = {colors: [color1, color2], options};\n\n\tif (space) {\n\t\tspace = ColorSpace.get(space);\n\t}\n\telse {\n\t\tspace = ColorSpace.registry[defaults.interpolationSpace] || color1.space;\n\t}\n\n\toutputSpace = outputSpace ? ColorSpace.get(outputSpace) : space;\n\n\tcolor1 = to(color1, space);\n\tcolor2 = to(color2, space);\n\n\t// Gamut map to avoid areas of flat color\n\tcolor1 = toGamut(color1);\n\tcolor2 = toGamut(color2);\n\n\t// Handle hue interpolation\n\t// See https://github.com/w3c/csswg-drafts/issues/4735#issuecomment-635741840\n\tif (space.coords.h && space.coords.h.type === \"angle\") {\n\t\tlet arc = options.hue = options.hue || \"shorter\";\n\n\t\tlet hue = [space, \"h\"];\n\t\tlet [θ1, θ2] = [get(color1, hue), get(color2, hue)];\n\t\t// Undefined hues must be evaluated before hue fix-up to properly\n\t\t// calculate hue arcs between undefined and defined hues.\n\t\t// See https://github.com/w3c/csswg-drafts/issues/9436#issuecomment-1746957545\n\t\tif (isNaN(θ1) && !isNaN(θ2)) {\n\t\t\tθ1 = θ2;\n\t\t}\n\t\telse if (isNaN(θ2) && !isNaN(θ1)) {\n\t\t\tθ2 = θ1;\n\t\t}\n\t\t[θ1, θ2] = adjust(arc, [θ1, θ2]);\n\t\tset(color1, hue, θ1);\n\t\tset(color2, hue, θ2);\n\t}\n\n\tif (premultiplied) {\n\t\t// not coping with polar spaces yet\n\t\tcolor1.coords = color1.coords.map(c => c * color1.alpha);\n\t\tcolor2.coords = color2.coords.map(c => c * color2.alpha);\n\t}\n\n\treturn Object.assign(p => {\n\t\tp = progression ? progression(p) : p;\n\t\tlet coords = color1.coords.map((start, i) => {\n\t\t\tlet end = color2.coords[i];\n\t\t\treturn interpolate(start, end, p);\n\t\t});\n\n\t\tlet alpha = interpolate(color1.alpha, color2.alpha, p);\n\t\tlet ret = {space, coords, alpha};\n\n\t\tif (premultiplied) {\n\t\t\t// undo premultiplication\n\t\t\tret.coords = ret.coords.map(c => c / alpha);\n\t\t}\n\n\t\tif (outputSpace !== space) {\n\t\t\tret = to(ret, outputSpace);\n\t\t}\n\n\t\treturn ret;\n\t}, {\n\t\trangeArgs,\n\t});\n}\n\nfunction isRange (val) {\n\treturn type(val) === \"function\" && !!val.rangeArgs;\n}\n\ndefaults.interpolationSpace = \"lab\";\n\nfunction register (Color) {\n\tColor.defineFunction(\"mix\", mix, {returns: \"color\"});\n\tColor.defineFunction(\"range\", range, {returns: \"function<color>\"});\n\tColor.defineFunction(\"steps\", steps, {returns: \"array<color>\"});\n}\n\nvar interpolation = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tisRange: isRange,\n\tmix: mix,\n\trange: range,\n\tregister: register,\n\tsteps: steps\n});\n\nvar HSL = new ColorSpace({\n\tid: \"hsl\",\n\tname: \"HSL\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\ts: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Saturation\",\n\t\t},\n\t\tl: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t},\n\n\tbase: sRGB,\n\n\t// Adapted from https://drafts.csswg.org/css-color-4/better-rgbToHsl.js\n\tfromBase: rgb => {\n\t\tlet max = Math.max(...rgb);\n\t\tlet min = Math.min(...rgb);\n\t\tlet [r, g, b] = rgb;\n\t\tlet [h, s, l] = [NaN, 0, (min + max) / 2];\n\t\tlet d = max - min;\n\n\t\tif (d !== 0) {\n\t\t\ts = (l === 0 || l === 1) ? 0 : (max - l) / Math.min(l, 1 - l);\n\n\t\t\tswitch (max) {\n\t\t\t\tcase r: h = (g - b) / d + (g < b ? 6 : 0); break;\n\t\t\t\tcase g: h = (b - r) / d + 2; break;\n\t\t\t\tcase b: h = (r - g) / d + 4;\n\t\t\t}\n\n\t\t\th = h * 60;\n\t\t}\n\n\t\t// Very out of gamut colors can produce negative saturation\n\t\t// If so, just rotate the hue by 180 and use a positive saturation\n\t\t// see https://github.com/w3c/csswg-drafts/issues/9222\n\t\tif (s < 0) {\n\t\t\th += 180;\n\t\t\ts = Math.abs(s);\n\t\t}\n\n\t\tif (h >= 360) {\n\t\t\th -= 360;\n\t\t}\n\n\t\treturn [h, s * 100, l * 100];\n\t},\n\n\t// Adapted from https://en.wikipedia.org/wiki/HSL_and_HSV#HSL_to_RGB_alternative\n\ttoBase: hsl => {\n\t\tlet [h, s, l] = hsl;\n\t\th = h % 360;\n\n\t\tif (h < 0) {\n\t\t\th += 360;\n\t\t}\n\n\t\ts /= 100;\n\t\tl /= 100;\n\n\t\tfunction f (n) {\n\t\t\tlet k = (n + h / 30) % 12;\n\t\t\tlet a = s * Math.min(l, 1 - l);\n\t\t\treturn l - a * Math.max(-1, Math.min(k - 3, 9 - k, 1));\n\t\t}\n\n\t\treturn [f(0), f(8), f(4)];\n\t},\n\n\tformats: {\n\t\t\"hsl\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage>\", \"<percentage>\"],\n\t\t},\n\t\t\"hsla\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage>\", \"<percentage>\"],\n\t\t\tcommas: true,\n\t\t\tlastAlpha: true,\n\t\t},\n\t},\n});\n\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nvar HSV = new ColorSpace({\n\tid: \"hsv\",\n\tname: \"HSV\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\ts: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Saturation\",\n\t\t},\n\t\tv: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Value\",\n\t\t},\n\t},\n\n\tbase: HSL,\n\t// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n\tfromBase (hsl) {\n\t\tlet [h, s, l] = hsl;\n\t\ts /= 100;\n\t\tl /= 100;\n\n\t\tlet v = l + s * Math.min(l, 1 - l);\n\n\t\treturn [\n\t\t\th, // h is the same\n\t\t\tv === 0 ? 0 : 200 * (1 - l / v), // s\n\t\t\t100 * v,\n\t\t];\n\t},\n\t// https://en.wikipedia.org/wiki/HSL_and_HSV#Interconversion\n\ttoBase (hsv) {\n\t\tlet [h, s, v] = hsv;\n\n\t\ts /= 100;\n\t\tv /= 100;\n\n\t\tlet l = v * (1 - s / 2);\n\n\t\treturn [\n\t\t\th, // h is the same\n\t\t\t(l === 0 || l === 1) ? 0 : ((v - l) / Math.min(l, 1 - l)) * 100,\n\t\t\tl * 100,\n\t\t];\n\t},\n\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--hsv\",\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n\n// The Hue, Whiteness Blackness (HWB) colorspace\n// See https://drafts.csswg.org/css-color-4/#the-hwb-notation\n// Note that, like HSL, calculations are done directly on\n// gamma-corrected sRGB values rather than linearising them first.\n\nvar hwb = new ColorSpace({\n\tid: \"hwb\",\n\tname: \"HWB\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\tw: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Whiteness\",\n\t\t},\n\t\tb: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Blackness\",\n\t\t},\n\t},\n\n\tbase: HSV,\n\tfromBase (hsv) {\n\t\tlet [h, s, v] = hsv;\n\n\t\treturn [h, v * (100 - s) / 100, 100 - v];\n\t},\n\ttoBase (hwb) {\n\t\tlet [h, w, b] = hwb;\n\n\t\t// Now convert percentages to [0..1]\n\t\tw /= 100;\n\t\tb /= 100;\n\n\t\t// Achromatic check (white plus black >= 1)\n\t\tlet sum = w + b;\n\t\tif (sum >= 1) {\n\t\t\tlet gray = w / sum;\n\t\t\treturn [h, 0, gray * 100];\n\t\t}\n\n\t\tlet v = (1 - b);\n\t\tlet s = (v === 0) ? 0 : 1 - w / v;\n\t\treturn [h, s * 100, v * 100];\n\t},\n\n\tformats: {\n\t\t\"hwb\": {\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n\n// convert an array of linear-light a98-rgb values to CIE XYZ\n// http://www.brucelindbloom.com/index.html?Eqn_RGB_XYZ_Matrix.html\n// has greater numerical precision than section 4.3.5.3 of\n// https://www.adobe.com/digitalimag/pdfs/AdobeRGB1998.pdf\n// but the values below were calculated from first principles\n// from the chromaticity coordinates of R G B W\nconst toXYZ_M$2 = [\n\t[ 0.5766690429101305,   0.1855582379065463,   0.1882286462349947  ],\n\t[ 0.29734497525053605,  0.6273635662554661,   0.07529145849399788 ],\n\t[ 0.02703136138641234,  0.07068885253582723,  0.9913375368376388  ],\n];\n\nconst fromXYZ_M$2 = [\n\t[  2.0415879038107465,    -0.5650069742788596,   -0.34473135077832956 ],\n\t[ -0.9692436362808795,     1.8759675015077202,    0.04155505740717557 ],\n\t[  0.013444280632031142,  -0.11836239223101838,   1.0151749943912054  ],\n];\n\nvar A98Linear = new RGBColorSpace({\n\tid: \"a98rgb-linear\",\n\tcssId: \"--a98-rgb-linear\",\n\tname: \"Linear Adobe® 98 RGB compatible\",\n\twhite: \"D65\",\n\ttoXYZ_M: toXYZ_M$2,\n\tfromXYZ_M: fromXYZ_M$2,\n});\n\nvar a98rgb = new RGBColorSpace({\n\tid: \"a98rgb\",\n\tcssId: \"a98-rgb\",\n\tname: \"Adobe® 98 RGB compatible\",\n\tbase: A98Linear,\n\ttoBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 563 / 256) * Math.sign(val)),\n\tfromBase: RGB => RGB.map(val => Math.pow(Math.abs(val), 256 / 563) * Math.sign(val)),\n});\n\n// convert an array of  prophoto-rgb values to CIE XYZ\n// using  D50 (so no chromatic adaptation needed afterwards)\n// matrix cannot be expressed in rational form, but is calculated to 64 bit accuracy\n// see https://github.com/w3c/csswg-drafts/issues/7675\nconst toXYZ_M$1 = [\n\t[ 0.79776664490064230,  0.13518129740053308,  0.03134773412839220 ],\n\t[ 0.28807482881940130,  0.71183523424187300,  0.00008993693872564 ],\n\t[ 0.00000000000000000,  0.00000000000000000,  0.82510460251046020 ],\n];\n\nconst fromXYZ_M$1 = [\n\t[  1.34578688164715830, -0.25557208737979464, -0.05110186497554526 ],\n\t[ -0.54463070512490190,  1.50824774284514680,  0.02052744743642139 ],\n\t[  0.00000000000000000,  0.00000000000000000,  1.21196754563894520 ],\n];\n\nvar ProPhotoLinear = new RGBColorSpace({\n\tid: \"prophoto-linear\",\n\tcssId: \"--prophoto-rgb-linear\",\n\tname: \"Linear ProPhoto\",\n\twhite: \"D50\",\n\tbase: XYZ_D50,\n\ttoXYZ_M: toXYZ_M$1,\n\tfromXYZ_M: fromXYZ_M$1,\n});\n\nconst Et = 1 / 512;\nconst Et2 = 16 / 512;\n\nvar prophoto = new RGBColorSpace({\n\tid: \"prophoto\",\n\tcssId: \"prophoto-rgb\",\n\tname: \"ProPhoto\",\n\tbase: ProPhotoLinear,\n\ttoBase (RGB) {\n\t\t// Transfer curve is gamma 1.8 with a small linear portion\n\t\treturn RGB.map(v => v < Et2 ? v / 16 : v ** 1.8);\n\t},\n\tfromBase (RGB) {\n\t\treturn RGB.map(v => v >= Et ? v ** (1 / 1.8) : 16 * v);\n\t},\n});\n\nvar oklch = new ColorSpace({\n\tid: \"oklch\",\n\tname: \"Oklch\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 1],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 0.4],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\twhite: \"D65\",\n\n\tbase: OKLab,\n\tfromBase (oklab) {\n\t\t// Convert to polar form\n\t\tlet [L, a, b] = oklab;\n\t\tlet h;\n\t\tconst ε = 0.0002; // chromatic components much smaller than a,b\n\n\t\tif (Math.abs(a) < ε && Math.abs(b) < ε) {\n\t\t\th = NaN;\n\t\t}\n\t\telse {\n\t\t\th = Math.atan2(b, a) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tL, // OKLab L is still L\n\t\t\tMath.sqrt(a ** 2 + b ** 2), // Chroma\n\t\t\tconstrain(h), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\t// Convert from polar form\n\ttoBase (oklch) {\n\t\tlet [L, C, h] = oklch;\n\t\tlet a, b;\n\n\t\t// check for NaN hue\n\t\tif (isNaN(h)) {\n\t\t\ta = 0;\n\t\t\tb = 0;\n\t\t}\n\t\telse {\n\t\t\ta = C * Math.cos(h * Math.PI / 180);\n\t\t\tb = C * Math.sin(h * Math.PI / 180);\n\t\t}\n\n\t\treturn [ L, a, b ];\n\t},\n\n\tformats: {\n\t\t\"oklch\": {\n\t\t\tcoords: [\"<percentage> | <number>\", \"<number> | <percentage>[0,1]\", \"<number> | <angle>\"],\n\t\t},\n\t},\n});\n\nlet white = WHITES.D65;\n\nconst ε$2 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst κ$1 = 24389 / 27;   // 29^3/3^3\nconst [U_PRIME_WHITE, V_PRIME_WHITE] = uv({space: xyz_d65, coords: white});\n\nvar Luv = new ColorSpace({\n\tid: \"luv\",\n\tname: \"Luv\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\t// Reference ranges from https://facelessuser.github.io/coloraide/colors/luv/\n\t\tu: {\n\t\t\trefRange: [-215, 215],\n\t\t},\n\t\tv: {\n\t\t\trefRange: [-215, 215],\n\t\t},\n\t},\n\n\twhite: white,\n\tbase: xyz_d65,\n\n\t// Convert D65-adapted XYZ to Luv\n\t// https://en.wikipedia.org/wiki/CIELUV#The_forward_transformation\n\tfromBase (XYZ) {\n\t\tlet xyz = [skipNone(XYZ[0]), skipNone(XYZ[1]), skipNone(XYZ[2])];\n\t\tlet y = xyz[1];\n\n\t\tlet [up, vp] = uv({space: xyz_d65, coords: xyz});\n\n\t\t// Protect against XYZ of [0, 0, 0]\n\t\tif (!Number.isFinite(up) || !Number.isFinite(vp)) {\n\t\t\treturn [0, 0, 0];\n\t\t}\n\n\t\tlet L = y <= ε$2 ? κ$1 * y : 116 * Math.cbrt(y) - 16;\n\t\treturn [\n\t\t\tL,\n\t\t\t13 * L * (up - U_PRIME_WHITE),\n\t\t\t13 * L * (vp - V_PRIME_WHITE),\n\t\t ];\n\t},\n\n\t// Convert Luv to D65-adapted XYZ\n\t// https://en.wikipedia.org/wiki/CIELUV#The_reverse_transformation\n\ttoBase (Luv) {\n\t\tlet [L, u, v] = Luv;\n\n\t\t// Protect against division by zero and NaN Lightness\n\t\tif (L === 0 || isNone(L)) {\n\t\t\treturn [0, 0, 0];\n\t\t}\n\n\t\tu = skipNone(u);\n\t\tv = skipNone(v);\n\n\t\tlet up = (u / (13 * L)) + U_PRIME_WHITE;\n\t\tlet vp = (v / (13 * L)) + V_PRIME_WHITE;\n\n\t\tlet y = L <= 8 ? L / κ$1 : Math.pow((L + 16) / 116, 3);\n\n\t\treturn [\n\t\t\ty * ((9 * up) / (4 * vp)),\n\t\t\ty,\n\t\t\ty * ((12 - 3 * up - 20 * vp) / (4 * vp)),\n\t\t];\n\t},\n\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--luv\",\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>[-1,1]\", \"<number> | <percentage>[-1,1]\"],\n\t\t},\n\t},\n});\n\nvar LCHuv = new ColorSpace({\n\tid: \"lchuv\",\n\tname: \"LChuv\",\n\tcoords: {\n\t\tl: {\n\t\t\trefRange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t\tc: {\n\t\t\trefRange: [0, 220],\n\t\t\tname: \"Chroma\",\n\t\t},\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t},\n\n\tbase: Luv,\n\tfromBase (Luv) {\n\t\t// Convert to polar form\n\t\tlet [L, u, v] = Luv;\n\t\tlet hue;\n\t\tconst ε = 0.02;\n\n\t\tif (Math.abs(u) < ε && Math.abs(v) < ε) {\n\t\t\thue = NaN;\n\t\t}\n\t\telse {\n\t\t\thue = Math.atan2(v, u) * 180 / Math.PI;\n\t\t}\n\n\t\treturn [\n\t\t\tL, // L is still L\n\t\t\tMath.sqrt(u ** 2 + v ** 2), // Chroma\n\t\t\tconstrain(hue), // Hue, in degrees [0 to 360)\n\t\t];\n\t},\n\ttoBase (LCH) {\n\t\t// Convert from polar form\n\t\tlet [Lightness, Chroma, Hue] = LCH;\n\t\t// Clamp any negative Chroma\n\t\tif (Chroma < 0) {\n\t\t\tChroma = 0;\n\t\t}\n\t\t// Deal with NaN Hue\n\t\tif (isNaN(Hue)) {\n\t\t\tHue = 0;\n\t\t}\n\t\treturn [\n\t\t\tLightness, // L is still L\n\t\t\tChroma * Math.cos(Hue * Math.PI / 180), // u\n\t\t\tChroma * Math.sin(Hue * Math.PI / 180),  // v\n\t\t];\n\t},\n\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--lchuv\",\n\t\t\tcoords: [\"<number> | <percentage>\", \"<number> | <percentage>\", \"<number> | <angle>\"],\n\t\t},\n\t},\n});\n\n/*\nAdapted from: https://github.com/hsluv/hsluv-javascript/blob/14b49e6cf9a9137916096b8487a5372626b57ba4/src/hsluv.ts\n\nCopyright (c) 2012-2022 Alexei Boronine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\nconst ε$1 = 216 / 24389;  // 6^3/29^3 == (24/116)^3\nconst κ = 24389 / 27;   // 29^3/3^3\n\nconst m_r0 = fromXYZ_M$3[0][0];\nconst m_r1 = fromXYZ_M$3[0][1];\nconst m_r2 = fromXYZ_M$3[0][2];\nconst m_g0 = fromXYZ_M$3[1][0];\nconst m_g1 = fromXYZ_M$3[1][1];\nconst m_g2 = fromXYZ_M$3[1][2];\nconst m_b0 = fromXYZ_M$3[2][0];\nconst m_b1 = fromXYZ_M$3[2][1];\nconst m_b2 = fromXYZ_M$3[2][2];\n\nfunction distanceFromOriginAngle (slope, intercept, angle) {\n\tconst d = intercept / (Math.sin(angle) - slope * Math.cos(angle));\n\treturn d < 0 ? Infinity : d;\n}\n\nfunction calculateBoundingLines (l) {\n\tconst sub1 = Math.pow(l + 16, 3) / 1560896;\n\tconst sub2 = sub1 > ε$1 ? sub1 : l / κ;\n\tconst s1r = sub2 * (284517 * m_r0 - 94839 * m_r2);\n\tconst s2r = sub2 * (838422 * m_r2 + 769860 * m_r1 + 731718 * m_r0);\n\tconst s3r = sub2 * (632260 * m_r2 - 126452 * m_r1);\n\tconst s1g = sub2 * (284517 * m_g0 - 94839 * m_g2);\n\tconst s2g = sub2 * (838422 * m_g2 + 769860 * m_g1 + 731718 * m_g0);\n\tconst s3g = sub2 * (632260 * m_g2 - 126452 * m_g1);\n\tconst s1b = sub2 * (284517 * m_b0 - 94839 * m_b2);\n\tconst s2b = sub2 * (838422 * m_b2 + 769860 * m_b1 + 731718 * m_b0);\n\tconst s3b = sub2 * (632260 * m_b2 - 126452 * m_b1);\n\n\treturn {\n\t\tr0s: s1r / s3r,\n\t\tr0i: s2r * l / s3r,\n\t\tr1s: s1r / (s3r + 126452),\n\t\tr1i: (s2r - 769860) * l / (s3r + 126452),\n\t\tg0s: s1g / s3g,\n\t\tg0i: s2g * l / s3g,\n\t\tg1s: s1g / (s3g + 126452),\n\t\tg1i: (s2g - 769860) * l / (s3g + 126452),\n\t\tb0s: s1b / s3b,\n\t\tb0i: s2b * l / s3b,\n\t\tb1s: s1b / (s3b + 126452),\n\t\tb1i: (s2b - 769860) * l / (s3b + 126452),\n\t};\n}\n\nfunction calcMaxChromaHsluv (lines, h) {\n\tconst hueRad = h / 360 * Math.PI * 2;\n\tconst r0 = distanceFromOriginAngle(lines.r0s, lines.r0i, hueRad);\n\tconst r1 = distanceFromOriginAngle(lines.r1s, lines.r1i, hueRad);\n\tconst g0 = distanceFromOriginAngle(lines.g0s, lines.g0i, hueRad);\n\tconst g1 = distanceFromOriginAngle(lines.g1s, lines.g1i, hueRad);\n\tconst b0 = distanceFromOriginAngle(lines.b0s, lines.b0i, hueRad);\n\tconst b1 = distanceFromOriginAngle(lines.b1s, lines.b1i, hueRad);\n\n\treturn Math.min(r0, r1, g0, g1, b0, b1);\n}\n\nvar hsluv = new ColorSpace({\n\tid: \"hsluv\",\n\tname: \"HSLuv\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\ts: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Saturation\",\n\t\t},\n\t\tl: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t},\n\n\tbase: LCHuv,\n\tgamutSpace: sRGB,\n\n\t// Convert LCHuv to HSLuv\n\tfromBase (lch) {\n\t\tlet [l, c, h] = [skipNone(lch[0]), skipNone(lch[1]), skipNone(lch[2])];\n\t\tlet s;\n\n\t\tif (l > 99.9999999) {\n\t\t\ts = 0;\n\t\t\tl = 100;\n\t\t}\n\t\telse if (l < 0.00000001) {\n\t\t\ts = 0;\n\t\t\tl = 0;\n\t\t}\n\t\telse {\n\t\t\tlet lines = calculateBoundingLines(l);\n\t\t\tlet max = calcMaxChromaHsluv(lines, h);\n\t\t\ts = c / max * 100;\n\t\t}\n\n\t\treturn [h, s, l];\n\t},\n\n\t// Convert HSLuv to LCHuv\n\ttoBase (hsl) {\n\t\tlet [h, s, l] = [skipNone(hsl[0]), skipNone(hsl[1]), skipNone(hsl[2])];\n\t\tlet c;\n\n\t\tif (l > 99.9999999) {\n\t\t\tl = 100;\n\t\t\tc = 0;\n\t\t}\n\t\telse if (l < 0.00000001) {\n\t\t\tl = 0;\n\t\t\tc = 0;\n\t\t}\n\t\telse {\n\t\t\tlet lines = calculateBoundingLines(l);\n\t\t\tlet max = calcMaxChromaHsluv(lines, h);\n\t\t\tc = max / 100 * s;\n\t\t}\n\n\t\treturn [l, c, h];\n\t},\n\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--hsluv\",\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n\n/*\nAdapted from: https://github.com/hsluv/hsluv-javascript/blob/14b49e6cf9a9137916096b8487a5372626b57ba4/src/hsluv.ts\n\nCopyright (c) 2012-2022 Alexei Boronine\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n*/\n\n\nfromXYZ_M$3[0][0];\nfromXYZ_M$3[0][1];\nfromXYZ_M$3[0][2];\nfromXYZ_M$3[1][0];\nfromXYZ_M$3[1][1];\nfromXYZ_M$3[1][2];\nfromXYZ_M$3[2][0];\nfromXYZ_M$3[2][1];\nfromXYZ_M$3[2][2];\n\nfunction distanceFromOrigin (slope, intercept) {\n\treturn Math.abs(intercept) / Math.sqrt(Math.pow(slope, 2) + 1);\n}\n\nfunction calcMaxChromaHpluv (lines) {\n\tlet r0 = distanceFromOrigin(lines.r0s, lines.r0i);\n\tlet r1 = distanceFromOrigin(lines.r1s, lines.r1i);\n\tlet g0 = distanceFromOrigin(lines.g0s, lines.g0i);\n\tlet g1 = distanceFromOrigin(lines.g1s, lines.g1i);\n\tlet b0 = distanceFromOrigin(lines.b0s, lines.b0i);\n\tlet b1 = distanceFromOrigin(lines.b1s, lines.b1i);\n\n\treturn Math.min(r0, r1, g0, g1, b0, b1);\n}\n\nvar hpluv = new ColorSpace({\n\tid: \"hpluv\",\n\tname: \"HPLuv\",\n\tcoords: {\n\t\th: {\n\t\t\trefRange: [0, 360],\n\t\t\ttype: \"angle\",\n\t\t\tname: \"Hue\",\n\t\t},\n\t\ts: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Saturation\",\n\t\t},\n\t\tl: {\n\t\t\trange: [0, 100],\n\t\t\tname: \"Lightness\",\n\t\t},\n\t},\n\n\tbase: LCHuv,\n\tgamutSpace: \"self\",\n\n\t// Convert LCHuv to HPLuv\n\tfromBase (lch) {\n\t\tlet [l, c, h] = [skipNone(lch[0]), skipNone(lch[1]), skipNone(lch[2])];\n\t\tlet s;\n\n\t\tif (l > 99.9999999) {\n\t\t\ts = 0;\n\t\t\tl = 100;\n\t\t}\n\t\telse if (l < 0.00000001) {\n\t\t\ts = 0;\n\t\t\tl = 0;\n\t\t}\n\t\telse {\n\t\t\tlet lines = calculateBoundingLines(l);\n\t\t\tlet max = calcMaxChromaHpluv(lines);\n\t\t\ts = c / max * 100;\n\t\t}\n\t\treturn [h, s, l];\n\t},\n\n\t// Convert HPLuv to LCHuv\n\ttoBase (hsl) {\n\t\tlet [h, s, l] = [skipNone(hsl[0]), skipNone(hsl[1]), skipNone(hsl[2])];\n\t\tlet c;\n\n\t\tif (l > 99.9999999) {\n\t\t\tl = 100;\n\t\t\tc = 0;\n\t\t}\n\t\telse if (l < 0.00000001) {\n\t\t\tl = 0;\n\t\t\tc = 0;\n\t\t}\n\t\telse {\n\t\t\tlet lines = calculateBoundingLines(l);\n\t\t\tlet max = calcMaxChromaHpluv(lines);\n\t\t\tc = max / 100 * s;\n\t\t}\n\n\t\treturn [l, c, h];\n\t},\n\n\tformats: {\n\t\tcolor: {\n\t\t\tid: \"--hpluv\",\n\t\t\tcoords: [\"<number> | <angle>\", \"<percentage> | <number>\", \"<percentage> | <number>\"],\n\t\t},\n\t},\n});\n\nconst Yw = 203;\t// absolute luminance of media white, cd/m²\nconst n = 2610 / (2 ** 14);\nconst ninv = (2 ** 14) / 2610;\nconst m = 2523 / (2 ** 5);\nconst minv = (2 ** 5) / 2523;\nconst c1 = 3424 / (2 ** 12);\nconst c2 = 2413 / (2 ** 7);\nconst c3 = 2392 / (2 ** 7);\n\nvar rec2100Pq = new RGBColorSpace({\n\tid: \"rec2100pq\",\n\tcssId: \"rec2100-pq\",\n\tname: \"REC.2100-PQ\",\n\tbase: REC2020Linear,\n\ttoBase (RGB) {\n\t\t// given PQ encoded component in range [0, 1]\n\t\t// return media-white relative linear-light\n\t\treturn RGB.map(function (val) {\n\t\t\tlet x = ((Math.max(((val ** minv) - c1), 0) / (c2 - (c3 * (val ** minv)))) ** ninv);\n\t\t\treturn (x * 10000 / Yw); \t// luminance relative to diffuse white, [0, 70 or so].\n\t\t});\n\t},\n\tfromBase (RGB) {\n\t\t// given media-white relative linear-light\n\t\t// returnPQ encoded component in range [0, 1]\n\t\treturn RGB.map(function (val) {\n\t\t\tlet x = Math.max(val * Yw / 10000, 0); \t// absolute luminance of peak white is 10,000 cd/m².\n\t\t\tlet num = (c1 + (c2 * (x ** n)));\n\t\t\tlet denom = (1 + (c3 * (x ** n)));\n\n\t\t\treturn ((num / denom)  ** m);\n\t\t});\n\t},\n});\n\n// FIXME see https://github.com/LeaVerou/color.js/issues/190\n\nconst a = 0.17883277;\nconst b = 0.28466892; // 1 - (4 * a)\nconst c = 0.55991073; // 0.5 - a * Math.log(4 *a)\n\nconst scale = 3.7743;\t// Place 18% grey at HLG 0.38, so media white at 0.75\n\nvar rec2100Hlg = new RGBColorSpace({\n\tid: \"rec2100hlg\",\n\tcssId: \"rec2100-hlg\",\n\tname: \"REC.2100-HLG\",\n\treferred: \"scene\",\n\n\tbase: REC2020Linear,\n\ttoBase (RGB) {\n\t\t// given HLG encoded component in range [0, 1]\n\t\t// return media-white relative linear-light\n\t\treturn RGB.map(function (val) {\n\t\t\t// first the HLG EOTF\n\t\t\t// ITU-R BT.2390-10 p.30 section\n\t\t\t// 6.3 The hybrid log-gamma electro-optical transfer function (EOTF)\n\t\t\t// Then scale by 3 so media white is 1.0\n\t\t\tif (val <= 0.5) {\n\t\t\t\treturn (val ** 2) / 3 * scale;\n\t\t\t}\n\t\t\treturn ((Math.exp((val - c) / a) + b) / 12) * scale;\n\t\t});\n\t},\n\tfromBase (RGB) {\n\t\t// given media-white relative linear-light\n\t\t// where diffuse white is 1.0,\n\t\t// return HLG encoded component in range [0, 1]\n\t\treturn RGB.map(function (val) {\n\t\t\t// first scale to put linear-light media white at 1/3\n\t\t\tval /= scale;\n\t\t\t// now the HLG OETF\n\t\t\t// ITU-R BT.2390-10 p.23\n\t\t\t// 6.1 The hybrid log-gamma opto-electronic transfer function (OETF)\n\t\t\tif (val <= 1 / 12) {\n\t\t\t\treturn Math.sqrt(3 * val);\n\t\t\t}\n\t\t\treturn a * Math.log(12 * val - b) + c;\n\t\t});\n\t},\n});\n\nconst CATs = {};\n\nhooks.add(\"chromatic-adaptation-start\", env => {\n\tif (env.options.method) {\n\t\tenv.M = adapt(env.W1, env.W2, env.options.method);\n\t}\n});\n\nhooks.add(\"chromatic-adaptation-end\", env => {\n\tif (!env.M) {\n\t\tenv.M = adapt(env.W1, env.W2, env.options.method);\n\t}\n});\n\nfunction defineCAT ({id, toCone_M, fromCone_M}) {\n\t// Use id, toCone_M, fromCone_M like variables\n\tCATs[id] = arguments[0];\n}\n\nfunction adapt (W1, W2, id = \"Bradford\") {\n\t// adapt from a source whitepoint or illuminant W1\n\t// to a destination whitepoint or illuminant W2,\n\t// using the given chromatic adaptation transform (CAT)\n\t// debugger;\n\tlet method = CATs[id];\n\n\tlet [ρs, γs, βs] = multiplyMatrices(method.toCone_M, W1);\n\tlet [ρd, γd, βd] = multiplyMatrices(method.toCone_M, W2);\n\n\t// all practical illuminants have non-zero XYZ so no division by zero can occur below\n\tlet scale = [\n\t\t[ρd / ρs,  0,        0      ],\n\t\t[0,        γd / γs,  0      ],\n\t\t[0,        0,        βd / βs],\n\t];\n\t// console.log({scale});\n\n\tlet scaled_cone_M = multiplyMatrices(scale, method.toCone_M);\n\tlet adapt_M\t= multiplyMatrices(method.fromCone_M, scaled_cone_M);\n\t// console.log({scaled_cone_M, adapt_M});\n\treturn adapt_M;\n}\n\ndefineCAT({\n\tid: \"von Kries\",\n\ttoCone_M: [\n\t\t[  0.4002400,  0.7076000, -0.0808100 ],\n\t\t[ -0.2263000,  1.1653200,  0.0457000 ],\n\t\t[  0.0000000,  0.0000000,  0.9182200 ],\n\t],\n\tfromCone_M: [\n\t\t[ 1.8599363874558397, -1.1293816185800916,   0.21989740959619328     ],\n\t\t[ 0.3611914362417676,  0.6388124632850422,  -0.000006370596838649899 ],\n\t\t[ 0,                   0,                    1.0890636230968613      ],\n\t],\n});\n\ndefineCAT({\n\tid: \"Bradford\",\n\t// Convert an array of XYZ values in the range 0.0 - 1.0\n\t// to cone fundamentals\n\ttoCone_M: [\n\t\t[  0.8951000,  0.2664000, -0.1614000 ],\n\t\t[ -0.7502000,  1.7135000,  0.0367000 ],\n\t\t[  0.0389000, -0.0685000,  1.0296000 ],\n\t],\n\t// and back\n\tfromCone_M: [\n\t\t[  0.9869929054667121, -0.14705425642099013, 0.15996265166373122  ],\n\t\t[  0.4323052697233945,  0.5183602715367774,  0.049291228212855594 ],\n\t\t[ -0.00852866457517732, 0.04004282165408486, 0.96848669578755     ],\n\t],\n});\n\ndefineCAT({\n\tid: \"CAT02\",\n\t// with complete chromatic adaptation to W2, so D = 1.0\n\ttoCone_M: [\n\t\t[  0.7328000,  0.4296000, -0.1624000 ],\n\t\t[ -0.7036000,  1.6975000,  0.0061000 ],\n\t\t[  0.0030000,  0.0136000,  0.9834000 ],\n\t],\n\tfromCone_M: [\n\t\t[  1.0961238208355142,   -0.27886900021828726, 0.18274517938277307 ],\n\t\t[  0.4543690419753592,    0.4735331543074117,  0.07209780371722911 ],\n\t\t[ -0.009627608738429355, -0.00569803121611342, 1.0153256399545427  ],\n\t],\n});\n\ndefineCAT({\n\tid: \"CAT16\",\n\ttoCone_M: [\n\t\t[  0.401288,  0.650173, -0.051461 ],\n\t\t[ -0.250268,  1.204414,  0.045854 ],\n\t\t[ -0.002079,  0.048952,  0.953127 ],\n\t],\n\t// the extra precision is needed to avoid roundtripping errors\n\tfromCone_M: [\n\t\t[  1.862067855087233,   -1.0112546305316845,  0.14918677544445172  ],\n\t\t[  0.3875265432361372,   0.6214474419314753, -0.008973985167612521 ],\n\t\t[ -0.01584149884933386, -0.03412293802851557, 1.0499644368778496   ],\n\t],\n});\n\nObject.assign(WHITES, {\n\t// whitepoint values from ASTM E308-01 with 10nm spacing, 1931 2 degree observer\n\t// all normalized to Y (luminance) = 1.00000\n\t// Illuminant A is a tungsten electric light, giving a very warm, orange light.\n\tA:   [1.09850, 1.00000, 0.35585],\n\n\t// Illuminant C was an early approximation to daylight: illuminant A with a blue filter.\n\tC:   [0.98074, 1.000000, 1.18232],\n\n\t// The daylight series of illuminants simulate natural daylight.\n\t// The color temperature (in degrees Kelvin/100) ranges from\n\t// cool, overcast daylight (D50) to bright, direct sunlight (D65).\n\tD55: [0.95682, 1.00000, 0.92149],\n\tD75: [0.94972, 1.00000, 1.22638],\n\n\t// Equal-energy illuminant, used in two-stage CAT16\n\tE:   [1.00000, 1.00000, 1.00000],\n\n\t// The F series of illuminants represent fluorescent lights\n\tF2:  [0.99186, 1.00000, 0.67393],\n\tF7:  [0.95041, 1.00000, 1.08747],\n\tF11: [1.00962, 1.00000, 0.64350],\n});\n\n// The ACES whitepoint\n// see TB-2018-001 Derivation of the ACES White Point CIE Chromaticity Coordinates\n// also https://github.com/ampas/aces-dev/blob/master/documents/python/TB-2018-001/aces_wp.py\n// Similar to D60\nWHITES.ACES = [0.32168 / 0.33767, 1.00000, (1.00000 - 0.32168 - 0.33767) / 0.33767];\n\n// convert an array of linear-light ACEScc values to CIE XYZ\nconst toXYZ_M = [\n\t[  0.6624541811085053,   0.13400420645643313,  0.1561876870049078  ],\n\t[  0.27222871678091454,  0.6740817658111484,   0.05368951740793705 ],\n\t[ -0.005574649490394108, 0.004060733528982826, 1.0103391003129971  ],\n];\nconst fromXYZ_M = [\n\t[  1.6410233796943257,   -0.32480329418479,    -0.23642469523761225  ],\n\t[ -0.6636628587229829,    1.6153315916573379,   0.016756347685530137 ],\n\t[  0.011721894328375376, -0.008284441996237409, 0.9883948585390215   ],\n];\n\nvar ACEScg = new RGBColorSpace({\n\tid: \"acescg\",\n\tcssId: \"--acescg\",\n\tname: \"ACEScg\",\n\n\t// ACEScg – A scene-referred, linear-light encoding of ACES Data\n\t// https://docs.acescentral.com/specifications/acescg/\n\t// uses the AP1 primaries, see section 4.3.1 Color primaries\n\tcoords: {\n\t\tr: {\n\t\t\trange: [0, 65504],\n\t\t\tname: \"Red\",\n\t\t},\n\t\tg: {\n\t\t\trange: [0, 65504],\n\t\t\tname: \"Green\",\n\t\t},\n\t\tb: {\n\t\t\trange: [0, 65504],\n\t\t\tname: \"Blue\",\n\t\t},\n\t},\n\n\treferred: \"scene\",\n\n\twhite: WHITES.ACES,\n\n\ttoXYZ_M,\n\tfromXYZ_M,\n});\n\n// export default Color;\n\nconst ε = 2 ** -16;\n\n// the smallest value which, in the 32bit IEEE 754 float encoding,\n// decodes as a non-negative value\nconst ACES_min_nonzero = -0.35828683;\n\n// brightest encoded value, decodes to 65504\nconst ACES_cc_max = (Math.log2(65504) + 9.72) / 17.52; // 1.468\n\nvar acescc = new RGBColorSpace({\n\tid: \"acescc\",\n\tcssId: \"--acescc\",\n\tname: \"ACEScc\",\n\t// see S-2014-003 ACEScc – A Logarithmic Encoding of ACES Data\n\t// https://docs.acescentral.com/specifications/acescc/\n\t// uses the AP1 primaries, see section 4.3.1 Color primaries\n\n\t// Appendix A: \"Very small ACES scene referred values below 7 1/4 stops\n\t// below 18% middle gray are encoded as negative ACEScc values.\n\t// These values should be preserved per the encoding in Section 4.4\n\t// so that all positive ACES values are maintained.\"\n\tcoords: {\n\t\tr: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Red\",\n\t\t},\n\t\tg: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Green\",\n\t\t},\n\t\tb: {\n\t\t\trange: [ACES_min_nonzero, ACES_cc_max],\n\t\t\tname: \"Blue\",\n\t\t},\n\t},\n\treferred: \"scene\",\n\n\tbase: ACEScg,\n\t// from section 4.4.2 Decoding Function\n\ttoBase (RGB) {\n\t\tconst low = (9.72 - 15) / 17.52; // -0.3014\n\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val <= low) {\n\t\t\t\treturn (2 ** ((val * 17.52) - 9.72) - ε) * 2; // very low values, below -0.3014\n\t\t\t}\n\t\t\telse if (val < ACES_cc_max) {\n\t\t\t\treturn 2 ** ((val * 17.52) - 9.72);\n\t\t\t}\n\t\t\telse { // val >= ACES_cc_max\n\t\t\t\treturn 65504;\n\t\t\t}\n\t\t});\n\t},\n\n\t// Non-linear encoding function from S-2014-003, section 4.4.1 Encoding Function\n\tfromBase (RGB) {\n\t\treturn RGB.map(function (val) {\n\t\t\tif (val <= 0) {\n\t\t\t\treturn (Math.log2(ε) + 9.72) / 17.52; // -0.3584\n\t\t\t}\n\t\t\telse if (val < ε) {\n\t\t\t\treturn  (Math.log2(ε + val * 0.5) + 9.72) / 17.52;\n\t\t\t}\n\t\t\telse { // val >= ε\n\t\t\t\treturn  (Math.log2(val) + 9.72) / 17.52;\n\t\t\t}\n\t\t});\n\t},\n\t// encoded media white (rgb 1,1,1) => linear  [ 222.861, 222.861, 222.861 ]\n\t// encoded media black (rgb 0,0,0) => linear [ 0.0011857, 0.0011857, 0.0011857]\n});\n\nvar spaces = /*#__PURE__*/Object.freeze({\n\t__proto__: null,\n\tA98RGB: a98rgb,\n\tA98RGB_Linear: A98Linear,\n\tACEScc: acescc,\n\tACEScg: ACEScg,\n\tCAM16_JMh: cam16,\n\tHCT: hct,\n\tHPLuv: hpluv,\n\tHSL: HSL,\n\tHSLuv: hsluv,\n\tHSV: HSV,\n\tHWB: hwb,\n\tICTCP: ictcp,\n\tJzCzHz: jzczhz,\n\tJzazbz: Jzazbz,\n\tLCH: lch,\n\tLCHuv: LCHuv,\n\tLab: lab,\n\tLab_D65: lab_d65,\n\tLuv: Luv,\n\tOKLCH: oklch,\n\tOKLab: OKLab,\n\tP3: P3,\n\tP3_Linear: P3Linear,\n\tProPhoto: prophoto,\n\tProPhoto_Linear: ProPhotoLinear,\n\tREC_2020: REC2020,\n\tREC_2020_Linear: REC2020Linear,\n\tREC_2100_HLG: rec2100Hlg,\n\tREC_2100_PQ: rec2100Pq,\n\tXYZ_ABS_D65: XYZ_Abs_D65,\n\tXYZ_D50: XYZ_D50,\n\tXYZ_D65: xyz_d65,\n\tsRGB: sRGB,\n\tsRGB_Linear: sRGBLinear\n});\n\n/**\n * Class that represents a color\n */\nclass Color {\n\t/**\n\t * Creates an instance of Color.\n\t * Signatures:\n\t * - `new Color(stringToParse)`\n\t * - `new Color(otherColor)`\n\t * - `new Color({space, coords, alpha})`\n\t * - `new Color(space, coords, alpha)`\n\t * - `new Color(spaceId, coords, alpha)`\n\t */\n\tconstructor (...args) {\n\t\tlet color;\n\n\t\tif (args.length === 1) {\n\t\t\tcolor = getColor(args[0]);\n\t\t}\n\n\t\tlet space, coords, alpha;\n\n\t\tif (color) {\n\t\t\tspace = color.space || color.spaceId;\n\t\t\tcoords = color.coords;\n\t\t\talpha = color.alpha;\n\t\t}\n\t\telse {\n\t\t\t// default signature new Color(ColorSpace, array [, alpha])\n\t\t\t[space, coords, alpha] = args;\n\t\t}\n\n\t\tObject.defineProperty(this, \"space\", {\n\t\t\tvalue: ColorSpace.get(space),\n\t\t\twritable: false,\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true, // see note in https://262.ecma-international.org/8.0/#sec-proxy-object-internal-methods-and-internal-slots-get-p-receiver\n\t\t});\n\n\t\tthis.coords = coords ? coords.slice() : [0, 0, 0];\n\n\t\t// Clamp alpha to [0, 1]\n\t\tthis.alpha = alpha > 1 || alpha === undefined ? 1 : (alpha < 0 ? 0 : alpha);\n\n\t\t// Convert \"NaN\" to NaN\n\t\tfor (let i = 0; i < this.coords.length; i++) {\n\t\t\tif (this.coords[i] === \"NaN\") {\n\t\t\t\tthis.coords[i] = NaN;\n\t\t\t}\n\t\t}\n\n\t\t// Define getters and setters for each coordinate\n\t\tfor (let id in this.space.coords) {\n\t\t\tObject.defineProperty(this, id, {\n\t\t\t\tget: () => this.get(id),\n\t\t\t\tset: value => this.set(id, value),\n\t\t\t});\n\t\t}\n\t}\n\n\tget spaceId () {\n\t\treturn this.space.id;\n\t}\n\n\tclone () {\n\t\treturn new Color(this.space, this.coords, this.alpha);\n\t}\n\n\ttoJSON () {\n\t\treturn {\n\t\t\tspaceId: this.spaceId,\n\t\t\tcoords: this.coords,\n\t\t\talpha: this.alpha,\n\t\t};\n\t}\n\n\tdisplay (...args) {\n\t\tlet ret = display(this, ...args);\n\n\t\t// Convert color object to Color instance\n\t\tret.color = new Color(ret.color);\n\n\t\treturn ret;\n\t}\n\n\t/**\n\t * Get a color from the argument passed\n\t * Basically gets us the same result as new Color(color) but doesn't clone an existing color object\n\t */\n\tstatic get (color, ...args) {\n\t\tif (color instanceof Color) {\n\t\t\treturn color;\n\t\t}\n\n\t\treturn new Color(color, ...args);\n\t}\n\n\tstatic defineFunction (name, code, o = code) {\n\t\tlet {instance = true, returns} = o;\n\n\t\tlet func = function (...args) {\n\t\t\tlet ret = code(...args);\n\n\t\t\tif (returns === \"color\") {\n\t\t\t\tret = Color.get(ret);\n\t\t\t}\n\t\t\telse if (returns === \"function<color>\") {\n\t\t\t\tlet f = ret;\n\t\t\t\tret = function (...args) {\n\t\t\t\t\tlet ret = f(...args);\n\t\t\t\t\treturn Color.get(ret);\n\t\t\t\t};\n\t\t\t\t// Copy any function metadata\n\t\t\t\tObject.assign(ret, f);\n\t\t\t}\n\t\t\telse if (returns === \"array<color>\") {\n\t\t\t\tret = ret.map(c => Color.get(c));\n\t\t\t}\n\n\t\t\treturn ret;\n\t\t};\n\n\t\tif (!(name in Color)) {\n\t\t\tColor[name] = func;\n\t\t}\n\n\t\tif (instance) {\n\t\t\tColor.prototype[name] = function (...args) {\n\t\t\t\treturn func(this, ...args);\n\t\t\t};\n\t\t}\n\t}\n\n\tstatic defineFunctions (o) {\n\t\tfor (let name in o) {\n\t\t\tColor.defineFunction(name, o[name], o[name]);\n\t\t}\n\t}\n\n\tstatic extend (exports) {\n\t\tif (exports.register) {\n\t\t\texports.register(Color);\n\t\t}\n\t\telse {\n\t\t\t// No register method, just add the module's functions\n\t\t\tfor (let name in exports) {\n\t\t\t\tColor.defineFunction(name, exports[name]);\n\t\t\t}\n\t\t}\n\t}\n}\n\nColor.defineFunctions({\n\tget,\n\tgetAll,\n\tset,\n\tsetAll,\n\tto,\n\tequals,\n\tinGamut,\n\ttoGamut,\n\tdistance,\n\ttoString: serialize,\n});\n\nObject.assign(Color, {\n\tutil,\n\thooks,\n\tWHITES,\n\tSpace: ColorSpace,\n\tspaces: ColorSpace.registry,\n\tparse,\n\n\t// Global defaults one may want to configure\n\tdefaults,\n});\n\nfor (let key of Object.keys(spaces)) {\n\tColorSpace.register(spaces[key]);\n}\n\n/**\n * This plugin defines getters and setters for color[spaceId]\n * e.g. color.lch on *any* color gives us the lch coords\n */\n\n// Add space accessors to existing color spaces\nfor (let id in ColorSpace.registry) {\n\taddSpaceAccessors(id, ColorSpace.registry[id]);\n}\n\n// Add space accessors to color spaces not yet created\nhooks.add(\"colorspace-init-end\", space => {\n\taddSpaceAccessors(space.id, space);\n\tspace.aliases?.forEach(alias => {\n\t\taddSpaceAccessors(alias, space);\n\t});\n});\n\nfunction addSpaceAccessors (id, space) {\n\tlet propId = id.replace(/-/g, \"_\");\n\n\tObject.defineProperty(Color.prototype, propId, {\n\t\t// Convert coords to coords in another colorspace and return them\n\t\t// Source colorspace: this.spaceId\n\t\t// Target colorspace: id\n\t\tget () {\n\t\t\tlet ret = this.getAll(id);\n\n\t\t\tif (typeof Proxy === \"undefined\") {\n\t\t\t\t// If proxies are not supported, just return a static array\n\t\t\t\treturn ret;\n\t\t\t}\n\n\t\t\t// Enable color.spaceId.coordName syntax\n\t\t\treturn new Proxy(ret, {\n\t\t\t\thas: (obj, property) => {\n\t\t\t\t\ttry {\n\t\t\t\t\t\tColorSpace.resolveCoord([space, property]);\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\t\t\t\t\tcatch (e) {}\n\n\t\t\t\t\treturn Reflect.has(obj, property);\n\t\t\t\t},\n\t\t\t\tget: (obj, property, receiver) => {\n\t\t\t\t\tif (property && typeof property !== \"symbol\" && !(property in obj)) {\n\t\t\t\t\t\tlet {index} = ColorSpace.resolveCoord([space, property]);\n\n\t\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\t\treturn obj[index];\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Reflect.get(obj, property, receiver);\n\t\t\t\t},\n\t\t\t\tset: (obj, property, value, receiver) => {\n\t\t\t\t\tif (property && typeof property !== \"symbol\" && !(property in obj) || property >= 0) {\n\t\t\t\t\t\tlet {index} = ColorSpace.resolveCoord([space, property]);\n\n\t\t\t\t\t\tif (index >= 0) {\n\t\t\t\t\t\t\tobj[index] = value;\n\n\t\t\t\t\t\t\t// Update color.coords\n\t\t\t\t\t\t\tthis.setAll(id, obj);\n\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn Reflect.set(obj, property, value, receiver);\n\t\t\t\t},\n\t\t\t});\n\t\t},\n\t\t// Convert coords in another colorspace to internal coords and set them\n\t\t// Target colorspace: this.spaceId\n\t\t// Source colorspace: id\n\t\tset (coords) {\n\t\t\tthis.setAll(id, coords);\n\t\t},\n\t\tconfigurable: true,\n\t\tenumerable: true,\n\t});\n}\n\n// Import all modules of Color.js\n\nColor.extend(deltaEMethods);\nColor.extend({deltaE});\nObject.assign(Color, {deltaEMethods});\nColor.extend(variations);\nColor.extend({contrast});\nColor.extend(chromaticity);\nColor.extend(luminance);\nColor.extend(interpolation);\nColor.extend(contrastMethods);\n\n\n//# sourceMappingURL=color.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvY29sb3Jqcy5pby9kaXN0L2NvbG9yLmpzIiwibWFwcGluZ3MiOiI7Ozs7QUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxvREFBb0Q7QUFDcEQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGtCQUFrQixnQkFBZ0I7QUFDbEM7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSx3QkFBd0I7QUFDeEI7O0FBRUE7QUFDQSxpQ0FBaUM7QUFDakM7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsR0FBRztBQUNkLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSw4QkFBOEIsaUJBQWlCO0FBQy9DO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLEdBQUc7QUFDZCxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZO0FBQ1o7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxVQUFVO0FBQ3JCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0Esb0JBQW9CLGFBQWE7QUFDakM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwyQ0FBMkM7QUFDM0M7QUFDQTs7QUFFQTtBQUNBLHdEQUF3RCxrQkFBa0IsRUFBRSxzQkFBc0IsRUFBRSxnQkFBZ0I7QUFDcEg7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsWUFBWTs7QUFFWjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxZQUFZO0FBQ3ZCLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYSxVQUFVO0FBQ3ZCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIseUJBQXlCLGtCQUFrQixXQUFXLEtBQUssS0FBSztBQUMxRjs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOzs7QUFHQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsYUFBYTtBQUNiO0FBQ0Esc0JBQXNCLE1BQU0sSUFBSTtBQUNoQyxZQUFZO0FBQ1o7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtFQUFrRSxHQUFHO0FBQ3JFO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsNEJBQTRCLHlCQUF5QjtBQUNyRDs7QUFFQTtBQUNBLHdCQUF3QixZQUFZO0FBQ3BDLDJDQUEyQyxhQUFhLHFCQUFxQixHQUFHO0FBQ2hGO0FBQ0E7QUFDQSx3QkFBd0IsWUFBWTtBQUNwQyxrQ0FBa0MsYUFBYSw4QkFBOEIsR0FBRztBQUNoRjs7QUFFQSxjQUFjO0FBQ2Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHdDQUF3QyxNQUFNO0FBQzlDO0FBQ0E7O0FBRUEsNkNBQTZDLEdBQUc7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJCQUEyQiw2QkFBNkI7QUFDeEQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBLHdDQUF3QyxLQUFLO0FBQzdDOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVMsc0JBQXNCLDBCQUEwQixzQkFBc0IsWUFBWTtBQUN0RyxjQUFjLHNCQUFzQixTQUFTLHNCQUFzQjtBQUNuRTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQSxtQkFBbUIsZUFBZSxJQUFJO0FBQ3RDO0FBQ0E7QUFDQSwyQ0FBMkMsUUFBUTtBQUNuRDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQyxjQUFjO0FBQ2Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUEsa0JBQWtCLG1CQUFtQjtBQUNyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwREFBMEQsTUFBTSxNQUFNLE1BQU07QUFDNUU7O0FBRUE7QUFDQSxrQ0FBa0MsMEJBQTBCO0FBQzVEO0FBQ0E7O0FBRUE7QUFDQSx5Q0FBeUMsc0JBQXNCO0FBQy9EO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZLFdBQVcsR0FBRyxRQUFRO0FBQ2xDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSwyREFBMkQsR0FBRztBQUM5RDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLHFCQUFxQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJEQUEyRCxNQUFNO0FBQ2pFOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLHlCQUF5QixPQUFPO0FBQ2hDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxnQkFBZ0I7QUFDNUIsWUFBWSxxQkFBcUI7QUFDakMsYUFBYTtBQUNiO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBOEQsSUFBSTtBQUNsRTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxZQUFZO0FBQ1o7O0FBRUE7QUFDQTs7QUFFQSw2QkFBNkIsTUFBTSx3QkFBd0IsV0FBVyx5QkFBeUIscUNBQXFDO0FBQ3BJOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxxQkFBcUIsV0FBVztBQUNoQztBQUNBOztBQUVBO0FBQ0E7O0FBRUEsaUNBQWlDLFFBQVEsSUFBSTtBQUM3QztBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFlBQVk7QUFDWixHQUFHOztBQUVIO0FBQ0E7QUFDQSxTQUFTLDRCQUE0Qjs7QUFFckM7QUFDQTtBQUNBOztBQUVBLDRCQUE0Qix3QkFBd0I7O0FBRXBEO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU0sVUFBVTtBQUNoQixNQUFNLFVBQVU7QUFDaEIsTUFBTSxVQUFVO0FBQ2hCLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLEdBQUcsMkJBQTJCLGtCQUFrQjtBQUM1RCxZQUFZLFlBQVk7QUFDeEIsWUFBWSxZQUFZO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsT0FBTztBQUNsQixXQUFXLHFCQUFxQjtBQUNoQyxhQUFhLFVBQVU7QUFDdkI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLE1BQU0sY0FBYztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPLGNBQWM7QUFDckI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSwwQkFBMEI7O0FBRTFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQ0FBcUM7QUFDckM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEscUNBQXFDLHdCQUF3QixJQUFJO0FBQ2pFOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwyQkFBMkI7O0FBRTNCO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHNDQUFzQztBQUN0QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGtCQUFrQjtBQUNsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxZQUFZLFNBQVM7QUFDckI7QUFDQSxpQ0FBaUMsZUFBZSxJQUFJO0FBQ3BEOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSwrQkFBK0IsUUFBUTtBQUN2Qzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsb0NBQW9DLGNBQWMsSUFBSTtBQUN0RDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxpQkFBaUIsR0FBRztBQUNwQjtBQUNBOztBQUVBLDRCQUE0Qjs7QUFFNUI7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQjtBQUNqQixpQkFBaUI7QUFDakI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCLEVBQUU7O0FBRW5CO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsa0JBQWtCOztBQUVsQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBLGtCQUFrQixXQUFXOztBQUU3QjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsZ0JBQWdCO0FBQ2hCLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQjs7QUFFcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLGlCQUFpQix5Q0FBeUM7O0FBRTFELFNBQVM7QUFDVDs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLElBQUksc0NBQXNDO0FBQzFDO0FBQ0E7QUFDQSxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBLDBCQUEwQjtBQUMxQiwwQkFBMEI7O0FBRTFCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsbUJBQW1CLGlCQUFpQjs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUIsaUJBQWlCO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsVUFBVTtBQUNwQixXQUFXO0FBQ1g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQixVQUFVLE9BQU87QUFDakIsV0FBVztBQUNYO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLGFBQWE7QUFDYjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGlDQUFpQyxVQUFVO0FBQzNDOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxxQkFBcUI7QUFDckIsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUJBQXFCLG9DQUFvQztBQUN6RCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsV0FBVyxlQUFlO0FBQzFCLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxtQkFBbUI7QUFDOUIsV0FBVyxRQUFRO0FBQ25CO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLHNCQUFzQjtBQUN0QixHQUFHLElBQUk7QUFDUDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2QkFBNkIsWUFBWTtBQUN6QztBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQ0FBbUMsT0FBTztBQUMxQztBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNLDRDQUE0QztBQUNsRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSw2Q0FBNkMsdUJBQXVCO0FBQ3BFOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrQkFBa0IseUNBQXlDO0FBQzNEO0FBQ0E7QUFDQSxrQkFBa0IscUNBQXFDO0FBQ3ZEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGtDQUFrQyx1QkFBdUI7QUFDekQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxvQ0FBb0MsWUFBWTtBQUNoRDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVLGlDQUFpQztBQUMzQyxVQUFVLGlDQUFpQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUTtBQUNuQixXQUFXLG1CQUFtQjtBQUM5QixhQUFhO0FBQ2I7QUFDQSw4QkFBOEIsT0FBTyxJQUFJO0FBQ3pDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQ0FBbUMsV0FBVztBQUM5QztBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSw4Q0FBOEMsV0FBVztBQUN6RDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsZUFBZTtBQUMxQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCLGFBQWE7QUFDYjtBQUNBLDRCQUE0QixTQUFTLElBQUk7QUFDekM7QUFDQTs7QUFFQTtBQUNBLFlBQVk7O0FBRVo7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUTtBQUNuQixXQUFXLFFBQVE7QUFDbkIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsSUFBSTtBQUNOOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7O0FBRXBDOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQ0FBaUMsVUFBVTtBQUMzQztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGdDQUFnQyxVQUFVO0FBQzFDLEtBQUs7QUFDTDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG1DQUFtQyxVQUFVO0FBQzdDOztBQUVBLDhEQUE4RCw0QkFBNEIsRUFBRSxNQUFNO0FBQ2xHLFdBQVcsS0FBSyxHQUFHLHNDQUFzQyxFQUFFLFNBQVM7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsOERBQThELCtCQUErQixNQUFNLGtIQUFrSDtBQUNyTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxhQUFhLG9CQUFvQjtBQUNqQztBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSw2QkFBNkIsSUFBSSxFQUFFLElBQUk7QUFDdkM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDBCQUEwQixFQUFFO0FBQzVCO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxLQUFLLElBQUk7QUFDVDtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLOztBQUVMO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZTs7QUFFZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxlQUFlO0FBQ2Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWSxlQUFlLGtCQUFrQjtBQUM3QyxXQUFXLEdBQUcsV0FBVztBQUN6QixXQUFXLHFCQUFxQjtBQUNoQyxhQUFhLFFBQVE7QUFDckI7QUFDQSwwQkFBMEIsNENBQTRDLElBQUk7QUFDMUU7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQSwwQkFBMEI7O0FBRTFCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQsaURBQWlEO0FBQ2pEO0FBQ0EsT0FBTztBQUNQOztBQUVBLE1BQU0sb0JBQW9COztBQUUxQjtBQUNBO0FBQ0EsZ0dBQWdHLFdBQVc7QUFDM0c7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLG9EQUFvRCxVQUFVO0FBQzlEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVELCtCQUErQjtBQUMvQjtBQUNBLE9BQU87QUFDUDs7QUFFQSxNQUFNLG1DQUFtQzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSwrQ0FBK0MsT0FBTztBQUN0RDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxnQkFBZ0I7QUFDM0IsV0FBVyxRQUFRO0FBQ25CLFdBQVcsUUFBUSxLQUFLO0FBQ3hCLFlBQVk7QUFDWjtBQUNBLG9DQUFvQztBQUNwQzs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLDJCQUEyQjtBQUN0QyxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFFBQVEsV0FBVztBQUM5QixZQUFZO0FBQ1o7QUFDQSxvQ0FBb0M7QUFDcEM7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsNkJBQTZCO0FBQ3ZDO0FBQ0E7QUFDQTtBQUNBLG9CQUFvQixvQkFBb0I7QUFDeEM7QUFDQSxXQUFXO0FBQ1gsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxtQkFBbUIsNkNBQTZDO0FBQ2hFO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0Esc0JBQXNCLHdCQUF3QjtBQUM5QztBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLDJCQUEyQjtBQUN0QyxXQUFXLGdCQUFnQjtBQUMzQixXQUFXLFFBQVEsV0FBVztBQUM5QixhQUFhLFVBQVU7QUFDdkI7QUFDQSw0Q0FBNEM7QUFDNUM7QUFDQTtBQUNBOztBQUVBLHVDQUF1QyxtQ0FBbUM7QUFDMUU7O0FBRUEsTUFBTSxnREFBZ0Q7O0FBRXREO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLGtCQUFrQjs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0EsYUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsbUNBQW1DLGlCQUFpQjtBQUNwRCx1Q0FBdUMsMkJBQTJCO0FBQ2xFLHVDQUF1Qyx3QkFBd0I7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSwrQ0FBK0M7QUFDL0MsaUNBQWlDO0FBQ2pDO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esb0JBQW9COztBQUVwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0YsQ0FBQzs7QUFFRDs7QUFFQSwwQkFBMEI7QUFDMUIsMEJBQTBCO0FBQzFCLDJDQUEyQyw4QkFBOEI7O0FBRXpFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFCQUFxQiw0QkFBNEI7O0FBRWpEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQSwwQkFBMEI7QUFDMUIsd0JBQXdCOztBQUV4QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRixDQUFDOztBQUVELGdCQUFnQjtBQUNoQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLDZCQUE2QjtBQUM3QixHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMkNBQTJDO0FBQzNDO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGLENBQUM7O0FBRUQ7O0FBRUE7QUFDQSxzQkFBc0I7QUFDdEIsc0JBQXNCOztBQUV0QixzQkFBc0I7O0FBRXRCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGLENBQUM7O0FBRUQ7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRCxxQkFBcUIseUJBQXlCO0FBQzlDO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsTUFBTTs7QUFFdkI7QUFDQTtBQUNBLGlCQUFpQix1QkFBdUI7QUFDeEM7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLHVEQUF1RDs7QUFFdkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxtQ0FBbUM7O0FBRW5DO0FBQ0E7QUFDQSxrREFBa0Q7QUFDbEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxVQUFVO0FBQ1Y7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsMENBQTBDO0FBQzFDO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsVUFBVTtBQUNWO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLHFCQUFxQjtBQUN2QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7O0FBRUE7QUFDQTs7QUFFQTtBQUNBLGtCQUFrQix3QkFBd0I7QUFDMUM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsT0FBTywwQkFBMEI7O0FBRWpDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFdBQVcsT0FBTzs7QUFFbEI7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBLFdBQVcsT0FBTzs7QUFFbEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTCxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTs7QUFFQTtBQUNBLGNBQWMsT0FBTztBQUNyQixzQkFBc0IsY0FBYztBQUNwQztBQUNBLGNBQWMsU0FBUztBQUN2QjtBQUNBO0FBQ0E7QUFDQTs7QUFFNEI7QUFDNUIiLCJzb3VyY2VzIjpbIi9Vc2Vycy90ZXN0L0RvY3VtZW50cy9BTEZPUklTIEZJTkFOQ0UvMDIuIE1hcmtldGluZy8wMS4gU2l0ZSBJbnRlcm5ldC9BbGZvcmlzLVY4LjAvbm9kZV9tb2R1bGVzL2NvbG9yanMuaW8vZGlzdC9jb2xvci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBIGlzIG0geCBuLiBCIGlzIG4geCBwLiBwcm9kdWN0IGlzIG0geCBwLlxuZnVuY3Rpb24gbXVsdGlwbHlNYXRyaWNlcyAoQSwgQikge1xuXHRsZXQgbSA9IEEubGVuZ3RoO1xuXG5cdGlmICghQXJyYXkuaXNBcnJheShBWzBdKSkge1xuXHRcdC8vIEEgaXMgdmVjdG9yLCBjb252ZXJ0IHRvIFtbYSwgYiwgYywgLi4uXV1cblx0XHRBID0gW0FdO1xuXHR9XG5cblx0aWYgKCFBcnJheS5pc0FycmF5KEJbMF0pKSB7XG5cdFx0Ly8gQiBpcyB2ZWN0b3IsIGNvbnZlcnQgdG8gW1thXSwgW2JdLCBbY10sIC4uLl1dXG5cdFx0QiA9IEIubWFwKHggPT4gW3hdKTtcblx0fVxuXG5cdGxldCBwID0gQlswXS5sZW5ndGg7XG5cdGxldCBCX2NvbHMgPSBCWzBdLm1hcCgoXywgaSkgPT4gQi5tYXAoeCA9PiB4W2ldKSk7IC8vIHRyYW5zcG9zZSBCXG5cdGxldCBwcm9kdWN0ID0gQS5tYXAocm93ID0+IEJfY29scy5tYXAoY29sID0+IHtcblx0XHRsZXQgcmV0ID0gMDtcblxuXHRcdGlmICghQXJyYXkuaXNBcnJheShyb3cpKSB7XG5cdFx0XHRmb3IgKGxldCBjIG9mIGNvbCkge1xuXHRcdFx0XHRyZXQgKz0gcm93ICogYztcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IHJvdy5sZW5ndGg7IGkrKykge1xuXHRcdFx0cmV0ICs9IHJvd1tpXSAqIChjb2xbaV0gfHwgMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSkpO1xuXG5cdGlmIChtID09PSAxKSB7XG5cdFx0cHJvZHVjdCA9IHByb2R1Y3RbMF07IC8vIEF2b2lkIFtbYSwgYiwgYywgLi4uXV1cblx0fVxuXG5cdGlmIChwID09PSAxKSB7XG5cdFx0cmV0dXJuIHByb2R1Y3QubWFwKHggPT4geFswXSk7IC8vIEF2b2lkIFtbYV0sIFtiXSwgW2NdLCAuLi5dXVxuXHR9XG5cblx0cmV0dXJuIHByb2R1Y3Q7XG59XG5cbi8qKlxuICogVmFyaW91cyB1dGlsaXR5IGZ1bmN0aW9uc1xuICovXG5cblxuLyoqXG4gKiBDaGVjayBpZiBhIHZhbHVlIGlzIGEgc3RyaW5nIChpbmNsdWRpbmcgYSBTdHJpbmcgb2JqZWN0KVxuICogQHBhcmFtIHsqfSBzdHIgLSBWYWx1ZSB0byBjaGVja1xuICogQHJldHVybnMge2Jvb2xlYW59XG4gKi9cbmZ1bmN0aW9uIGlzU3RyaW5nIChzdHIpIHtcblx0cmV0dXJuIHR5cGUoc3RyKSA9PT0gXCJzdHJpbmdcIjtcbn1cblxuLyoqXG4gKiBEZXRlcm1pbmUgdGhlIGludGVybmFsIEphdmFTY3JpcHQgW1tDbGFzc11dIG9mIGFuIG9iamVjdC5cbiAqIEBwYXJhbSB7Kn0gbyAtIFZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7c3RyaW5nfVxuICovXG5mdW5jdGlvbiB0eXBlIChvKSB7XG5cdGxldCBzdHIgPSBPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwobyk7XG5cblx0cmV0dXJuIChzdHIubWF0Y2goL15cXFtvYmplY3RcXHMrKC4qPylcXF0kLylbMV0gfHwgXCJcIikudG9Mb3dlckNhc2UoKTtcbn1cblxuZnVuY3Rpb24gc2VyaWFsaXplTnVtYmVyIChuLCB7cHJlY2lzaW9uLCB1bml0IH0pIHtcblx0aWYgKGlzTm9uZShuKSkge1xuXHRcdHJldHVybiBcIm5vbmVcIjtcblx0fVxuXG5cdHJldHVybiB0b1ByZWNpc2lvbihuLCBwcmVjaXNpb24pICsgKHVuaXQgPz8gXCJcIik7XG59XG5cbi8qKlxuICogQ2hlY2sgaWYgYSB2YWx1ZSBjb3JyZXNwb25kcyB0byBhIG5vbmUgYXJndW1lbnRcbiAqIEBwYXJhbSB7Kn0gbiAtIFZhbHVlIHRvIGNoZWNrXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn1cbiAqL1xuZnVuY3Rpb24gaXNOb25lIChuKSB7XG5cdHJldHVybiBOdW1iZXIuaXNOYU4obikgfHwgKG4gaW5zdGFuY2VvZiBOdW1iZXIgJiYgbj8ubm9uZSk7XG59XG5cbi8qKlxuICogUmVwbGFjZSBub25lIHZhbHVlcyB3aXRoIDBcbiAqL1xuZnVuY3Rpb24gc2tpcE5vbmUgKG4pIHtcblx0cmV0dXJuIGlzTm9uZShuKSA/IDAgOiBuO1xufVxuXG4vKipcbiAqIFJvdW5kIGEgbnVtYmVyIHRvIGEgY2VydGFpbiBudW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXG4gKiBAcGFyYW0ge251bWJlcn0gbiAtIFRoZSBudW1iZXIgdG8gcm91bmRcbiAqIEBwYXJhbSB7bnVtYmVyfSBwcmVjaXNpb24gLSBOdW1iZXIgb2Ygc2lnbmlmaWNhbnQgZGlnaXRzXG4gKi9cbmZ1bmN0aW9uIHRvUHJlY2lzaW9uIChuLCBwcmVjaXNpb24pIHtcblx0aWYgKG4gPT09IDApIHtcblx0XHRyZXR1cm4gMDtcblx0fVxuXHRsZXQgaW50ZWdlciA9IH5+bjtcblx0bGV0IGRpZ2l0cyA9IDA7XG5cdGlmIChpbnRlZ2VyICYmIHByZWNpc2lvbikge1xuXHRcdGRpZ2l0cyA9IH5+TWF0aC5sb2cxMChNYXRoLmFicyhpbnRlZ2VyKSkgKyAxO1xuXHR9XG5cdGNvbnN0IG11bHRpcGxpZXIgPSAxMC4wICoqIChwcmVjaXNpb24gLSBkaWdpdHMpO1xuXHRyZXR1cm4gTWF0aC5mbG9vcihuICogbXVsdGlwbGllciArIDAuNSkgLyBtdWx0aXBsaWVyO1xufVxuXG5jb25zdCBhbmdsZUZhY3RvciA9IHtcblx0ZGVnOiAxLFxuXHRncmFkOiAwLjksXG5cdHJhZDogMTgwIC8gTWF0aC5QSSxcblx0dHVybjogMzYwLFxufTtcblxuLyoqXG4qIFBhcnNlIGEgQ1NTIGZ1bmN0aW9uLCByZWdhcmRsZXNzIG9mIGl0cyBuYW1lIGFuZCBhcmd1bWVudHNcbiogQHBhcmFtIFN0cmluZyBzdHIgU3RyaW5nIHRvIHBhcnNlXG4qIEByZXR1cm4ge3tuYW1lLCBhcmdzLCByYXdBcmdzfX1cbiovXG5mdW5jdGlvbiBwYXJzZUZ1bmN0aW9uIChzdHIpIHtcblx0aWYgKCFzdHIpIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHRzdHIgPSBzdHIudHJpbSgpO1xuXG5cdGNvbnN0IGlzRnVuY3Rpb25SZWdleCA9IC9eKFthLXpdKylcXCgoLis/KVxcKSQvaTtcblx0Y29uc3QgaXNOdW1iZXJSZWdleCA9IC9eLT9bXFxkLl0rJC87XG5cdGNvbnN0IHVuaXRWYWx1ZVJlZ2V4ID0gLyV8ZGVnfGc/cmFkfHR1cm4kLztcblx0Y29uc3Qgc2luZ2xlQXJndW1lbnQgPSAvXFwvP1xccyoobm9uZXxbLVxcdy5dKyg/OiV8ZGVnfGc/cmFkfHR1cm4pPykvZztcblx0bGV0IHBhcnRzID0gc3RyLm1hdGNoKGlzRnVuY3Rpb25SZWdleCk7XG5cblx0aWYgKHBhcnRzKSB7XG5cdFx0Ly8gSXQgaXMgYSBmdW5jdGlvbiwgcGFyc2UgYXJnc1xuXHRcdGxldCBhcmdzID0gW107XG5cdFx0cGFydHNbMl0ucmVwbGFjZShzaW5nbGVBcmd1bWVudCwgKCQwLCByYXdBcmcpID0+IHtcblx0XHRcdGxldCBtYXRjaCA9IHJhd0FyZy5tYXRjaCh1bml0VmFsdWVSZWdleCk7XG5cdFx0XHRsZXQgYXJnID0gcmF3QXJnO1xuXG5cdFx0XHRpZiAobWF0Y2gpIHtcblx0XHRcdFx0bGV0IHVuaXQgPSBtYXRjaFswXTtcblx0XHRcdFx0Ly8gRHJvcCB1bml0IGZyb20gdmFsdWVcblx0XHRcdFx0bGV0IHVuaXRsZXNzQXJnID0gYXJnLnNsaWNlKDAsIC11bml0Lmxlbmd0aCk7XG5cblx0XHRcdFx0aWYgKHVuaXQgPT09IFwiJVwiKSB7XG5cdFx0XHRcdFx0Ly8gQ29udmVydCBwZXJjZW50YWdlcyB0byAwLTEgbnVtYmVyc1xuXHRcdFx0XHRcdGFyZyA9IG5ldyBOdW1iZXIodW5pdGxlc3NBcmcgLyAxMDApO1xuXHRcdFx0XHRcdGFyZy50eXBlID0gXCI8cGVyY2VudGFnZT5cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHQvLyBNdWx0aXBseSBhbmdsZSBieSBhcHByb3ByaWF0ZSBmYWN0b3IgZm9yIGl0cyB1bml0XG5cdFx0XHRcdFx0YXJnID0gbmV3IE51bWJlcih1bml0bGVzc0FyZyAqIGFuZ2xlRmFjdG9yW3VuaXRdKTtcblx0XHRcdFx0XHRhcmcudHlwZSA9IFwiPGFuZ2xlPlwiO1xuXHRcdFx0XHRcdGFyZy51bml0ID0gdW5pdDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAoaXNOdW1iZXJSZWdleC50ZXN0KGFyZykpIHtcblx0XHRcdFx0Ly8gQ29udmVydCBudW1lcmljYWwgYXJncyB0byBudW1iZXJzXG5cdFx0XHRcdGFyZyA9IG5ldyBOdW1iZXIoYXJnKTtcblx0XHRcdFx0YXJnLnR5cGUgPSBcIjxudW1iZXI+XCI7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIGlmIChhcmcgPT09IFwibm9uZVwiKSB7XG5cdFx0XHRcdGFyZyA9IG5ldyBOdW1iZXIoTmFOKTtcblx0XHRcdFx0YXJnLm5vbmUgPSB0cnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoJDAuc3RhcnRzV2l0aChcIi9cIikpIHtcblx0XHRcdFx0Ly8gSXQncyBhbHBoYVxuXHRcdFx0XHRhcmcgPSBhcmcgaW5zdGFuY2VvZiBOdW1iZXIgPyBhcmcgOiBuZXcgTnVtYmVyKGFyZyk7XG5cdFx0XHRcdGFyZy5hbHBoYSA9IHRydWU7XG5cdFx0XHR9XG5cblx0XHRcdGlmICh0eXBlb2YgYXJnID09PSBcIm9iamVjdFwiICYmIGFyZyBpbnN0YW5jZW9mIE51bWJlcikge1xuXHRcdFx0XHRhcmcucmF3ID0gcmF3QXJnO1xuXHRcdFx0fVxuXG5cdFx0XHRhcmdzLnB1c2goYXJnKTtcblx0XHR9KTtcblxuXHRcdHJldHVybiB7XG5cdFx0XHRuYW1lOiBwYXJ0c1sxXS50b0xvd2VyQ2FzZSgpLFxuXHRcdFx0cmF3TmFtZTogcGFydHNbMV0sXG5cdFx0XHRyYXdBcmdzOiBwYXJ0c1syXSxcblx0XHRcdC8vIEFuIGFyZ3VtZW50IGNvdWxkIGJlIChhcyBvZiBjc3MtY29sb3ItNCk6XG5cdFx0XHQvLyBhIG51bWJlciwgcGVyY2VudGFnZSwgZGVncmVlcyAoaHVlKSwgaWRlbnQgKGluIGNvbG9yKCkpXG5cdFx0XHRhcmdzLFxuXHRcdH07XG5cdH1cbn1cblxuZnVuY3Rpb24gbGFzdCAoYXJyKSB7XG5cdHJldHVybiBhcnJbYXJyLmxlbmd0aCAtIDFdO1xufVxuXG5mdW5jdGlvbiBpbnRlcnBvbGF0ZSAoc3RhcnQsIGVuZCwgcCkge1xuXHRpZiAoaXNOYU4oc3RhcnQpKSB7XG5cdFx0cmV0dXJuIGVuZDtcblx0fVxuXG5cdGlmIChpc05hTihlbmQpKSB7XG5cdFx0cmV0dXJuIHN0YXJ0O1xuXHR9XG5cblx0cmV0dXJuIHN0YXJ0ICsgKGVuZCAtIHN0YXJ0KSAqIHA7XG59XG5cbmZ1bmN0aW9uIGludGVycG9sYXRlSW52IChzdGFydCwgZW5kLCB2YWx1ZSkge1xuXHRyZXR1cm4gKHZhbHVlIC0gc3RhcnQpIC8gKGVuZCAtIHN0YXJ0KTtcbn1cblxuZnVuY3Rpb24gbWFwUmFuZ2UgKGZyb20sIHRvLCB2YWx1ZSkge1xuXHRyZXR1cm4gaW50ZXJwb2xhdGUodG9bMF0sIHRvWzFdLCBpbnRlcnBvbGF0ZUludihmcm9tWzBdLCBmcm9tWzFdLCB2YWx1ZSkpO1xufVxuXG5mdW5jdGlvbiBwYXJzZUNvb3JkR3JhbW1hciAoY29vcmRHcmFtbWFycykge1xuXHRyZXR1cm4gY29vcmRHcmFtbWFycy5tYXAoY29vcmRHcmFtbWFyID0+IHtcblx0XHRyZXR1cm4gY29vcmRHcmFtbWFyLnNwbGl0KFwifFwiKS5tYXAodHlwZSA9PiB7XG5cdFx0XHR0eXBlID0gdHlwZS50cmltKCk7XG5cdFx0XHRsZXQgcmFuZ2UgPSB0eXBlLm1hdGNoKC9eKDxbYS16XSs+KVxcWygtP1suXFxkXSspLFxccyooLT9bLlxcZF0rKVxcXT8kLyk7XG5cblx0XHRcdGlmIChyYW5nZSkge1xuXHRcdFx0XHRsZXQgcmV0ID0gbmV3IFN0cmluZyhyYW5nZVsxXSk7XG5cdFx0XHRcdHJldC5yYW5nZSA9IFsrcmFuZ2VbMl0sICtyYW5nZVszXV07XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0eXBlO1xuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDbGFtcCB2YWx1ZSBiZXR3ZWVuIHRoZSBtaW5pbXVtIGFuZCBtYXhpbXVtXG4gKiBAcGFyYW0ge251bWJlcn0gbWluIG1pbmltdW0gdmFsdWUgdG8gcmV0dXJuXG4gKiBAcGFyYW0ge251bWJlcn0gdmFsIHRoZSB2YWx1ZSB0byByZXR1cm4gaWYgaXQgaXMgYmV0d2VlbiBtaW4gYW5kIG1heFxuICogQHBhcmFtIHtudW1iZXJ9IG1heCBtYXhpbXVtIHZhbHVlIHRvIHJldHVyblxuICogQHJldHVybnMgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIGNsYW1wIChtaW4sIHZhbCwgbWF4KSB7XG5cdHJldHVybiBNYXRoLm1heChNYXRoLm1pbihtYXgsIHZhbCksIG1pbik7XG59XG5cbi8qKlxuICogQ29weSBzaWduIG9mIG9uZSB2YWx1ZSB0byBhbm90aGVyLlxuICogQHBhcmFtIHtudW1iZXJ9IC0gdG8gbnVtYmVyIHRvIGNvcHkgc2lnbiB0b1xuICogQHBhcmFtIHtudW1iZXJ9IC0gZnJvbSBudW1iZXIgdG8gY29weSBzaWduIGZyb21cbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5mdW5jdGlvbiBjb3B5U2lnbiAodG8sIGZyb20pIHtcblx0cmV0dXJuIE1hdGguc2lnbih0bykgPT09IE1hdGguc2lnbihmcm9tKSA/IHRvIDogLXRvO1xufVxuXG4vKipcbiAqIFBlcmZvcm0gcG93IG9uIGEgc2lnbmVkIG51bWJlciBhbmQgY29weSBzaWduIHRvIHJlc3VsdFxuICogQHBhcmFtIHtudW1iZXJ9IC0gYmFzZSB0aGUgYmFzZSBudW1iZXJcbiAqIEBwYXJhbSB7bnVtYmVyfSAtIGV4cCB0aGUgZXhwb25lbnRcbiAqIEByZXR1cm5zIG51bWJlclxuICovXG5mdW5jdGlvbiBzcG93IChiYXNlLCBleHApIHtcblx0cmV0dXJuIGNvcHlTaWduKE1hdGguYWJzKGJhc2UpICoqIGV4cCwgYmFzZSk7XG59XG5cbi8qKlxuICogUGVyZm9ybSBhIGRpdmlkZSwgYnV0IHJldHVybiB6ZXJvIGlmIHRoZSBudW1lcmF0b3IgaXMgemVyb1xuICogQHBhcmFtIHtudW1iZXJ9IG4gLSB0aGUgbnVtZXJhdG9yXG4gKiBAcGFyYW0ge251bWJlcn0gZCAtIHRoZSBkZW5vbWluYXRvclxuICogQHJldHVybnMgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIHpkaXYgKG4sIGQpIHtcblx0cmV0dXJuIChkID09PSAwKSA/IDAgOiBuIC8gZDtcbn1cblxuLyoqXG4gKiBQZXJmb3JtIGEgYmlzZWN0IG9uIGEgc29ydGVkIGxpc3QgYW5kIGxvY2F0ZSB0aGUgaW5zZXJ0aW9uIHBvaW50IGZvclxuICogYSB2YWx1ZSBpbiBhcnIgdG8gbWFpbnRhaW4gc29ydGVkIG9yZGVyLlxuICogQHBhcmFtIHtudW1iZXJbXX0gYXJyIC0gYXJyYXkgb2Ygc29ydGVkIG51bWJlcnNcbiAqIEBwYXJhbSB7bnVtYmVyfSB2YWx1ZSAtIHZhbHVlIHRvIGZpbmQgaW5zZXJ0aW9uIHBvaW50IGZvclxuICogQHBhcmFtIHtudW1iZXJ9IGxvIC0gdXNlZCB0byBzcGVjaWZ5IGEgdGhlIGxvdyBlbmQgb2YgYSBzdWJzZXQgb2YgdGhlIGxpc3RcbiAqIEBwYXJhbSB7bnVtYmVyfSBoaSAtIHVzZWQgdG8gc3BlY2lmeSBhIHRoZSBoaWdoIGVuZCBvZiBhIHN1YnNldCBvZiB0aGUgbGlzdFxuICogQHJldHVybnMgbnVtYmVyXG4gKi9cbmZ1bmN0aW9uIGJpc2VjdExlZnQgKGFyciwgdmFsdWUsIGxvID0gMCwgaGkgPSBhcnIubGVuZ3RoKSB7XG5cdHdoaWxlIChsbyA8IGhpKSB7XG5cdFx0Y29uc3QgbWlkID0gKGxvICsgaGkpID4+IDE7XG5cdFx0aWYgKGFyclttaWRdIDwgdmFsdWUpIHtcblx0XHRcdGxvID0gbWlkICsgMTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRoaSA9IG1pZDtcblx0XHR9XG5cdH1cblx0cmV0dXJuIGxvO1xufVxuXG52YXIgdXRpbCA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRiaXNlY3RMZWZ0OiBiaXNlY3RMZWZ0LFxuXHRjbGFtcDogY2xhbXAsXG5cdGNvcHlTaWduOiBjb3B5U2lnbixcblx0aW50ZXJwb2xhdGU6IGludGVycG9sYXRlLFxuXHRpbnRlcnBvbGF0ZUludjogaW50ZXJwb2xhdGVJbnYsXG5cdGlzTm9uZTogaXNOb25lLFxuXHRpc1N0cmluZzogaXNTdHJpbmcsXG5cdGxhc3Q6IGxhc3QsXG5cdG1hcFJhbmdlOiBtYXBSYW5nZSxcblx0bXVsdGlwbHlNYXRyaWNlczogbXVsdGlwbHlNYXRyaWNlcyxcblx0cGFyc2VDb29yZEdyYW1tYXI6IHBhcnNlQ29vcmRHcmFtbWFyLFxuXHRwYXJzZUZ1bmN0aW9uOiBwYXJzZUZ1bmN0aW9uLFxuXHRzZXJpYWxpemVOdW1iZXI6IHNlcmlhbGl6ZU51bWJlcixcblx0c2tpcE5vbmU6IHNraXBOb25lLFxuXHRzcG93OiBzcG93LFxuXHR0b1ByZWNpc2lvbjogdG9QcmVjaXNpb24sXG5cdHR5cGU6IHR5cGUsXG5cdHpkaXY6IHpkaXZcbn0pO1xuXG4vKipcbiAqIEEgY2xhc3MgZm9yIGFkZGluZyBkZWVwIGV4dGVuc2liaWxpdHkgdG8gYW55IHBpZWNlIG9mIEpTIGNvZGVcbiAqL1xuY2xhc3MgSG9va3Mge1xuXHRhZGQgKG5hbWUsIGNhbGxiYWNrLCBmaXJzdCkge1xuXHRcdGlmICh0eXBlb2YgYXJndW1lbnRzWzBdICE9IFwic3RyaW5nXCIpIHtcblx0XHRcdC8vIE11bHRpcGxlIGhvb2tzXG5cdFx0XHRmb3IgKHZhciBuYW1lIGluIGFyZ3VtZW50c1swXSkge1xuXHRcdFx0XHR0aGlzLmFkZChuYW1lLCBhcmd1bWVudHNbMF1bbmFtZV0sIGFyZ3VtZW50c1sxXSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQoQXJyYXkuaXNBcnJheShuYW1lKSA/IG5hbWUgOiBbbmFtZV0pLmZvckVhY2goZnVuY3Rpb24gKG5hbWUpIHtcblx0XHRcdHRoaXNbbmFtZV0gPSB0aGlzW25hbWVdIHx8IFtdO1xuXG5cdFx0XHRpZiAoY2FsbGJhY2spIHtcblx0XHRcdFx0dGhpc1tuYW1lXVtmaXJzdCA/IFwidW5zaGlmdFwiIDogXCJwdXNoXCJdKGNhbGxiYWNrKTtcblx0XHRcdH1cblx0XHR9LCB0aGlzKTtcblx0fVxuXG5cdHJ1biAobmFtZSwgZW52KSB7XG5cdFx0dGhpc1tuYW1lXSA9IHRoaXNbbmFtZV0gfHwgW107XG5cdFx0dGhpc1tuYW1lXS5mb3JFYWNoKGZ1bmN0aW9uIChjYWxsYmFjaykge1xuXHRcdFx0Y2FsbGJhY2suY2FsbChlbnYgJiYgZW52LmNvbnRleHQgPyBlbnYuY29udGV4dCA6IGVudiwgZW52KTtcblx0XHR9KTtcblx0fVxufVxuXG4vKipcbiAqIFRoZSBpbnN0YW5jZSBvZiB7QGxpbmsgSG9va3N9IHVzZWQgdGhyb3VnaG91dCBDb2xvci5qc1xuICovXG5jb25zdCBob29rcyA9IG5ldyBIb29rcygpO1xuXG4vLyBHbG9iYWwgZGVmYXVsdHMgb25lIG1heSB3YW50IHRvIGNvbmZpZ3VyZVxudmFyIGRlZmF1bHRzID0ge1xuXHRnYW11dF9tYXBwaW5nOiBcImNzc1wiLFxuXHRwcmVjaXNpb246IDUsXG5cdGRlbHRhRTogXCI3NlwiLCAvLyBEZWZhdWx0IGRlbHRhRSBtZXRob2Rcblx0dmVyYm9zZTogZ2xvYmFsVGhpcz8ucHJvY2Vzcz8uZW52Py5OT0RFX0VOVj8udG9Mb3dlckNhc2UoKSAhPT0gXCJ0ZXN0XCIsXG5cdHdhcm46IGZ1bmN0aW9uIHdhcm4gKG1zZykge1xuXHRcdGlmICh0aGlzLnZlcmJvc2UpIHtcblx0XHRcdGdsb2JhbFRoaXM/LmNvbnNvbGU/Lndhcm4/Lihtc2cpO1xuXHRcdH1cblx0fSxcbn07XG5cbmNvbnN0IFdISVRFUyA9IHtcblx0Ly8gZm9yIGNvbXBhdGliaWxpdHksIHRoZSBmb3VyLWRpZ2l0IGNocm9tYXRpY2l0eS1kZXJpdmVkIG9uZXMgZXZlcnlvbmUgZWxzZSB1c2VzXG5cdEQ1MDogWzAuMzQ1NyAvIDAuMzU4NSwgMS4wMDAwMCwgKDEuMCAtIDAuMzQ1NyAtIDAuMzU4NSkgLyAwLjM1ODVdLFxuXHRENjU6IFswLjMxMjcgLyAwLjMyOTAsIDEuMDAwMDAsICgxLjAgLSAwLjMxMjcgLSAwLjMyOTApIC8gMC4zMjkwXSxcbn07XG5cbmZ1bmN0aW9uIGdldFdoaXRlIChuYW1lKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KG5hbWUpKSB7XG5cdFx0cmV0dXJuIG5hbWU7XG5cdH1cblxuXHRyZXR1cm4gV0hJVEVTW25hbWVdO1xufVxuXG4vLyBBZGFwdCBYWVogZnJvbSB3aGl0ZSBwb2ludCBXMSB0byBXMlxuZnVuY3Rpb24gYWRhcHQkMiAoVzEsIFcyLCBYWVosIG9wdGlvbnMgPSB7fSkge1xuXHRXMSA9IGdldFdoaXRlKFcxKTtcblx0VzIgPSBnZXRXaGl0ZShXMik7XG5cblx0aWYgKCFXMSB8fCAhVzIpIHtcblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBNaXNzaW5nIHdoaXRlIHBvaW50IHRvIGNvbnZlcnQgJHshVzEgPyBcImZyb21cIiA6IFwiXCJ9JHshVzEgJiYgIVcyID8gXCIvXCIgOiBcIlwifSR7IVcyID8gXCJ0b1wiIDogXCJcIn1gKTtcblx0fVxuXG5cdGlmIChXMSA9PT0gVzIpIHtcblx0XHQvLyBTYW1lIHdoaXRlcG9pbnRzLCBubyBjb252ZXJzaW9uIG5lZWRlZFxuXHRcdHJldHVybiBYWVo7XG5cdH1cblxuXHRsZXQgZW52ID0ge1cxLCBXMiwgWFlaLCBvcHRpb25zfTtcblxuXHRob29rcy5ydW4oXCJjaHJvbWF0aWMtYWRhcHRhdGlvbi1zdGFydFwiLCBlbnYpO1xuXG5cdGlmICghZW52Lk0pIHtcblx0XHRpZiAoZW52LlcxID09PSBXSElURVMuRDY1ICYmIGVudi5XMiA9PT0gV0hJVEVTLkQ1MCkge1xuXHRcdFx0ZW52Lk0gPSBbXG5cdFx0XHRcdFsgMS4wNDc5Mjk3OTI1NDQ5OTY5LCAwLjAyMjk0Njg3MDYwMTYwOTY1MiwgLTAuMDUwMTkyMjY2Mjg5MjA1MjQgXSxcblx0XHRcdFx0WyAwLjAyOTYyNzgwODc3MDA1NTk5LCAwLjk5MDQzNDQyNjc1Mzg3OTksIC0wLjAxNzA3Mzc5OTA2MzQxODgyNiBdLFxuXHRcdFx0XHRbIC0wLjAwOTI0MzA0MDY0NjIwNDUwNCwgMC4wMTUwNTUxOTE0OTAyOTgxNTIsIDAuNzUxODc0MjgxNDI4MTM3MSBdLFxuXHRcdFx0XTtcblx0XHR9XG5cdFx0ZWxzZSBpZiAoZW52LlcxID09PSBXSElURVMuRDUwICYmIGVudi5XMiA9PT0gV0hJVEVTLkQ2NSkge1xuXG5cdFx0XHRlbnYuTSA9IFtcblx0XHRcdFx0WyAwLjk1NTQ3MzQyMTQ4ODA3NSwgLTAuMDIzMDk4NDU0OTQ4NzY0NzEsIDAuMDYzMjU5MjQzMjAwNTcwNzIgXSxcblx0XHRcdFx0WyAtMC4wMjgzNjk3MDkzMzM4NjM3LCAxLjAwOTk5NTM5ODA4MTMwNDEsIDAuMDIxMDQxNDQxMTkxOTE3MzIzIF0sXG5cdFx0XHRcdFsgMC4wMTIzMTQwMTQ4NjQ0ODE5OTgsIC0wLjAyMDUwNzY0OTI5ODg5ODk2NCwgMS4zMzAzNjU5MjYyNDIxMjQgXSxcblx0XHRcdF07XG5cdFx0fVxuXHR9XG5cblx0aG9va3MucnVuKFwiY2hyb21hdGljLWFkYXB0YXRpb24tZW5kXCIsIGVudik7XG5cblx0aWYgKGVudi5NKSB7XG5cdFx0cmV0dXJuIG11bHRpcGx5TWF0cmljZXMoZW52Lk0sIGVudi5YWVopO1xuXHR9XG5cdGVsc2Uge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJPbmx5IEJyYWRmb3JkIENBVCB3aXRoIHdoaXRlIHBvaW50cyBENTAgYW5kIEQ2NSBzdXBwb3J0ZWQgZm9yIG5vdy5cIik7XG5cdH1cbn1cblxuY29uc3Qgbm9uZVR5cGVzID0gbmV3IFNldChbXCI8bnVtYmVyPlwiLCBcIjxwZXJjZW50YWdlPlwiLCBcIjxhbmdsZT5cIl0pO1xuXG4vKipcbiAqIFZhbGlkYXRlcyB0aGUgY29vcmRpbmF0ZXMgb2YgYSBjb2xvciBhZ2FpbnN0IGEgZm9ybWF0J3MgY29vcmQgZ3JhbW1hciBhbmRcbiAqIG1hcHMgdGhlIGNvb3JkaW5hdGVzIHRvIHRoZSByYW5nZSBvciByZWZSYW5nZSBvZiB0aGUgY29vcmRpbmF0ZXMuXG4gKiBAcGFyYW0ge0NvbG9yU3BhY2V9IHNwYWNlIC0gQ29sb3JzcGFjZSB0aGUgY29vcmRzIGFyZSBpblxuICogQHBhcmFtIHtvYmplY3R9IGZvcm1hdCAtIHRoZSBmb3JtYXQgb2JqZWN0IHRvIHZhbGlkYXRlIGFnYWluc3RcbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIC0gdGhlIG5hbWUgb2YgdGhlIGNvbG9yIGZ1bmN0aW9uLiBlLmcuIFwib2tsYWJcIiBvciBcImNvbG9yXCJcbiAqIEByZXR1cm5zIHtvYmplY3RbXX0gLSBhbiBhcnJheSBvZiB0eXBlIG1ldGFkYXRhIGZvciBlYWNoIGNvb3JkaW5hdGVcbiAqL1xuZnVuY3Rpb24gY29lcmNlQ29vcmRzIChzcGFjZSwgZm9ybWF0LCBuYW1lLCBjb29yZHMpIHtcblx0bGV0IHR5cGVzID0gT2JqZWN0LmVudHJpZXMoc3BhY2UuY29vcmRzKS5tYXAoKFtpZCwgY29vcmRNZXRhXSwgaSkgPT4ge1xuXHRcdGxldCBjb29yZEdyYW1tYXIgPSBmb3JtYXQuY29vcmRHcmFtbWFyW2ldO1xuXHRcdGxldCBhcmcgPSBjb29yZHNbaV07XG5cdFx0bGV0IHByb3ZpZGVkVHlwZSA9IGFyZz8udHlwZTtcblxuXHRcdC8vIEZpbmQgZ3JhbW1hciBhbHRlcm5hdGl2ZSB0aGF0IG1hdGNoZXMgdGhlIHByb3ZpZGVkIHR5cGVcblx0XHQvLyBOb24tc3RyaWN0IGVxdWFscyBpcyBpbnRlbnRpb25hbCBiZWNhdXNlIHdlIGFyZSBjb21wYXJpbmcgdy8gc3RyaW5nIG9iamVjdHNcblx0XHRsZXQgdHlwZTtcblx0XHRpZiAoYXJnLm5vbmUpIHtcblx0XHRcdHR5cGUgPSBjb29yZEdyYW1tYXIuZmluZChjID0+IG5vbmVUeXBlcy5oYXMoYykpO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHR5cGUgPSBjb29yZEdyYW1tYXIuZmluZChjID0+IGMgPT0gcHJvdmlkZWRUeXBlKTtcblx0XHR9XG5cblx0XHQvLyBDaGVjayB0aGF0IGVhY2ggY29vcmQgY29uZm9ybXMgdG8gaXRzIGdyYW1tYXJcblx0XHRpZiAoIXR5cGUpIHtcblx0XHRcdC8vIFR5cGUgZG9lcyBub3QgZXhpc3QgaW4gdGhlIGdyYW1tYXIsIHRocm93XG5cdFx0XHRsZXQgY29vcmROYW1lID0gY29vcmRNZXRhLm5hbWUgfHwgaWQ7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke3Byb3ZpZGVkVHlwZSA/PyBhcmcucmF3fSBub3QgYWxsb3dlZCBmb3IgJHtjb29yZE5hbWV9IGluICR7bmFtZX0oKWApO1xuXHRcdH1cblxuXHRcdGxldCBmcm9tUmFuZ2UgPSB0eXBlLnJhbmdlO1xuXG5cdFx0aWYgKHByb3ZpZGVkVHlwZSA9PT0gXCI8cGVyY2VudGFnZT5cIikge1xuXHRcdFx0ZnJvbVJhbmdlIHx8PSBbMCwgMV07XG5cdFx0fVxuXG5cdFx0bGV0IHRvUmFuZ2UgPSBjb29yZE1ldGEucmFuZ2UgfHwgY29vcmRNZXRhLnJlZlJhbmdlO1xuXG5cdFx0aWYgKGZyb21SYW5nZSAmJiB0b1JhbmdlKSB7XG5cdFx0XHRjb29yZHNbaV0gPSBtYXBSYW5nZShmcm9tUmFuZ2UsIHRvUmFuZ2UsIGNvb3Jkc1tpXSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHR5cGU7XG5cdH0pO1xuXG5cdHJldHVybiB0eXBlcztcbn1cblxuXG4vKipcbiAqIENvbnZlcnQgYSBDU1MgQ29sb3Igc3RyaW5nIHRvIGEgY29sb3Igb2JqZWN0XG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnMubWV0YV0gLSBPYmplY3QgZm9yIGFkZGl0aW9uYWwgaW5mb3JtYXRpb24gYWJvdXQgdGhlIHBhcnNpbmdcbiAqIEByZXR1cm5zIHtDb2xvcn1cbiAqL1xuZnVuY3Rpb24gcGFyc2UgKHN0ciwge21ldGF9ID0ge30pIHtcblx0bGV0IGVudiA9IHtcInN0clwiOiBTdHJpbmcoc3RyKT8udHJpbSgpfTtcblx0aG9va3MucnVuKFwicGFyc2Utc3RhcnRcIiwgZW52KTtcblxuXHRpZiAoZW52LmNvbG9yKSB7XG5cdFx0cmV0dXJuIGVudi5jb2xvcjtcblx0fVxuXG5cdGVudi5wYXJzZWQgPSBwYXJzZUZ1bmN0aW9uKGVudi5zdHIpO1xuXG5cdGlmIChlbnYucGFyc2VkKSB7XG5cdFx0Ly8gSXMgYSBmdW5jdGlvbmFsIHN5bnRheFxuXHRcdGxldCBuYW1lID0gZW52LnBhcnNlZC5uYW1lO1xuXG5cdFx0aWYgKG5hbWUgPT09IFwiY29sb3JcIikge1xuXHRcdFx0Ly8gY29sb3IoKSBmdW5jdGlvblxuXHRcdFx0bGV0IGlkID0gZW52LnBhcnNlZC5hcmdzLnNoaWZ0KCk7XG5cdFx0XHQvLyBDaGVjayBhZ2FpbnN0IGJvdGggPGRhc2hlZC1pZGVudD4gYW5kIDxpZGVudD4gdmVyc2lvbnNcblx0XHRcdGxldCBhbHRlcm5hdGVJZCA9IGlkLnN0YXJ0c1dpdGgoXCItLVwiKSA/IGlkLnN1YnN0cmluZygyKSA6IGAtLSR7aWR9YDtcblx0XHRcdGxldCBpZHMgPSBbaWQsIGFsdGVybmF0ZUlkXTtcblx0XHRcdGxldCBhbHBoYSA9IGVudi5wYXJzZWQucmF3QXJncy5pbmRleE9mKFwiL1wiKSA+IDAgPyBlbnYucGFyc2VkLmFyZ3MucG9wKCkgOiAxO1xuXG5cdFx0XHRmb3IgKGxldCBzcGFjZSBvZiBDb2xvclNwYWNlLmFsbCkge1xuXHRcdFx0XHRsZXQgY29sb3JTcGVjID0gc3BhY2UuZ2V0Rm9ybWF0KFwiY29sb3JcIik7XG5cblx0XHRcdFx0aWYgKGNvbG9yU3BlYykge1xuXHRcdFx0XHRcdGlmIChpZHMuaW5jbHVkZXMoY29sb3JTcGVjLmlkKSB8fCBjb2xvclNwZWMuaWRzPy5maWx0ZXIoKHNwZWNJZCkgPT4gaWRzLmluY2x1ZGVzKHNwZWNJZCkpLmxlbmd0aCkge1xuXHRcdFx0XHRcdFx0Ly8gRnJvbSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLTQvI2NvbG9yLWZ1bmN0aW9uXG5cdFx0XHRcdFx0XHQvLyBJZiBtb3JlIDxudW1iZXI+cyBvciA8cGVyY2VudGFnZT5zIGFyZSBwcm92aWRlZCB0aGFuIHBhcmFtZXRlcnMgdGhhdCB0aGUgY29sb3JzcGFjZSB0YWtlcywgdGhlIGV4Y2VzcyA8bnVtYmVyPnMgYXQgdGhlIGVuZCBhcmUgaWdub3JlZC5cblx0XHRcdFx0XHRcdC8vIElmIGxlc3MgPG51bWJlcj5zIG9yIDxwZXJjZW50YWdlPnMgYXJlIHByb3ZpZGVkIHRoYW4gcGFyYW1ldGVycyB0aGF0IHRoZSBjb2xvcnNwYWNlIHRha2VzLCB0aGUgbWlzc2luZyBwYXJhbWV0ZXJzIGRlZmF1bHQgdG8gMC4gKFRoaXMgaXMgcGFydGljdWxhcmx5IGNvbnZlbmllbnQgZm9yIG11bHRpY2hhbm5lbCBwcmludGVycyB3aGVyZSB0aGUgYWRkaXRpb25hbCBpbmtzIGFyZSBzcG90IGNvbG9ycyBvciB2YXJuaXNoZXMgdGhhdCBtb3N0IGNvbG9ycyBvbiB0aGUgcGFnZSB3b27igJl0IHVzZS4pXG5cdFx0XHRcdFx0XHRjb25zdCBjb29yZHMgPSBPYmplY3Qua2V5cyhzcGFjZS5jb29yZHMpLm1hcCgoXywgaSkgPT4gZW52LnBhcnNlZC5hcmdzW2ldIHx8IDApO1xuXG5cdFx0XHRcdFx0XHRsZXQgdHlwZXM7XG5cblx0XHRcdFx0XHRcdGlmIChjb2xvclNwZWMuY29vcmRHcmFtbWFyKSB7XG5cdFx0XHRcdFx0XHRcdHR5cGVzID0gY29lcmNlQ29vcmRzKHNwYWNlLCBjb2xvclNwZWMsIFwiY29sb3JcIiwgY29vcmRzKTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKG1ldGEpIHtcblx0XHRcdFx0XHRcdFx0T2JqZWN0LmFzc2lnbihtZXRhLCB7Zm9ybWF0SWQ6IFwiY29sb3JcIiwgdHlwZXN9KTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0aWYgKGNvbG9yU3BlYy5pZC5zdGFydHNXaXRoKFwiLS1cIikgJiYgIWlkLnN0YXJ0c1dpdGgoXCItLVwiKSkge1xuXHRcdFx0XHRcdFx0XHRkZWZhdWx0cy53YXJuKGAke3NwYWNlLm5hbWV9IGlzIGEgbm9uLXN0YW5kYXJkIHNwYWNlIGFuZCBub3QgY3VycmVudGx5IHN1cHBvcnRlZCBpbiB0aGUgQ1NTIHNwZWMuIGAgK1xuXHRcdFx0XHRcdFx0XHQgICAgICAgICAgICAgIGBVc2UgcHJlZml4ZWQgY29sb3IoJHtjb2xvclNwZWMuaWR9KSBpbnN0ZWFkIG9mIGNvbG9yKCR7aWR9KS5gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmIChpZC5zdGFydHNXaXRoKFwiLS1cIikgJiYgIWNvbG9yU3BlYy5pZC5zdGFydHNXaXRoKFwiLS1cIikpIHtcblx0XHRcdFx0XHRcdFx0ZGVmYXVsdHMud2FybihgJHtzcGFjZS5uYW1lfSBpcyBhIHN0YW5kYXJkIHNwYWNlIGFuZCBzdXBwb3J0ZWQgaW4gdGhlIENTUyBzcGVjLiBgICtcblx0XHRcdFx0XHRcdFx0ICAgICAgICAgICAgICBgVXNlIGNvbG9yKCR7Y29sb3JTcGVjLmlkfSkgaW5zdGVhZCBvZiBwcmVmaXhlZCBjb2xvcigke2lkfSkuYCk7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdHJldHVybiB7c3BhY2VJZDogc3BhY2UuaWQsIGNvb3JkcywgYWxwaGF9O1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBOb3QgZm91bmRcblx0XHRcdGxldCBkaWRZb3VNZWFuID0gXCJcIjtcblx0XHRcdGxldCByZWdpc3RyeUlkID0gaWQgaW4gQ29sb3JTcGFjZS5yZWdpc3RyeSA/IGlkIDogYWx0ZXJuYXRlSWQ7XG5cdFx0XHRpZiAocmVnaXN0cnlJZCBpbiBDb2xvclNwYWNlLnJlZ2lzdHJ5KSB7XG5cdFx0XHRcdC8vIFVzZWQgY29sb3Igc3BhY2UgaWQgaW5zdGVhZCBvZiBjb2xvcigpIGlkLCB0aGVzZSBhcmUgb2Z0ZW4gZGlmZmVyZW50XG5cdFx0XHRcdGxldCBjc3NJZCA9IENvbG9yU3BhY2UucmVnaXN0cnlbcmVnaXN0cnlJZF0uZm9ybWF0cz8uY29sb3I/LmlkO1xuXG5cdFx0XHRcdGlmIChjc3NJZCkge1xuXHRcdFx0XHRcdGRpZFlvdU1lYW4gPSBgRGlkIHlvdSBtZWFuIGNvbG9yKCR7Y3NzSWR9KT9gO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYENhbm5vdCBwYXJzZSBjb2xvcigke2lkfSkuIGAgKyAoZGlkWW91TWVhbiB8fCBcIk1pc3NpbmcgYSBwbHVnaW4/XCIpKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRmb3IgKGxldCBzcGFjZSBvZiBDb2xvclNwYWNlLmFsbCkge1xuXHRcdFx0XHQvLyBjb2xvciBzcGFjZSBzcGVjaWZpYyBmdW5jdGlvblxuXHRcdFx0XHRsZXQgZm9ybWF0ID0gc3BhY2UuZ2V0Rm9ybWF0KG5hbWUpO1xuXHRcdFx0XHRpZiAoZm9ybWF0ICYmIGZvcm1hdC50eXBlID09PSBcImZ1bmN0aW9uXCIpIHtcblx0XHRcdFx0XHRsZXQgYWxwaGEgPSAxO1xuXG5cdFx0XHRcdFx0aWYgKGZvcm1hdC5sYXN0QWxwaGEgfHwgbGFzdChlbnYucGFyc2VkLmFyZ3MpLmFscGhhKSB7XG5cdFx0XHRcdFx0XHRhbHBoYSA9IGVudi5wYXJzZWQuYXJncy5wb3AoKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRsZXQgY29vcmRzID0gZW52LnBhcnNlZC5hcmdzO1xuXG5cdFx0XHRcdFx0bGV0IHR5cGVzO1xuXG5cdFx0XHRcdFx0aWYgKGZvcm1hdC5jb29yZEdyYW1tYXIpIHtcblx0XHRcdFx0XHRcdHR5cGVzID0gY29lcmNlQ29vcmRzKHNwYWNlLCBmb3JtYXQsIG5hbWUsIGNvb3Jkcyk7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0aWYgKG1ldGEpIHtcblx0XHRcdFx0XHRcdE9iamVjdC5hc3NpZ24obWV0YSwge2Zvcm1hdElkOiBmb3JtYXQubmFtZSwgdHlwZXN9KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0c3BhY2VJZDogc3BhY2UuaWQsXG5cdFx0XHRcdFx0XHRjb29yZHMsIGFscGhhLFxuXHRcdFx0XHRcdH07XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gQ3VzdG9tLCBjb2xvcnNwYWNlLXNwZWNpZmljIGZvcm1hdFxuXHRcdGZvciAobGV0IHNwYWNlIG9mIENvbG9yU3BhY2UuYWxsKSB7XG5cdFx0XHRmb3IgKGxldCBmb3JtYXRJZCBpbiBzcGFjZS5mb3JtYXRzKSB7XG5cdFx0XHRcdGxldCBmb3JtYXQgPSBzcGFjZS5mb3JtYXRzW2Zvcm1hdElkXTtcblxuXHRcdFx0XHRpZiAoZm9ybWF0LnR5cGUgIT09IFwiY3VzdG9tXCIpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChmb3JtYXQudGVzdCAmJiAhZm9ybWF0LnRlc3QoZW52LnN0cikpIHtcblx0XHRcdFx0XHRjb250aW51ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGxldCBjb2xvciA9IGZvcm1hdC5wYXJzZShlbnYuc3RyKTtcblxuXHRcdFx0XHRpZiAoY29sb3IpIHtcblx0XHRcdFx0XHRjb2xvci5hbHBoYSA/Pz0gMTtcblxuXHRcdFx0XHRcdGlmIChtZXRhKSB7XG5cdFx0XHRcdFx0XHRtZXRhLmZvcm1hdElkID0gZm9ybWF0SWQ7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGNvbG9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblxuXHQvLyBJZiB3ZSdyZSBoZXJlLCB3ZSBjb3VsZG4ndCBwYXJzZVxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKGBDb3VsZCBub3QgcGFyc2UgJHtzdHJ9IGFzIGEgY29sb3IuIE1pc3NpbmcgYSBwbHVnaW4/YCk7XG59XG5cbi8qKlxuICogUmVzb2x2ZXMgYSBjb2xvciByZWZlcmVuY2UgKG9iamVjdCBvciBzdHJpbmcpIHRvIGEgcGxhaW4gY29sb3Igb2JqZWN0XG4gKiBAcGFyYW0ge0NvbG9yIHwge3NwYWNlLCBjb29yZHMsIGFscGhhfSB8IHN0cmluZyB8IEFycmF5PENvbG9yIHwge3NwYWNlLCBjb29yZHMsIGFscGhhfSB8IHN0cmluZz4gfSBjb2xvclxuICogQHJldHVybnMge3tzcGFjZSwgY29vcmRzLCBhbHBoYX0gfCBBcnJheTx7c3BhY2UsIGNvb3JkcywgYWxwaGF9fT5cbiAqL1xuZnVuY3Rpb24gZ2V0Q29sb3IgKGNvbG9yKSB7XG5cdGlmIChBcnJheS5pc0FycmF5KGNvbG9yKSkge1xuXHRcdHJldHVybiBjb2xvci5tYXAoZ2V0Q29sb3IpO1xuXHR9XG5cblx0aWYgKCFjb2xvcikge1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoXCJFbXB0eSBjb2xvciByZWZlcmVuY2VcIik7XG5cdH1cblxuXHRpZiAoaXNTdHJpbmcoY29sb3IpKSB7XG5cdFx0Y29sb3IgPSBwYXJzZShjb2xvcik7XG5cdH1cblxuXHQvLyBPYmplY3QgZml4dXBcblx0bGV0IHNwYWNlID0gY29sb3Iuc3BhY2UgfHwgY29sb3Iuc3BhY2VJZDtcblxuXHRpZiAoIShzcGFjZSBpbnN0YW5jZW9mIENvbG9yU3BhY2UpKSB7XG5cdFx0Ly8gQ29udmVydCBzdHJpbmcgaWQgdG8gY29sb3Igc3BhY2Ugb2JqZWN0XG5cdFx0Y29sb3Iuc3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG5cdH1cblxuXHRpZiAoY29sb3IuYWxwaGEgPT09IHVuZGVmaW5lZCkge1xuXHRcdGNvbG9yLmFscGhhID0gMTtcblx0fVxuXG5cdHJldHVybiBjb2xvcjtcbn1cblxuY29uc3QgzrUkNyA9IC4wMDAwNzU7XG5cbi8qKlxuICogQ2xhc3MgdG8gcmVwcmVzZW50IGEgY29sb3Igc3BhY2VcbiAqL1xuY2xhc3MgQ29sb3JTcGFjZSB7XG5cdGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG5cdFx0dGhpcy5pZCA9IG9wdGlvbnMuaWQ7XG5cdFx0dGhpcy5uYW1lID0gb3B0aW9ucy5uYW1lO1xuXHRcdHRoaXMuYmFzZSA9IG9wdGlvbnMuYmFzZSA/IENvbG9yU3BhY2UuZ2V0KG9wdGlvbnMuYmFzZSkgOiBudWxsO1xuXHRcdHRoaXMuYWxpYXNlcyA9IG9wdGlvbnMuYWxpYXNlcztcblxuXHRcdGlmICh0aGlzLmJhc2UpIHtcblx0XHRcdHRoaXMuZnJvbUJhc2UgPSBvcHRpb25zLmZyb21CYXNlO1xuXHRcdFx0dGhpcy50b0Jhc2UgPSBvcHRpb25zLnRvQmFzZTtcblx0XHR9XG5cblx0XHQvLyBDb29yZGluYXRlIG1ldGFkYXRhXG5cblx0XHRsZXQgY29vcmRzID0gb3B0aW9ucy5jb29yZHMgPz8gdGhpcy5iYXNlLmNvb3JkcztcblxuXHRcdGZvciAobGV0IG5hbWUgaW4gY29vcmRzKSB7XG5cdFx0XHRpZiAoIShcIm5hbWVcIiBpbiBjb29yZHNbbmFtZV0pKSB7XG5cdFx0XHRcdGNvb3Jkc1tuYW1lXS5uYW1lID0gbmFtZTtcblx0XHRcdH1cblx0XHR9XG5cdFx0dGhpcy5jb29yZHMgPSBjb29yZHM7XG5cblx0XHQvLyBXaGl0ZSBwb2ludFxuXG5cdFx0bGV0IHdoaXRlID0gb3B0aW9ucy53aGl0ZSA/PyB0aGlzLmJhc2Uud2hpdGUgPz8gXCJENjVcIjtcblx0XHR0aGlzLndoaXRlID0gZ2V0V2hpdGUod2hpdGUpO1xuXG5cdFx0Ly8gU29ydCBvdXQgZm9ybWF0c1xuXG5cdFx0dGhpcy5mb3JtYXRzID0gb3B0aW9ucy5mb3JtYXRzID8/IHt9O1xuXG5cdFx0Zm9yIChsZXQgbmFtZSBpbiB0aGlzLmZvcm1hdHMpIHtcblx0XHRcdGxldCBmb3JtYXQgPSB0aGlzLmZvcm1hdHNbbmFtZV07XG5cdFx0XHRmb3JtYXQudHlwZSB8fD0gXCJmdW5jdGlvblwiO1xuXHRcdFx0Zm9ybWF0Lm5hbWUgfHw9IG5hbWU7XG5cdFx0fVxuXG5cdFx0aWYgKCF0aGlzLmZvcm1hdHMuY29sb3I/LmlkKSB7XG5cdFx0XHR0aGlzLmZvcm1hdHMuY29sb3IgPSB7XG5cdFx0XHRcdC4uLnRoaXMuZm9ybWF0cy5jb2xvciA/PyB7fSxcblx0XHRcdFx0aWQ6IG9wdGlvbnMuY3NzSWQgfHwgdGhpcy5pZCxcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gR2FtdXQgc3BhY2VcblxuXHRcdGlmIChvcHRpb25zLmdhbXV0U3BhY2UpIHtcblx0XHRcdC8vIEdhbXV0IHNwYWNlIGV4cGxpY2l0bHkgc3BlY2lmaWVkXG5cdFx0XHR0aGlzLmdhbXV0U3BhY2UgPSBvcHRpb25zLmdhbXV0U3BhY2UgPT09IFwic2VsZlwiID8gdGhpcyA6IENvbG9yU3BhY2UuZ2V0KG9wdGlvbnMuZ2FtdXRTcGFjZSk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gTm8gZ2FtdXQgc3BhY2Ugc3BlY2lmaWVkLCBjYWxjdWxhdGUgYSBzZW5zaWJsZSBkZWZhdWx0XG5cdFx0XHRpZiAodGhpcy5pc1BvbGFyKSB7XG5cdFx0XHRcdC8vIERvIG5vdCBjaGVjayBnYW11dCB0aHJvdWdoIHBvbGFyIGNvb3JkaW5hdGVzXG5cdFx0XHRcdHRoaXMuZ2FtdXRTcGFjZSA9IHRoaXMuYmFzZTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHR0aGlzLmdhbXV0U3BhY2UgPSAgdGhpcztcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPcHRpbWl6ZSBpbkdhbXV0IGZvciB1bmJvdW5kZWQgc3BhY2VzXG5cdFx0aWYgKHRoaXMuZ2FtdXRTcGFjZS5pc1VuYm91bmRlZCkge1xuXHRcdFx0dGhpcy5pbkdhbXV0ID0gKGNvb3Jkcywgb3B0aW9ucykgPT4ge1xuXHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgc3R1ZmZcblx0XHR0aGlzLnJlZmVycmVkID0gb3B0aW9ucy5yZWZlcnJlZDtcblxuXHRcdC8vIENvbXB1dGUgYW5jZXN0b3JzIGFuZCBzdG9yZSB0aGVtLCBzaW5jZSB0aGV5IHdpbGwgbmV2ZXIgY2hhbmdlXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwicGF0aFwiLCB7XG5cdFx0XHR2YWx1ZTogZ2V0UGF0aCh0aGlzKS5yZXZlcnNlKCksXG5cdFx0XHR3cml0YWJsZTogZmFsc2UsXG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Y29uZmlndXJhYmxlOiB0cnVlLFxuXHRcdH0pO1xuXG5cdFx0aG9va3MucnVuKFwiY29sb3JzcGFjZS1pbml0LWVuZFwiLCB0aGlzKTtcblx0fVxuXG5cdGluR2FtdXQgKGNvb3Jkcywge2Vwc2lsb24gPSDOtSQ3fSA9IHt9KSB7XG5cdFx0aWYgKCF0aGlzLmVxdWFscyh0aGlzLmdhbXV0U3BhY2UpKSB7XG5cdFx0XHRjb29yZHMgPSB0aGlzLnRvKHRoaXMuZ2FtdXRTcGFjZSwgY29vcmRzKTtcblx0XHRcdHJldHVybiB0aGlzLmdhbXV0U3BhY2UuaW5HYW11dChjb29yZHMsIHtlcHNpbG9ufSk7XG5cdFx0fVxuXG5cdFx0bGV0IGNvb3JkTWV0YSA9IE9iamVjdC52YWx1ZXModGhpcy5jb29yZHMpO1xuXG5cdFx0cmV0dXJuIGNvb3Jkcy5ldmVyeSgoYywgaSkgPT4ge1xuXHRcdFx0bGV0IG1ldGEgPSBjb29yZE1ldGFbaV07XG5cblx0XHRcdGlmIChtZXRhLnR5cGUgIT09IFwiYW5nbGVcIiAmJiBtZXRhLnJhbmdlKSB7XG5cdFx0XHRcdGlmIChOdW1iZXIuaXNOYU4oYykpIHtcblx0XHRcdFx0XHQvLyBOYU4gaXMgYWx3YXlzIGluIGdhbXV0XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRsZXQgW21pbiwgbWF4XSA9IG1ldGEucmFuZ2U7XG5cdFx0XHRcdHJldHVybiAobWluID09PSB1bmRlZmluZWQgfHwgYyA+PSBtaW4gLSBlcHNpbG9uKVxuXHRcdFx0XHQgICAgJiYgKG1heCA9PT0gdW5kZWZpbmVkIHx8IGMgPD0gbWF4ICsgZXBzaWxvbik7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0pO1xuXHR9XG5cblx0Z2V0IGlzVW5ib3VuZGVkICgpIHtcblx0XHRyZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLmNvb3JkcykuZXZlcnkoY29vcmQgPT4gIShcInJhbmdlXCIgaW4gY29vcmQpKTtcblx0fVxuXG5cdGdldCBjc3NJZCAoKSB7XG5cdFx0cmV0dXJuIHRoaXMuZm9ybWF0cz8uY29sb3I/LmlkIHx8IHRoaXMuaWQ7XG5cdH1cblxuXHRnZXQgaXNQb2xhciAoKSB7XG5cdFx0Zm9yIChsZXQgaWQgaW4gdGhpcy5jb29yZHMpIHtcblx0XHRcdGlmICh0aGlzLmNvb3Jkc1tpZF0udHlwZSA9PT0gXCJhbmdsZVwiKSB7XG5cdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdGdldEZvcm1hdCAoZm9ybWF0KSB7XG5cdFx0aWYgKHR5cGVvZiBmb3JtYXQgPT09IFwib2JqZWN0XCIpIHtcblx0XHRcdGZvcm1hdCA9IHByb2Nlc3NGb3JtYXQoZm9ybWF0LCB0aGlzKTtcblx0XHRcdHJldHVybiBmb3JtYXQ7XG5cdFx0fVxuXG5cdFx0bGV0IHJldDtcblx0XHRpZiAoZm9ybWF0ID09PSBcImRlZmF1bHRcIikge1xuXHRcdFx0Ly8gR2V0IGZpcnN0IGZvcm1hdFxuXHRcdFx0cmV0ID0gT2JqZWN0LnZhbHVlcyh0aGlzLmZvcm1hdHMpWzBdO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdHJldCA9IHRoaXMuZm9ybWF0c1tmb3JtYXRdO1xuXHRcdH1cblxuXHRcdGlmIChyZXQpIHtcblx0XHRcdHJldCA9IHByb2Nlc3NGb3JtYXQocmV0LCB0aGlzKTtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG51bGw7XG5cdH1cblxuXHQvKipcblx0ICogQ2hlY2sgaWYgdGhpcyBjb2xvciBzcGFjZSBpcyB0aGUgc2FtZSBhcyBhbm90aGVyIGNvbG9yIHNwYWNlIHJlZmVyZW5jZS5cblx0ICogQWxsb3dzIHByb3h5aW5nIGNvbG9yIHNwYWNlIG9iamVjdHMgYW5kIGNvbXBhcmluZyBjb2xvciBzcGFjZXMgd2l0aCBpZHMuXG5cdCAqIEBwYXJhbSB7c3RyaW5nIHwgQ29sb3JTcGFjZX0gc3BhY2UgQ29sb3JTcGFjZSBvYmplY3Qgb3IgaWQgdG8gY29tcGFyZSB0b1xuXHQgKiBAcmV0dXJucyB7Ym9vbGVhbn1cblx0ICovXG5cdGVxdWFscyAoc3BhY2UpIHtcblx0XHRpZiAoIXNwYWNlKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMgPT09IHNwYWNlIHx8IHRoaXMuaWQgPT09IHNwYWNlIHx8IHRoaXMuaWQgPT09IHNwYWNlLmlkO1xuXHR9XG5cblx0dG8gKHNwYWNlLCBjb29yZHMpIHtcblx0XHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMSkge1xuXHRcdFx0Y29uc3QgY29sb3IgPSBnZXRDb2xvcihzcGFjZSk7XG5cdFx0XHRbc3BhY2UsIGNvb3Jkc10gPSBbY29sb3Iuc3BhY2UsIGNvbG9yLmNvb3Jkc107XG5cdFx0fVxuXG5cdFx0c3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG5cblx0XHRpZiAodGhpcy5lcXVhbHMoc3BhY2UpKSB7XG5cdFx0XHQvLyBTYW1lIHNwYWNlLCBubyBjaGFuZ2UgbmVlZGVkXG5cdFx0XHRyZXR1cm4gY29vcmRzO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgTmFOIHRvIDAsIHdoaWNoIHNlZW1zIHRvIGJlIHZhbGlkIGluIGV2ZXJ5IGNvb3JkaW5hdGUgb2YgZXZlcnkgY29sb3Igc3BhY2Vcblx0XHRjb29yZHMgPSBjb29yZHMubWFwKGMgPT4gTnVtYmVyLmlzTmFOKGMpID8gMCA6IGMpO1xuXG5cdFx0Ly8gRmluZCBjb25uZWN0aW9uIHNwYWNlID0gbG93ZXN0IGNvbW1vbiBhbmNlc3RvciBpbiB0aGUgYmFzZSB0cmVlXG5cdFx0bGV0IG15UGF0aCA9IHRoaXMucGF0aDtcblx0XHRsZXQgb3RoZXJQYXRoID0gc3BhY2UucGF0aDtcblxuXHRcdGxldCBjb25uZWN0aW9uU3BhY2UsIGNvbm5lY3Rpb25TcGFjZUluZGV4O1xuXG5cdFx0Zm9yIChsZXQgaSA9IDA7IGkgPCBteVBhdGgubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmIChteVBhdGhbaV0uZXF1YWxzKG90aGVyUGF0aFtpXSkpIHtcblx0XHRcdFx0Y29ubmVjdGlvblNwYWNlID0gbXlQYXRoW2ldO1xuXHRcdFx0XHRjb25uZWN0aW9uU3BhY2VJbmRleCA9IGk7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0aWYgKCFjb25uZWN0aW9uU3BhY2UpIHtcblx0XHRcdC8vIFRoaXMgc2hvdWxkIG5ldmVyIGhhcHBlblxuXHRcdFx0dGhyb3cgbmV3IEVycm9yKGBDYW5ub3QgY29udmVydCBiZXR3ZWVuIGNvbG9yIHNwYWNlcyAke3RoaXN9IGFuZCAke3NwYWNlfTogbm8gY29ubmVjdGlvbiBzcGFjZSB3YXMgZm91bmRgKTtcblx0XHR9XG5cblx0XHQvLyBHbyB1cCBmcm9tIGN1cnJlbnQgc3BhY2UgdG8gY29ubmVjdGlvbiBzcGFjZVxuXHRcdGZvciAobGV0IGkgPSBteVBhdGgubGVuZ3RoIC0gMTsgaSA+IGNvbm5lY3Rpb25TcGFjZUluZGV4OyBpLS0pIHtcblx0XHRcdGNvb3JkcyA9IG15UGF0aFtpXS50b0Jhc2UoY29vcmRzKTtcblx0XHR9XG5cblx0XHQvLyBHbyBkb3duIGZyb20gY29ubmVjdGlvbiBzcGFjZSB0byB0YXJnZXQgc3BhY2Vcblx0XHRmb3IgKGxldCBpID0gY29ubmVjdGlvblNwYWNlSW5kZXggKyAxOyBpIDwgb3RoZXJQYXRoLmxlbmd0aDsgaSsrKSB7XG5cdFx0XHRjb29yZHMgPSBvdGhlclBhdGhbaV0uZnJvbUJhc2UoY29vcmRzKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29vcmRzO1xuXHR9XG5cblx0ZnJvbSAoc3BhY2UsIGNvb3Jkcykge1xuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRjb25zdCBjb2xvciA9IGdldENvbG9yKHNwYWNlKTtcblx0XHRcdFtzcGFjZSwgY29vcmRzXSA9IFtjb2xvci5zcGFjZSwgY29sb3IuY29vcmRzXTtcblx0XHR9XG5cblx0XHRzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcblxuXHRcdHJldHVybiBzcGFjZS50byh0aGlzLCBjb29yZHMpO1xuXHR9XG5cblx0dG9TdHJpbmcgKCkge1xuXHRcdHJldHVybiBgJHt0aGlzLm5hbWV9ICgke3RoaXMuaWR9KWA7XG5cdH1cblxuXHRnZXRNaW5Db29yZHMgKCkge1xuXHRcdGxldCByZXQgPSBbXTtcblxuXHRcdGZvciAobGV0IGlkIGluIHRoaXMuY29vcmRzKSB7XG5cdFx0XHRsZXQgbWV0YSA9IHRoaXMuY29vcmRzW2lkXTtcblx0XHRcdGxldCByYW5nZSA9IG1ldGEucmFuZ2UgfHwgbWV0YS5yZWZSYW5nZTtcblx0XHRcdHJldC5wdXNoKHJhbmdlPy5taW4gPz8gMCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdHN0YXRpYyByZWdpc3RyeSA9IHt9O1xuXG5cdC8vIFJldHVybnMgYXJyYXkgb2YgdW5pcXVlIGNvbG9yIHNwYWNlc1xuXHRzdGF0aWMgZ2V0IGFsbCAoKSB7XG5cdFx0cmV0dXJuIFsuLi5uZXcgU2V0KE9iamVjdC52YWx1ZXMoQ29sb3JTcGFjZS5yZWdpc3RyeSkpXTtcblx0fVxuXG5cdHN0YXRpYyByZWdpc3RlciAoaWQsIHNwYWNlKSB7XG5cdFx0aWYgKGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcblx0XHRcdHNwYWNlID0gYXJndW1lbnRzWzBdO1xuXHRcdFx0aWQgPSBzcGFjZS5pZDtcblx0XHR9XG5cblx0XHRzcGFjZSA9IHRoaXMuZ2V0KHNwYWNlKTtcblxuXHRcdGlmICh0aGlzLnJlZ2lzdHJ5W2lkXSAmJiB0aGlzLnJlZ2lzdHJ5W2lkXSAhPT0gc3BhY2UpIHtcblx0XHRcdHRocm93IG5ldyBFcnJvcihgRHVwbGljYXRlIGNvbG9yIHNwYWNlIHJlZ2lzdHJhdGlvbjogJyR7aWR9J2ApO1xuXHRcdH1cblx0XHR0aGlzLnJlZ2lzdHJ5W2lkXSA9IHNwYWNlO1xuXG5cdFx0Ly8gUmVnaXN0ZXIgYWxpYXNlcyB3aGVuIGNhbGxlZCB3aXRob3V0IGFuIGV4cGxpY2l0IElELlxuXHRcdGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAxICYmIHNwYWNlLmFsaWFzZXMpIHtcblx0XHRcdGZvciAobGV0IGFsaWFzIG9mIHNwYWNlLmFsaWFzZXMpIHtcblx0XHRcdFx0dGhpcy5yZWdpc3RlcihhbGlhcywgc3BhY2UpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiBzcGFjZTtcblx0fVxuXG5cdC8qKlxuXHQgKiBMb29rdXAgQ29sb3JTcGFjZSBvYmplY3QgYnkgbmFtZVxuXHQgKiBAcGFyYW0ge0NvbG9yU3BhY2UgfCBzdHJpbmd9IG5hbWVcblx0ICovXG5cdHN0YXRpYyBnZXQgKHNwYWNlLCAuLi5hbHRlcm5hdGl2ZXMpIHtcblx0XHRpZiAoIXNwYWNlIHx8IHNwYWNlIGluc3RhbmNlb2YgQ29sb3JTcGFjZSkge1xuXHRcdFx0cmV0dXJuIHNwYWNlO1xuXHRcdH1cblxuXHRcdGxldCBhcmdUeXBlID0gdHlwZShzcGFjZSk7XG5cblx0XHRpZiAoYXJnVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0Ly8gSXQncyBhIGNvbG9yIHNwYWNlIGlkXG5cdFx0XHRsZXQgcmV0ID0gQ29sb3JTcGFjZS5yZWdpc3RyeVtzcGFjZS50b0xvd2VyQ2FzZSgpXTtcblxuXHRcdFx0aWYgKCFyZXQpIHtcblx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgTm8gY29sb3Igc3BhY2UgZm91bmQgd2l0aCBpZCA9IFwiJHtzcGFjZX1cImApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gcmV0O1xuXHRcdH1cblxuXHRcdGlmIChhbHRlcm5hdGl2ZXMubGVuZ3RoKSB7XG5cdFx0XHRyZXR1cm4gQ29sb3JTcGFjZS5nZXQoLi4uYWx0ZXJuYXRpdmVzKTtcblx0XHR9XG5cblx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGAke3NwYWNlfSBpcyBub3QgYSB2YWxpZCBjb2xvciBzcGFjZWApO1xuXHR9XG5cblx0LyoqXG5cdCAqIEdldCBtZXRhZGF0YSBhYm91dCBhIGNvb3JkaW5hdGUgb2YgYSBjb2xvciBzcGFjZVxuXHQgKlxuXHQgKiBAc3RhdGljXG5cdCAqIEBwYXJhbSB7QXJyYXkgfCBzdHJpbmd9IHJlZlxuXHQgKiBAcGFyYW0ge0NvbG9yU3BhY2UgfCBzdHJpbmd9IFt3b3JraW5nU3BhY2VdXG5cdCAqIEByZXR1cm4ge09iamVjdH1cblx0ICovXG5cdHN0YXRpYyByZXNvbHZlQ29vcmQgKHJlZiwgd29ya2luZ1NwYWNlKSB7XG5cdFx0bGV0IGNvb3JkVHlwZSA9IHR5cGUocmVmKTtcblx0XHRsZXQgc3BhY2UsIGNvb3JkO1xuXG5cdFx0aWYgKGNvb3JkVHlwZSA9PT0gXCJzdHJpbmdcIikge1xuXHRcdFx0aWYgKHJlZi5pbmNsdWRlcyhcIi5cIikpIHtcblx0XHRcdFx0Ly8gQWJzb2x1dGUgY29vcmRpbmF0ZVxuXHRcdFx0XHRbc3BhY2UsIGNvb3JkXSA9IHJlZi5zcGxpdChcIi5cIik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHtcblx0XHRcdFx0Ly8gUmVsYXRpdmUgY29vcmRpbmF0ZVxuXHRcdFx0XHRbc3BhY2UsIGNvb3JkXSA9IFssIHJlZl07XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGVsc2UgaWYgKEFycmF5LmlzQXJyYXkocmVmKSkge1xuXHRcdFx0W3NwYWNlLCBjb29yZF0gPSByZWY7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gT2JqZWN0XG5cdFx0XHRzcGFjZSA9IHJlZi5zcGFjZTtcblx0XHRcdGNvb3JkID0gcmVmLmNvb3JkSWQ7XG5cdFx0fVxuXG5cdFx0c3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG5cblx0XHRpZiAoIXNwYWNlKSB7XG5cdFx0XHRzcGFjZSA9IHdvcmtpbmdTcGFjZTtcblx0XHR9XG5cblx0XHRpZiAoIXNwYWNlKSB7XG5cdFx0XHR0aHJvdyBuZXcgVHlwZUVycm9yKGBDYW5ub3QgcmVzb2x2ZSBjb29yZGluYXRlIHJlZmVyZW5jZSAke3JlZn06IE5vIGNvbG9yIHNwYWNlIHNwZWNpZmllZCBhbmQgcmVsYXRpdmUgcmVmZXJlbmNlcyBhcmUgbm90IGFsbG93ZWQgaGVyZWApO1xuXHRcdH1cblxuXHRcdGNvb3JkVHlwZSA9IHR5cGUoY29vcmQpO1xuXG5cdFx0aWYgKGNvb3JkVHlwZSA9PT0gXCJudW1iZXJcIiB8fCBjb29yZFR5cGUgPT09IFwic3RyaW5nXCIgJiYgY29vcmQgPj0gMCkge1xuXHRcdFx0Ly8gUmVzb2x2ZSBudW1lcmljYWwgY29vcmRcblx0XHRcdGxldCBtZXRhID0gT2JqZWN0LmVudHJpZXMoc3BhY2UuY29vcmRzKVtjb29yZF07XG5cblx0XHRcdGlmIChtZXRhKSB7XG5cdFx0XHRcdHJldHVybiB7c3BhY2UsIGlkOiBtZXRhWzBdLCBpbmRleDogY29vcmQsIC4uLm1ldGFbMV19O1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuXG5cdFx0bGV0IG5vcm1hbGl6ZWRDb29yZCA9IGNvb3JkLnRvTG93ZXJDYXNlKCk7XG5cblx0XHRsZXQgaSA9IDA7XG5cdFx0Zm9yIChsZXQgaWQgaW4gc3BhY2UuY29vcmRzKSB7XG5cdFx0XHRsZXQgbWV0YSA9IHNwYWNlLmNvb3Jkc1tpZF07XG5cblx0XHRcdGlmIChpZC50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkQ29vcmQgfHwgbWV0YS5uYW1lPy50b0xvd2VyQ2FzZSgpID09PSBub3JtYWxpemVkQ29vcmQpIHtcblx0XHRcdFx0cmV0dXJuIHtzcGFjZSwgaWQsIGluZGV4OiBpLCAuLi5tZXRhfTtcblx0XHRcdH1cblxuXHRcdFx0aSsrO1xuXHRcdH1cblxuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYE5vIFwiJHtjb29yZH1cIiBjb29yZGluYXRlIGZvdW5kIGluICR7c3BhY2UubmFtZX0uIEl0cyBjb29yZGluYXRlcyBhcmU6ICR7T2JqZWN0LmtleXMoc3BhY2UuY29vcmRzKS5qb2luKFwiLCBcIil9YCk7XG5cdH1cblxuXHRzdGF0aWMgREVGQVVMVF9GT1JNQVQgPSB7XG5cdFx0dHlwZTogXCJmdW5jdGlvbnNcIixcblx0XHRuYW1lOiBcImNvbG9yXCIsXG5cdH07XG59XG5cbmZ1bmN0aW9uIGdldFBhdGggKHNwYWNlKSB7XG5cdGxldCByZXQgPSBbc3BhY2VdO1xuXG5cdGZvciAobGV0IHMgPSBzcGFjZTsgcyA9IHMuYmFzZTspIHtcblx0XHRyZXQucHVzaChzKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbmZ1bmN0aW9uIHByb2Nlc3NGb3JtYXQgKGZvcm1hdCwge2Nvb3Jkc30gPSB7fSkge1xuXHRpZiAoZm9ybWF0LmNvb3JkcyAmJiAhZm9ybWF0LmNvb3JkR3JhbW1hcikge1xuXHRcdGZvcm1hdC50eXBlIHx8PSBcImZ1bmN0aW9uXCI7XG5cdFx0Zm9ybWF0Lm5hbWUgfHw9IFwiY29sb3JcIjtcblxuXHRcdC8vIEZvcm1hdCBoYXMgbm90IGJlZW4gcHJvY2Vzc2VkXG5cdFx0Zm9ybWF0LmNvb3JkR3JhbW1hciA9IHBhcnNlQ29vcmRHcmFtbWFyKGZvcm1hdC5jb29yZHMpO1xuXG5cdFx0bGV0IGNvb3JkRm9ybWF0cyA9IE9iamVjdC5lbnRyaWVzKGNvb3JkcykubWFwKChbaWQsIGNvb3JkTWV0YV0sIGkpID0+IHtcblx0XHRcdC8vIFByZWZlcnJlZCBmb3JtYXQgZm9yIGVhY2ggY29vcmQgaXMgdGhlIGZpcnN0IG9uZVxuXHRcdFx0bGV0IG91dHB1dFR5cGUgPSBmb3JtYXQuY29vcmRHcmFtbWFyW2ldWzBdO1xuXG5cdFx0XHRsZXQgZnJvbVJhbmdlID0gY29vcmRNZXRhLnJhbmdlIHx8IGNvb3JkTWV0YS5yZWZSYW5nZTtcblx0XHRcdGxldCB0b1JhbmdlID0gb3V0cHV0VHlwZS5yYW5nZSwgc3VmZml4ID0gXCJcIjtcblxuXHRcdFx0Ly8gTm9uLXN0cmljdCBlcXVhbHMgaW50ZW50aW9uYWwgc2luY2Ugb3V0cHV0VHlwZSBjb3VsZCBiZSBhIHN0cmluZyBvYmplY3Rcblx0XHRcdGlmIChvdXRwdXRUeXBlID09IFwiPHBlcmNlbnRhZ2U+XCIpIHtcblx0XHRcdFx0dG9SYW5nZSA9IFswLCAxMDBdO1xuXHRcdFx0XHRzdWZmaXggPSBcIiVcIjtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKG91dHB1dFR5cGUgPT0gXCI8YW5nbGU+XCIpIHtcblx0XHRcdFx0c3VmZml4ID0gXCJkZWdcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuICB7ZnJvbVJhbmdlLCB0b1JhbmdlLCBzdWZmaXh9O1xuXHRcdH0pO1xuXG5cdFx0Zm9ybWF0LnNlcmlhbGl6ZUNvb3JkcyA9IChjb29yZHMsIHByZWNpc2lvbikgPT4ge1xuXHRcdFx0cmV0dXJuIGNvb3Jkcy5tYXAoKGMsIGkpID0+IHtcblx0XHRcdFx0bGV0IHtmcm9tUmFuZ2UsIHRvUmFuZ2UsIHN1ZmZpeH0gPSBjb29yZEZvcm1hdHNbaV07XG5cblx0XHRcdFx0aWYgKGZyb21SYW5nZSAmJiB0b1JhbmdlKSB7XG5cdFx0XHRcdFx0YyA9IG1hcFJhbmdlKGZyb21SYW5nZSwgdG9SYW5nZSwgYyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRjID0gc2VyaWFsaXplTnVtYmVyKGMsIHtwcmVjaXNpb24sIHVuaXQ6IHN1ZmZpeH0pO1xuXG5cdFx0XHRcdHJldHVybiBjO1xuXHRcdFx0fSk7XG5cdFx0fTtcblx0fVxuXG5cdHJldHVybiBmb3JtYXQ7XG59XG5cbnZhciB4eXpfZDY1ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJ4eXotZDY1XCIsXG5cdG5hbWU6IFwiWFlaIEQ2NVwiLFxuXHRjb29yZHM6IHtcblx0XHR4OiB7bmFtZTogXCJYXCJ9LFxuXHRcdHk6IHtuYW1lOiBcIllcIn0sXG5cdFx0ejoge25hbWU6IFwiWlwifSxcblx0fSxcblx0d2hpdGU6IFwiRDY1XCIsXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWRzOiBbXCJ4eXotZDY1XCIsIFwieHl6XCJdLFxuXHRcdH0sXG5cdH0sXG5cdGFsaWFzZXM6IFtcInh5elwiXSxcbn0pO1xuXG4vKipcbiAqIENvbnZlbmllbmNlIGNsYXNzIGZvciBSR0IgY29sb3Igc3BhY2VzXG4gKiBAZXh0ZW5kcyB7Q29sb3JTcGFjZX1cbiAqL1xuY2xhc3MgUkdCQ29sb3JTcGFjZSBleHRlbmRzIENvbG9yU3BhY2Uge1xuXHQvKipcblx0ICogQ3JlYXRlcyBhIG5ldyBSR0IgQ29sb3JTcGFjZS5cblx0ICogSWYgY29vcmRzIGFyZSBub3Qgc3BlY2lmaWVkLCB0aGV5IHdpbGwgdXNlIHRoZSBkZWZhdWx0IFJHQiBjb29yZHMuXG5cdCAqIEluc3RlYWQgb2YgYGZyb21CYXNlKClgIGFuZCBgdG9CYXNlKClgIGZ1bmN0aW9ucyxcblx0ICogeW91IGNhbiBzcGVjaWZ5IHRvL2Zyb20gWFlaIG1hdHJpY2VzIGFuZCBoYXZlIGB0b0Jhc2UoKWAgYW5kIGBmcm9tQmFzZSgpYCBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZC5cblx0ICogQHBhcmFtIHsqfSBvcHRpb25zIC0gU2FtZSBvcHRpb25zIGFzIHtAbGluayBDb2xvclNwYWNlfSBwbHVzOlxuXHQgKiBAcGFyYW0ge251bWJlcltdW119IG9wdGlvbnMudG9YWVpfTSAtIE1hdHJpeCB0byBjb252ZXJ0IHRvIFhZWlxuXHQgKiBAcGFyYW0ge251bWJlcltdW119IG9wdGlvbnMuZnJvbVhZWl9NIC0gTWF0cml4IHRvIGNvbnZlcnQgZnJvbSBYWVpcblx0ICovXG5cdGNvbnN0cnVjdG9yIChvcHRpb25zKSB7XG5cdFx0aWYgKCFvcHRpb25zLmNvb3Jkcykge1xuXHRcdFx0b3B0aW9ucy5jb29yZHMgPSB7XG5cdFx0XHRcdHI6IHtcblx0XHRcdFx0XHRyYW5nZTogWzAsIDFdLFxuXHRcdFx0XHRcdG5hbWU6IFwiUmVkXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHRcdGc6IHtcblx0XHRcdFx0XHRyYW5nZTogWzAsIDFdLFxuXHRcdFx0XHRcdG5hbWU6IFwiR3JlZW5cIixcblx0XHRcdFx0fSxcblx0XHRcdFx0Yjoge1xuXHRcdFx0XHRcdHJhbmdlOiBbMCwgMV0sXG5cdFx0XHRcdFx0bmFtZTogXCJCbHVlXCIsXG5cdFx0XHRcdH0sXG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdGlmICghb3B0aW9ucy5iYXNlKSB7XG5cdFx0XHRvcHRpb25zLmJhc2UgPSB4eXpfZDY1O1xuXHRcdH1cblxuXHRcdGlmIChvcHRpb25zLnRvWFlaX00gJiYgb3B0aW9ucy5mcm9tWFlaX00pIHtcblx0XHRcdG9wdGlvbnMudG9CYXNlID8/PSByZ2IgPT4ge1xuXHRcdFx0XHRsZXQgeHl6ID0gbXVsdGlwbHlNYXRyaWNlcyhvcHRpb25zLnRvWFlaX00sIHJnYik7XG5cblx0XHRcdFx0aWYgKHRoaXMud2hpdGUgIT09IHRoaXMuYmFzZS53aGl0ZSkge1xuXHRcdFx0XHRcdC8vIFBlcmZvcm0gY2hyb21hdGljIGFkYXB0YXRpb25cblx0XHRcdFx0XHR4eXogPSBhZGFwdCQyKHRoaXMud2hpdGUsIHRoaXMuYmFzZS53aGl0ZSwgeHl6KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiB4eXo7XG5cdFx0XHR9O1xuXG5cdFx0XHRvcHRpb25zLmZyb21CYXNlID8/PSB4eXogPT4ge1xuXHRcdFx0XHR4eXogPSBhZGFwdCQyKHRoaXMuYmFzZS53aGl0ZSwgdGhpcy53aGl0ZSwgeHl6KTtcblx0XHRcdFx0cmV0dXJuIG11bHRpcGx5TWF0cmljZXMob3B0aW9ucy5mcm9tWFlaX00sIHh5eik7XG5cdFx0XHR9O1xuXHRcdH1cblxuXHRcdG9wdGlvbnMucmVmZXJyZWQgPz89IFwiZGlzcGxheVwiO1xuXG5cdFx0c3VwZXIob3B0aW9ucyk7XG5cdH1cbn1cblxuLyoqXG4gKiBHZXQgdGhlIGNvb3JkaW5hdGVzIG9mIGEgY29sb3IgaW4gYW55IGNvbG9yIHNwYWNlXG4gKiBAcGFyYW0ge0NvbG9yfSBjb2xvclxuICogQHBhcmFtIHtzdHJpbmcgfCBDb2xvclNwYWNlfSBbc3BhY2UgPSBjb2xvci5zcGFjZV0gVGhlIGNvbG9yIHNwYWNlIHRvIGNvbnZlcnQgdG8uIERlZmF1bHRzIHRvIHRoZSBjb2xvcidzIGN1cnJlbnQgc3BhY2VcbiAqIEByZXR1cm5zIHtudW1iZXJbXX0gVGhlIGNvbG9yIGNvb3JkaW5hdGVzIGluIHRoZSBnaXZlbiBjb2xvciBzcGFjZVxuICovXG5mdW5jdGlvbiBnZXRBbGwgKGNvbG9yLCBzcGFjZSkge1xuXHRjb2xvciA9IGdldENvbG9yKGNvbG9yKTtcblxuXHRpZiAoIXNwYWNlIHx8IGNvbG9yLnNwYWNlLmVxdWFscyhzcGFjZSkpIHtcblx0XHQvLyBObyBjb252ZXJzaW9uIG5lZWRlZFxuXHRcdHJldHVybiBjb2xvci5jb29yZHMuc2xpY2UoKTtcblx0fVxuXG5cdHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuXHRyZXR1cm4gc3BhY2UuZnJvbShjb2xvcik7XG59XG5cbmZ1bmN0aW9uIGdldCAoY29sb3IsIHByb3ApIHtcblx0Y29sb3IgPSBnZXRDb2xvcihjb2xvcik7XG5cblx0bGV0IHtzcGFjZSwgaW5kZXh9ID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQocHJvcCwgY29sb3Iuc3BhY2UpO1xuXHRsZXQgY29vcmRzID0gZ2V0QWxsKGNvbG9yLCBzcGFjZSk7XG5cdHJldHVybiBjb29yZHNbaW5kZXhdO1xufVxuXG5mdW5jdGlvbiBzZXRBbGwgKGNvbG9yLCBzcGFjZSwgY29vcmRzKSB7XG5cdGNvbG9yID0gZ2V0Q29sb3IoY29sb3IpO1xuXG5cdHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuXHRjb2xvci5jb29yZHMgPSBzcGFjZS50byhjb2xvci5zcGFjZSwgY29vcmRzKTtcblx0cmV0dXJuIGNvbG9yO1xufVxuXG5zZXRBbGwucmV0dXJucyA9IFwiY29sb3JcIjtcblxuLy8gU2V0IHByb3BlcnRpZXMgYW5kIHJldHVybiBjdXJyZW50IGluc3RhbmNlXG5mdW5jdGlvbiBzZXQgKGNvbG9yLCBwcm9wLCB2YWx1ZSkge1xuXHRjb2xvciA9IGdldENvbG9yKGNvbG9yKTtcblxuXHRpZiAoYXJndW1lbnRzLmxlbmd0aCA9PT0gMiAmJiB0eXBlKGFyZ3VtZW50c1sxXSkgPT09IFwib2JqZWN0XCIpIHtcblx0XHQvLyBBcmd1bWVudCBpcyBhbiBvYmplY3QgbGl0ZXJhbFxuXHRcdGxldCBvYmplY3QgPSBhcmd1bWVudHNbMV07XG5cdFx0Zm9yIChsZXQgcCBpbiBvYmplY3QpIHtcblx0XHRcdHNldChjb2xvciwgcCwgb2JqZWN0W3BdKTtcblx0XHR9XG5cdH1cblx0ZWxzZSB7XG5cdFx0aWYgKHR5cGVvZiB2YWx1ZSA9PT0gXCJmdW5jdGlvblwiKSB7XG5cdFx0XHR2YWx1ZSA9IHZhbHVlKGdldChjb2xvciwgcHJvcCkpO1xuXHRcdH1cblxuXHRcdGxldCB7c3BhY2UsIGluZGV4fSA9IENvbG9yU3BhY2UucmVzb2x2ZUNvb3JkKHByb3AsIGNvbG9yLnNwYWNlKTtcblx0XHRsZXQgY29vcmRzID0gZ2V0QWxsKGNvbG9yLCBzcGFjZSk7XG5cdFx0Y29vcmRzW2luZGV4XSA9IHZhbHVlO1xuXHRcdHNldEFsbChjb2xvciwgc3BhY2UsIGNvb3Jkcyk7XG5cdH1cblxuXHRyZXR1cm4gY29sb3I7XG59XG5cbnNldC5yZXR1cm5zID0gXCJjb2xvclwiO1xuXG52YXIgWFlaX0Q1MCA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwieHl6LWQ1MFwiLFxuXHRuYW1lOiBcIlhZWiBENTBcIixcblx0d2hpdGU6IFwiRDUwXCIsXG5cdGJhc2U6IHh5el9kNjUsXG5cdGZyb21CYXNlOiBjb29yZHMgPT4gYWRhcHQkMih4eXpfZDY1LndoaXRlLCBcIkQ1MFwiLCBjb29yZHMpLFxuXHR0b0Jhc2U6IGNvb3JkcyA9PiBhZGFwdCQyKFwiRDUwXCIsIHh5el9kNjUud2hpdGUsIGNvb3JkcyksXG59KTtcblxuLy8gzrogKiDOtSAgPSAyXjMgPSA4XG5jb25zdCDOtSQ2ID0gMjE2IC8gMjQzODk7ICAvLyA2XjMvMjleMyA9PSAoMjQvMTE2KV4zXG5jb25zdCDOtTMkMSA9IDI0IC8gMTE2O1xuY29uc3QgzrokNCA9IDI0Mzg5IC8gMjc7ICAgLy8gMjleMy8zXjNcblxubGV0IHdoaXRlJDQgPSBXSElURVMuRDUwO1xuXG52YXIgbGFiID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJsYWJcIixcblx0bmFtZTogXCJMYWJcIixcblx0Y29vcmRzOiB7XG5cdFx0bDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJMaWdodG5lc3NcIixcblx0XHR9LFxuXHRcdGE6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTEyNSwgMTI1XSxcblx0XHR9LFxuXHRcdGI6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTEyNSwgMTI1XSxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIEFzc3VtaW5nIFhZWiBpcyByZWxhdGl2ZSB0byBENTAsIGNvbnZlcnQgdG8gQ0lFIExhYlxuXHQvLyBmcm9tIENJRSBzdGFuZGFyZCwgd2hpY2ggbm93IGRlZmluZXMgdGhlc2UgYXMgYSByYXRpb25hbCBmcmFjdGlvblxuXHR3aGl0ZTogd2hpdGUkNCxcblxuXHRiYXNlOiBYWVpfRDUwLFxuXHQvLyBDb252ZXJ0IEQ1MC1hZGFwdGVkIFhZWCB0byBMYWJcblx0Ly8gIENJRSAxNS4zOjIwMDQgc2VjdGlvbiA4LjIuMS4xXG5cdGZyb21CYXNlIChYWVopIHtcblx0XHQvLyBjb21wdXRlIHh5eiwgd2hpY2ggaXMgWFlaIHNjYWxlZCByZWxhdGl2ZSB0byByZWZlcmVuY2Ugd2hpdGVcblx0XHRsZXQgeHl6ID0gWFlaLm1hcCgodmFsdWUsIGkpID0+IHZhbHVlIC8gd2hpdGUkNFtpXSk7XG5cblx0XHQvLyBub3cgY29tcHV0ZSBmXG5cdFx0bGV0IGYgPSB4eXoubWFwKHZhbHVlID0+IHZhbHVlID4gzrUkNiA/IE1hdGguY2JydCh2YWx1ZSkgOiAozrokNCAqIHZhbHVlICsgMTYpIC8gMTE2KTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHQoMTE2ICogZlsxXSkgLSAxNiwgICAvLyBMXG5cdFx0XHQ1MDAgKiAoZlswXSAtIGZbMV0pLCAvLyBhXG5cdFx0XHQyMDAgKiAoZlsxXSAtIGZbMl0pLCAgLy8gYlxuXHRcdF07XG5cdH0sXG5cdC8vIENvbnZlcnQgTGFiIHRvIEQ1MC1hZGFwdGVkIFhZWlxuXHQvLyBTYW1lIHJlc3VsdCBhcyBDSUUgMTUuMzoyMDA0IEFwcGVuZGl4IEQgYWx0aG91Z2ggdGhlIGRlcml2YXRpb24gaXMgZGlmZmVyZW50XG5cdC8vIGh0dHA6Ly93d3cuYnJ1Y2VsaW5kYmxvb20uY29tL2luZGV4Lmh0bWw/RXFuX1JHQl9YWVpfTWF0cml4Lmh0bWxcblx0dG9CYXNlIChMYWIpIHtcblx0XHQvLyBjb21wdXRlIGYsIHN0YXJ0aW5nIHdpdGggdGhlIGx1bWluYW5jZS1yZWxhdGVkIHRlcm1cblx0XHRsZXQgZiA9IFtdO1xuXHRcdGZbMV0gPSAoTGFiWzBdICsgMTYpIC8gMTE2O1xuXHRcdGZbMF0gPSBMYWJbMV0gLyA1MDAgKyBmWzFdO1xuXHRcdGZbMl0gPSBmWzFdIC0gTGFiWzJdIC8gMjAwO1xuXG5cdFx0Ly8gY29tcHV0ZSB4eXpcblx0XHRsZXQgeHl6ID0gW1xuXHRcdFx0ZlswXSAgID4gzrUzJDEgPyBNYXRoLnBvdyhmWzBdLCAzKSAgICAgICAgICAgICAgICA6ICgxMTYgKiBmWzBdIC0gMTYpIC8gzrokNCxcblx0XHRcdExhYlswXSA+IDggID8gTWF0aC5wb3coKExhYlswXSArIDE2KSAvIDExNiwgMykgOiBMYWJbMF0gLyDOuiQ0LFxuXHRcdFx0ZlsyXSAgID4gzrUzJDEgPyBNYXRoLnBvdyhmWzJdLCAzKSAgICAgICAgICAgICAgICA6ICgxMTYgKiBmWzJdIC0gMTYpIC8gzrokNCxcblx0XHRdO1xuXG5cdFx0Ly8gQ29tcHV0ZSBYWVogYnkgc2NhbGluZyB4eXogYnkgcmVmZXJlbmNlIHdoaXRlXG5cdFx0cmV0dXJuIHh5ei5tYXAoKHZhbHVlLCBpKSA9PiB2YWx1ZSAqIHdoaXRlJDRbaV0pO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRcImxhYlwiOiB7XG5cdFx0XHRjb29yZHM6IFtcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+XCIsIFwiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5bLTEsMV1cIiwgXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlstMSwxXVwiXSxcblx0XHR9LFxuXHR9LFxufSk7XG5cbmZ1bmN0aW9uIGNvbnN0cmFpbiAoYW5nbGUpIHtcblx0cmV0dXJuICgoYW5nbGUgJSAzNjApICsgMzYwKSAlIDM2MDtcbn1cblxuZnVuY3Rpb24gYWRqdXN0IChhcmMsIGFuZ2xlcykge1xuXHRpZiAoYXJjID09PSBcInJhd1wiKSB7XG5cdFx0cmV0dXJuIGFuZ2xlcztcblx0fVxuXG5cdGxldCBbYTEsIGEyXSA9IGFuZ2xlcy5tYXAoY29uc3RyYWluKTtcblxuXHRsZXQgYW5nbGVEaWZmID0gYTIgLSBhMTtcblxuXHRpZiAoYXJjID09PSBcImluY3JlYXNpbmdcIikge1xuXHRcdGlmIChhbmdsZURpZmYgPCAwKSB7XG5cdFx0XHRhMiArPSAzNjA7XG5cdFx0fVxuXHR9XG5cdGVsc2UgaWYgKGFyYyA9PT0gXCJkZWNyZWFzaW5nXCIpIHtcblx0XHRpZiAoYW5nbGVEaWZmID4gMCkge1xuXHRcdFx0YTEgKz0gMzYwO1xuXHRcdH1cblx0fVxuXHRlbHNlIGlmIChhcmMgPT09IFwibG9uZ2VyXCIpIHtcblx0XHRpZiAoLTE4MCA8IGFuZ2xlRGlmZiAmJiBhbmdsZURpZmYgPCAxODApIHtcblx0XHRcdGlmIChhbmdsZURpZmYgPiAwKSB7XG5cdFx0XHRcdGExICs9IDM2MDtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRhMiArPSAzNjA7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdGVsc2UgaWYgKGFyYyA9PT0gXCJzaG9ydGVyXCIpIHtcblx0XHRpZiAoYW5nbGVEaWZmID4gMTgwKSB7XG5cdFx0XHRhMSArPSAzNjA7XG5cdFx0fVxuXHRcdGVsc2UgaWYgKGFuZ2xlRGlmZiA8IC0xODApIHtcblx0XHRcdGEyICs9IDM2MDtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gW2ExLCBhMl07XG59XG5cbnZhciBsY2ggPSBuZXcgQ29sb3JTcGFjZSh7XG5cdGlkOiBcImxjaFwiLFxuXHRuYW1lOiBcIkxDSFwiLFxuXHRjb29yZHM6IHtcblx0XHRsOiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDEwMF0sXG5cdFx0XHRuYW1lOiBcIkxpZ2h0bmVzc1wiLFxuXHRcdH0sXG5cdFx0Yzoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxNTBdLFxuXHRcdFx0bmFtZTogXCJDaHJvbWFcIixcblx0XHR9LFxuXHRcdGg6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0fSxcblxuXHRiYXNlOiBsYWIsXG5cdGZyb21CYXNlIChMYWIpIHtcblx0XHQvLyBDb252ZXJ0IHRvIHBvbGFyIGZvcm1cblx0XHRsZXQgW0wsIGEsIGJdID0gTGFiO1xuXHRcdGxldCBodWU7XG5cdFx0Y29uc3QgzrUgPSAwLjAyO1xuXG5cdFx0aWYgKE1hdGguYWJzKGEpIDwgzrUgJiYgTWF0aC5hYnMoYikgPCDOtSkge1xuXHRcdFx0aHVlID0gTmFOO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGh1ZSA9IE1hdGguYXRhbjIoYiwgYSkgKiAxODAgLyBNYXRoLlBJO1xuXHRcdH1cblxuXHRcdHJldHVybiBbXG5cdFx0XHRMLCAvLyBMIGlzIHN0aWxsIExcblx0XHRcdE1hdGguc3FydChhICoqIDIgKyBiICoqIDIpLCAvLyBDaHJvbWFcblx0XHRcdGNvbnN0cmFpbihodWUpLCAvLyBIdWUsIGluIGRlZ3JlZXMgWzAgdG8gMzYwKVxuXHRcdF07XG5cdH0sXG5cdHRvQmFzZSAoTENIKSB7XG5cdFx0Ly8gQ29udmVydCBmcm9tIHBvbGFyIGZvcm1cblx0XHRsZXQgW0xpZ2h0bmVzcywgQ2hyb21hLCBIdWVdID0gTENIO1xuXHRcdC8vIENsYW1wIGFueSBuZWdhdGl2ZSBDaHJvbWFcblx0XHRpZiAoQ2hyb21hIDwgMCkge1xuXHRcdFx0Q2hyb21hID0gMDtcblx0XHR9XG5cdFx0Ly8gRGVhbCB3aXRoIE5hTiBIdWVcblx0XHRpZiAoaXNOYU4oSHVlKSkge1xuXHRcdFx0SHVlID0gMDtcblx0XHR9XG5cdFx0cmV0dXJuIFtcblx0XHRcdExpZ2h0bmVzcywgLy8gTCBpcyBzdGlsbCBMXG5cdFx0XHRDaHJvbWEgKiBNYXRoLmNvcyhIdWUgKiBNYXRoLlBJIC8gMTgwKSwgLy8gYVxuXHRcdFx0Q2hyb21hICogTWF0aC5zaW4oSHVlICogTWF0aC5QSSAvIDE4MCksICAvLyBiXG5cdFx0XTtcblx0fSxcblxuXHRmb3JtYXRzOiB7XG5cdFx0XCJsY2hcIjoge1xuXHRcdFx0Y29vcmRzOiBbXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlwiLCBcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+XCIsIFwiPG51bWJlcj4gfCA8YW5nbGU+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuLy8gZGVsdGFFMjAwMCBpcyBhIHN0YXRpc3RpY2FsbHkgc2lnbmlmaWNhbnQgaW1wcm92ZW1lbnRcbi8vIGFuZCBpcyByZWNvbW1lbmRlZCBieSB0aGUgQ0lFIGFuZCBJZGVhbGxpYW5jZVxuLy8gZXNwZWNpYWxseSBmb3IgY29sb3IgZGlmZmVyZW5jZXMgbGVzcyB0aGFuIDEwIGRlbHRhRTc2XG4vLyBidXQgaXMgd2lja2VkIGNvbXBsaWNhdGVkXG4vLyBhbmQgbWFueSBpbXBsZW1lbnRhdGlvbnMgaGF2ZSBzbWFsbCBlcnJvcnMhXG4vLyBEZWx0YUUyMDAwIGlzIGFsc28gZGlzY29udGludW91czsgaW4gY2FzZSB0aGlzXG4vLyBtYXR0ZXJzIHRvIHlvdSwgdXNlIGRlbHRhRUNNQyBpbnN0ZWFkLlxuXG5jb25zdCBHZmFjdG9yID0gMjUgKiogNztcbmNvbnN0IM+AJDEgPSBNYXRoLlBJO1xuY29uc3QgcjJkID0gMTgwIC8gz4AkMTtcbmNvbnN0IGQyciQxID0gz4AkMSAvIDE4MDtcblxuZnVuY3Rpb24gcG93NyAoeCkge1xuXHQvLyBGYXN0ZXIgdGhhbiB4ICoqIDcgb3IgTWF0aC5wb3coeCwgNylcblxuXHRjb25zdCB4MiA9IHggKiB4O1xuXHRjb25zdCB4NyA9IHgyICogeDIgKiB4MiAqIHg7XG5cblx0cmV0dXJuIHg3O1xufVxuXG5mdW5jdGlvbiBkZWx0YUUyMDAwIChjb2xvciwgc2FtcGxlLCB7a0wgPSAxLCBrQyA9IDEsIGtIID0gMX0gPSB7fSkge1xuXHRbY29sb3IsIHNhbXBsZV0gPSBnZXRDb2xvcihbY29sb3IsIHNhbXBsZV0pO1xuXG5cdC8vIEdpdmVuIHRoaXMgY29sb3IgYXMgdGhlIHJlZmVyZW5jZVxuXHQvLyBhbmQgdGhlIGZ1bmN0aW9uIHBhcmFtZXRlciBhcyB0aGUgc2FtcGxlLFxuXHQvLyBjYWxjdWxhdGUgZGVsdGFFIDIwMDAuXG5cblx0Ly8gVGhpcyBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoZSBwYXJhbWV0cmljXG5cdC8vIHdlaWdodGluZyBmYWN0b3JzIGtMLCBrQyBhbmQga0hcblx0Ly8gZm9yIHRoZSBpbmZsdWVuY2Ugb2Ygdmlld2luZyBjb25kaXRpb25zXG5cdC8vIGFyZSBhbGwgMSwgYXMgc2FkbHkgc2VlbXMgdHlwaWNhbC5cblx0Ly8ga0wgc2hvdWxkIGJlIGluY3JlYXNlZCBmb3IgbGlnaHRuZXNzIHRleHR1cmUgb3Igbm9pc2Vcblx0Ly8gYW5kIGtDIGluY3JlYXNlZCBmb3IgY2hyb21hIG5vaXNlXG5cblx0bGV0IFtMMSwgYTEsIGIxXSA9IGxhYi5mcm9tKGNvbG9yKTtcblx0bGV0IEMxID0gbGNoLmZyb20obGFiLCBbTDEsIGExLCBiMV0pWzFdO1xuXHRsZXQgW0wyLCBhMiwgYjJdID0gbGFiLmZyb20oc2FtcGxlKTtcblx0bGV0IEMyID0gbGNoLmZyb20obGFiLCBbTDIsIGEyLCBiMl0pWzFdO1xuXG5cdC8vIENoZWNrIGZvciBuZWdhdGl2ZSBDaHJvbWEsXG5cdC8vIHdoaWNoIG1pZ2h0IGhhcHBlbiB0aHJvdWdoXG5cdC8vIGRpcmVjdCB1c2VyIGlucHV0IG9mIExDSCB2YWx1ZXNcblxuXHRpZiAoQzEgPCAwKSB7XG5cdFx0QzEgPSAwO1xuXHR9XG5cdGlmIChDMiA8IDApIHtcblx0XHRDMiA9IDA7XG5cdH1cblxuXHRsZXQgQ2JhciA9IChDMSArIEMyKSAvIDI7IC8vIG1lYW4gQ2hyb21hXG5cblx0Ly8gY2FsY3VsYXRlIGEtYXhpcyBhc3ltbWV0cnkgZmFjdG9yIGZyb20gbWVhbiBDaHJvbWFcblx0Ly8gdGhpcyB0dXJucyBKTkQgZWxsaXBzZXMgZm9yIG5lYXItbmV1dHJhbCBjb2xvcnMgYmFjayBpbnRvIGNpcmNsZXNcblx0bGV0IEM3ID0gcG93NyhDYmFyKTtcblxuXHRsZXQgRyA9IDAuNSAqICgxIC0gTWF0aC5zcXJ0KEM3IC8gKEM3ICsgR2ZhY3RvcikpKTtcblxuXHQvLyBzY2FsZSBhIGF4ZXMgYnkgYXN5bW1ldHJ5IGZhY3RvclxuXHQvLyB0aGlzIGJ5IHRoZSB3YXkgaXMgd2h5IHRoZXJlIGlzIG5vIExhYjIwMDAgY29sb3JzcGFjZVxuXHRsZXQgYWRhc2gxID0gKDEgKyBHKSAqIGExO1xuXHRsZXQgYWRhc2gyID0gKDEgKyBHKSAqIGEyO1xuXG5cdC8vIGNhbGN1bGF0ZSBuZXcgQ2hyb21hIGZyb20gc2NhbGVkIGEgYW5kIG9yaWdpbmFsIGIgYXhlc1xuXHRsZXQgQ2Rhc2gxID0gTWF0aC5zcXJ0KGFkYXNoMSAqKiAyICsgYjEgKiogMik7XG5cdGxldCBDZGFzaDIgPSBNYXRoLnNxcnQoYWRhc2gyICoqIDIgKyBiMiAqKiAyKTtcblxuXHQvLyBjYWxjdWxhdGUgbmV3IGh1ZXMsIHdpdGggemVybyBodWUgZm9yIHRydWUgbmV1dHJhbHNcblx0Ly8gYW5kIGluIGRlZ3JlZXMsIG5vdCByYWRpYW5zXG5cblx0bGV0IGgxID0gKGFkYXNoMSA9PT0gMCAmJiBiMSA9PT0gMCkgPyAwIDogTWF0aC5hdGFuMihiMSwgYWRhc2gxKTtcblx0bGV0IGgyID0gKGFkYXNoMiA9PT0gMCAmJiBiMiA9PT0gMCkgPyAwIDogTWF0aC5hdGFuMihiMiwgYWRhc2gyKTtcblxuXHRpZiAoaDEgPCAwKSB7XG5cdFx0aDEgKz0gMiAqIM+AJDE7XG5cdH1cblx0aWYgKGgyIDwgMCkge1xuXHRcdGgyICs9IDIgKiDPgCQxO1xuXHR9XG5cblx0aDEgKj0gcjJkO1xuXHRoMiAqPSByMmQ7XG5cblx0Ly8gTGlnaHRuZXNzIGFuZCBDaHJvbWEgZGlmZmVyZW5jZXM7IHNpZ24gbWF0dGVyc1xuXHRsZXQgzpRMID0gTDIgLSBMMTtcblx0bGV0IM6UQyA9IENkYXNoMiAtIENkYXNoMTtcblxuXHQvLyBIdWUgZGlmZmVyZW5jZSwgZ2V0dGluZyB0aGUgc2lnbiBjb3JyZWN0XG5cdGxldCBoZGlmZiA9IGgyIC0gaDE7XG5cdGxldCBoc3VtID0gaDEgKyBoMjtcblx0bGV0IGhhYnMgPSBNYXRoLmFicyhoZGlmZik7XG5cdGxldCDOlGg7XG5cblx0aWYgKENkYXNoMSAqIENkYXNoMiA9PT0gMCkge1xuXHRcdM6UaCA9IDA7XG5cdH1cblx0ZWxzZSBpZiAoaGFicyA8PSAxODApIHtcblx0XHTOlGggPSBoZGlmZjtcblx0fVxuXHRlbHNlIGlmIChoZGlmZiA+IDE4MCkge1xuXHRcdM6UaCA9IGhkaWZmIC0gMzYwO1xuXHR9XG5cdGVsc2UgaWYgKGhkaWZmIDwgLTE4MCkge1xuXHRcdM6UaCA9IGhkaWZmICsgMzYwO1xuXHR9XG5cdGVsc2Uge1xuXHRcdGRlZmF1bHRzLndhcm4oXCJ0aGUgdW50aGlua2FibGUgaGFzIGhhcHBlbmVkXCIpO1xuXHR9XG5cblx0Ly8gd2VpZ2h0ZWQgSHVlIGRpZmZlcmVuY2UsIG1vcmUgZm9yIGxhcmdlciBDaHJvbWFcblx0bGV0IM6USCA9IDIgKiBNYXRoLnNxcnQoQ2Rhc2gyICogQ2Rhc2gxKSAqIE1hdGguc2luKM6UaCAqIGQyciQxIC8gMik7XG5cblx0Ly8gY2FsY3VsYXRlIG1lYW4gTGlnaHRuZXNzIGFuZCBDaHJvbWFcblx0bGV0IExkYXNoID0gKEwxICsgTDIpIC8gMjtcblx0bGV0IENkYXNoID0gKENkYXNoMSArIENkYXNoMikgLyAyO1xuXHRsZXQgQ2Rhc2g3ID0gcG93NyhDZGFzaCk7XG5cblx0Ly8gQ29tcGVuc2F0ZSBmb3Igbm9uLWxpbmVhcml0eSBpbiB0aGUgYmx1ZSByZWdpb24gb2YgTGFiLlxuXHQvLyBGb3VyIHBvc3NpYmlsaXRpZXMgZm9yIGh1ZSB3ZWlnaHRpbmcgZmFjdG9yLFxuXHQvLyBkZXBlbmRpbmcgb24gdGhlIGFuZ2xlcywgdG8gZ2V0IHRoZSBjb3JyZWN0IHNpZ25cblx0bGV0IGhkYXNoO1xuXHRpZiAoQ2Rhc2gxICogQ2Rhc2gyID09PSAwKSB7XG5cdFx0aGRhc2ggPSBoc3VtOyAgIC8vIHdoaWNoIHNob3VsZCBiZSB6ZXJvXG5cdH1cblx0ZWxzZSBpZiAoaGFicyA8PSAxODApIHtcblx0XHRoZGFzaCA9IGhzdW0gLyAyO1xuXHR9XG5cdGVsc2UgaWYgKGhzdW0gPCAzNjApIHtcblx0XHRoZGFzaCA9IChoc3VtICsgMzYwKSAvIDI7XG5cdH1cblx0ZWxzZSB7XG5cdFx0aGRhc2ggPSAoaHN1bSAtIDM2MCkgLyAyO1xuXHR9XG5cblx0Ly8gcG9zaXRpb25hbCBjb3JyZWN0aW9ucyB0byB0aGUgbGFjayBvZiB1bmlmb3JtaXR5IG9mIENJRUxBQlxuXHQvLyBUaGVzZSBhcmUgYWxsIHRyeWluZyB0byBtYWtlIEpORCBlbGxpcHNvaWRzIG1vcmUgbGlrZSBzcGhlcmVzXG5cblx0Ly8gU0wgTGlnaHRuZXNzIGNyaXNwZW5pbmcgZmFjdG9yXG5cdC8vIGEgYmFja2dyb3VuZCB3aXRoIEw9NTAgaXMgYXNzdW1lZFxuXHRsZXQgbHNxID0gKExkYXNoIC0gNTApICoqIDI7XG5cdGxldCBTTCA9IDEgKyAoKDAuMDE1ICogbHNxKSAvIE1hdGguc3FydCgyMCArIGxzcSkpO1xuXG5cdC8vIFNDIENocm9tYSBmYWN0b3IsIHNpbWlsYXIgdG8gdGhvc2UgaW4gQ01DIGFuZCBkZWx0YUUgOTQgZm9ybXVsYWVcblx0bGV0IFNDID0gMSArIDAuMDQ1ICogQ2Rhc2g7XG5cblx0Ly8gQ3Jvc3MgdGVybSBUIGZvciBibHVlIG5vbi1saW5lYXJpdHlcblx0bGV0IFQgPSAxO1xuXHRUIC09ICgwLjE3ICogTWF0aC5jb3MoKCAgICAgaGRhc2ggLSAzMCkgICogZDJyJDEpKTtcblx0VCArPSAoMC4yNCAqIE1hdGguY29zKCAgMiAqIGhkYXNoICAgICAgICAqIGQyciQxKSk7XG5cdFQgKz0gKDAuMzIgKiBNYXRoLmNvcygoKDMgKiBoZGFzaCkgKyA2KSAgKiBkMnIkMSkpO1xuXHRUIC09ICgwLjIwICogTWF0aC5jb3MoKCg0ICogaGRhc2gpIC0gNjMpICogZDJyJDEpKTtcblxuXHQvLyBTSCBIdWUgZmFjdG9yIGRlcGVuZHMgb24gQ2hyb21hLFxuXHQvLyBhcyB3ZWxsIGFzIGFkanVzdGVkIGh1ZSBhbmdsZSBsaWtlIGRlbHRhRTk0LlxuXHRsZXQgU0ggPSAxICsgMC4wMTUgKiBDZGFzaCAqIFQ7XG5cblx0Ly8gUlQgSHVlIHJvdGF0aW9uIHRlcm0gY29tcGVuc2F0ZXMgZm9yIHJvdGF0aW9uIG9mIEpORCBlbGxpcHNlc1xuXHQvLyBhbmQgTXVuc2VsbCBjb25zdGFudCBodWUgbGluZXNcblx0Ly8gaW4gdGhlIG1lZGl1bS1oaWdoIENocm9tYSBibHVlIHJlZ2lvblxuXHQvLyAoSHVlIDIyNSB0byAzMTUpXG5cdGxldCDOlM64ID0gMzAgKiBNYXRoLmV4cCgtMSAqICgoKGhkYXNoIC0gMjc1KSAvIDI1KSAqKiAyKSk7XG5cdGxldCBSQyA9IDIgKiBNYXRoLnNxcnQoQ2Rhc2g3IC8gKENkYXNoNyArIEdmYWN0b3IpKTtcblx0bGV0IFJUID0gLTEgKiBNYXRoLnNpbigyICogzpTOuCAqIGQyciQxKSAqIFJDO1xuXG5cdC8vIEZpbmFsbHkgY2FsY3VsYXRlIHRoZSBkZWx0YUUsIHRlcm0gYnkgdGVybSBhcyByb290IHN1bWUgb2Ygc3F1YXJlc1xuXHRsZXQgZEUgPSAozpRMIC8gKGtMICogU0wpKSAqKiAyO1xuXHRkRSArPSAozpRDIC8gKGtDICogU0MpKSAqKiAyO1xuXHRkRSArPSAozpRIIC8gKGtIICogU0gpKSAqKiAyO1xuXHRkRSArPSBSVCAqICjOlEMgLyAoa0MgKiBTQykpICogKM6USCAvIChrSCAqIFNIKSk7XG5cdHJldHVybiBNYXRoLnNxcnQoZEUpO1xuXHQvLyBZYXkhISFcbn1cblxuLy8gUmVjYWxjdWxhdGVkIGZvciBjb25zaXN0ZW50IHJlZmVyZW5jZSB3aGl0ZVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvY3Nzd2ctZHJhZnRzL2lzc3Vlcy82NjQyI2lzc3VlY29tbWVudC05NDM1MjE0ODRcbmNvbnN0IFhZWnRvTE1TX00kMSA9IFtcblx0WyAwLjgxOTAyMjQzNzk5NjcwMzAsIDAuMzYxOTA2MjYwMDUyODkwNCwgLTAuMTI4ODczNzgxNTIwOTg3OSBdLFxuXHRbIDAuMDMyOTgzNjUzOTMyMzg4NSwgMC45MjkyODY4NjE1ODYzNDM0LCAgMC4wMzYxNDQ2NjYzNTA2NDI0IF0sXG5cdFsgMC4wNDgxNzcxODkzNTk2MjQyLCAwLjI2NDIzOTUzMTc1MjczMDgsICAwLjYzMzU0NzgyODQ2OTQzMDkgXSxcbl07XG4vLyBpbnZlcnNlIG9mIFhZWnRvTE1TX01cbmNvbnN0IExNU3RvWFlaX00kMSA9IFtcblx0WyAgMS4yMjY4Nzk4NzU4NDU5MjQzLCAtMC41NTc4MTQ5OTQ0NjAyMTcxLCAgMC4yODEzOTEwNDU2NjU5NjQ3IF0sXG5cdFsgLTAuMDQwNTc1NzQ1MjE0ODAwOCwgIDEuMTEyMjg2ODAzMjgwMzE3MCwgLTAuMDcxNzExMDU4MDY1NTE2NCBdLFxuXHRbIC0wLjA3NjM3MjkzNjY3NDY2MDEsIC0wLjQyMTQ5MzMzMjQwMjI0MzIsICAxLjU4NjkyNDAxOTgzNjc4MTYgXSxcbl07XG5jb25zdCBMTVN0b0xhYl9NID0gW1xuXHRbIDAuMjEwNDU0MjY4MzA5MzE0MCwgIDAuNzkzNjE3Nzc0NzAyMzA1NCwgLTAuMDA0MDcyMDQzMDExNjE5MyBdLFxuXHRbIDEuOTc3OTk4NTMyNDMxMTY4NCwgLTIuNDI4NTkyMjQyMDQ4NTc5OSwgIDAuNDUwNTkzNzA5NjE3NDExMCBdLFxuXHRbIDAuMDI1OTA0MDQyNDY1NTQ3OCwgIDAuNzgyNzcxNzEyNDU3NTI5NiwgLTAuODA4Njc1NzU0OTIzMDc3NCBdLFxuXTtcbi8vIExNU3RvSWFiX00gaW52ZXJ0ZWRcbmNvbnN0IExhYnRvTE1TX00gPSBbXG5cdFsgMS4wMDAwMDAwMDAwMDAwMDAwLCAgMC4zOTYzMzc3NzczNzYxNzQ5LCAgMC4yMTU4MDM3NTczMDk5MTM2IF0sXG5cdFsgMS4wMDAwMDAwMDAwMDAwMDAwLCAtMC4xMDU1NjEzNDU4MTU2NTg2LCAtMC4wNjM4NTQxNzI4MjU4MTMzIF0sXG5cdFsgMS4wMDAwMDAwMDAwMDAwMDAwLCAtMC4wODk0ODQxNzc1Mjk4MTE5LCAtMS4yOTE0ODU1NDgwMTk0MDkyIF0sXG5dO1xuXG52YXIgT0tMYWIgPSBuZXcgQ29sb3JTcGFjZSh7XG5cdGlkOiBcIm9rbGFiXCIsXG5cdG5hbWU6IFwiT2tsYWJcIixcblx0Y29vcmRzOiB7XG5cdFx0bDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxXSxcblx0XHRcdG5hbWU6IFwiTGlnaHRuZXNzXCIsXG5cdFx0fSxcblx0XHRhOiB7XG5cdFx0XHRyZWZSYW5nZTogWy0wLjQsIDAuNF0sXG5cdFx0fSxcblx0XHRiOiB7XG5cdFx0XHRyZWZSYW5nZTogWy0wLjQsIDAuNF0sXG5cdFx0fSxcblx0fSxcblxuXHQvLyBOb3RlIHRoYXQgWFlaIGlzIHJlbGF0aXZlIHRvIEQ2NVxuXHR3aGl0ZTogXCJENjVcIixcblx0YmFzZTogeHl6X2Q2NSxcblx0ZnJvbUJhc2UgKFhZWikge1xuXHRcdC8vIG1vdmUgdG8gTE1TIGNvbmUgZG9tYWluXG5cdFx0bGV0IExNUyA9IG11bHRpcGx5TWF0cmljZXMoWFladG9MTVNfTSQxLCBYWVopO1xuXG5cdFx0Ly8gbm9uLWxpbmVhcml0eVxuXHRcdGxldCBMTVNnID0gTE1TLm1hcCh2YWwgPT4gTWF0aC5jYnJ0KHZhbCkpO1xuXG5cdFx0cmV0dXJuIG11bHRpcGx5TWF0cmljZXMoTE1TdG9MYWJfTSwgTE1TZyk7XG5cblx0fSxcblx0dG9CYXNlIChPS0xhYikge1xuXHRcdC8vIG1vdmUgdG8gTE1TIGNvbmUgZG9tYWluXG5cdFx0bGV0IExNU2cgPSBtdWx0aXBseU1hdHJpY2VzKExhYnRvTE1TX00sIE9LTGFiKTtcblxuXHRcdC8vIHJlc3RvcmUgbGluZWFyaXR5XG5cdFx0bGV0IExNUyA9IExNU2cubWFwKHZhbCA9PiB2YWwgKiogMyk7XG5cblx0XHRyZXR1cm4gbXVsdGlwbHlNYXRyaWNlcyhMTVN0b1hZWl9NJDEsIExNUyk7XG5cdH0sXG5cblx0Zm9ybWF0czoge1xuXHRcdFwib2tsYWJcIjoge1xuXHRcdFx0Y29vcmRzOiBbXCI8cGVyY2VudGFnZT4gfCA8bnVtYmVyPlwiLCBcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+Wy0xLDFdXCIsIFwiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5bLTEsMV1cIl0sXG5cdFx0fSxcblx0fSxcbn0pO1xuXG4vLyBNb3JlIGFjY3VyYXRlIGNvbG9yLWRpZmZlcmVuY2UgZm9ybXVsYWVcbi8vIHRoYW4gdGhlIHNpbXBsZSAxOTc2IEV1Y2xpZGVhbiBkaXN0YW5jZSBpbiBDSUUgTGFiXG5cblxuZnVuY3Rpb24gZGVsdGFFT0sgKGNvbG9yLCBzYW1wbGUpIHtcblx0W2NvbG9yLCBzYW1wbGVdID0gZ2V0Q29sb3IoW2NvbG9yLCBzYW1wbGVdKTtcblxuXHQvLyBHaXZlbiB0aGlzIGNvbG9yIGFzIHRoZSByZWZlcmVuY2Vcblx0Ly8gYW5kIGEgc2FtcGxlLFxuXHQvLyBjYWxjdWxhdGUgZGVsdGFFT0ssIHRlcm0gYnkgdGVybSBhcyByb290IHN1bSBvZiBzcXVhcmVzXG5cdGxldCBbTDEsIGExLCBiMV0gPSBPS0xhYi5mcm9tKGNvbG9yKTtcblx0bGV0IFtMMiwgYTIsIGIyXSA9IE9LTGFiLmZyb20oc2FtcGxlKTtcblx0bGV0IM6UTCA9IEwxIC0gTDI7XG5cdGxldCDOlGEgPSBhMSAtIGEyO1xuXHRsZXQgzpRiID0gYjEgLSBiMjtcblx0cmV0dXJuIE1hdGguc3FydCjOlEwgKiogMiArIM6UYSAqKiAyICsgzpRiICoqIDIpO1xufVxuXG5jb25zdCDOtSQ1ID0gLjAwMDA3NTtcblxuLyoqXG4gKiBDaGVjayBpZiBhIGNvbG9yIGlzIGluIGdhbXV0IG9mIGVpdGhlciBpdHMgb3duIG9yIGFub3RoZXIgY29sb3Igc3BhY2VcbiAqIEByZXR1cm4ge0Jvb2xlYW59IElzIHRoZSBjb2xvciBpbiBnYW11dD9cbiAqL1xuZnVuY3Rpb24gaW5HYW11dCAoY29sb3IsIHNwYWNlLCB7ZXBzaWxvbiA9IM61JDV9ID0ge30pIHtcblx0Y29sb3IgPSBnZXRDb2xvcihjb2xvcik7XG5cblx0aWYgKCFzcGFjZSkge1xuXHRcdHNwYWNlID0gY29sb3Iuc3BhY2U7XG5cdH1cblxuXHRzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcblx0bGV0IGNvb3JkcyA9IGNvbG9yLmNvb3JkcztcblxuXHRpZiAoc3BhY2UgIT09IGNvbG9yLnNwYWNlKSB7XG5cdFx0Y29vcmRzID0gc3BhY2UuZnJvbShjb2xvcik7XG5cdH1cblxuXHRyZXR1cm4gc3BhY2UuaW5HYW11dChjb29yZHMsIHtlcHNpbG9ufSk7XG59XG5cbmZ1bmN0aW9uIGNsb25lIChjb2xvcikge1xuXHRyZXR1cm4ge1xuXHRcdHNwYWNlOiBjb2xvci5zcGFjZSxcblx0XHRjb29yZHM6IGNvbG9yLmNvb3Jkcy5zbGljZSgpLFxuXHRcdGFscGhhOiBjb2xvci5hbHBoYSxcblx0fTtcbn1cblxuLyoqXG4gKiBFdWNsaWRlYW4gZGlzdGFuY2Ugb2YgY29sb3JzIGluIGFuIGFyYml0cmFyeSBjb2xvciBzcGFjZVxuICovXG5mdW5jdGlvbiBkaXN0YW5jZSAoY29sb3IxLCBjb2xvcjIsIHNwYWNlID0gXCJsYWJcIikge1xuXHRzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcblxuXHQvLyBBc3N1bWUgZ2V0Q29sb3IoKSBpcyBjYWxsZWQgb24gY29sb3IgaW4gc3BhY2UuZnJvbSgpXG5cdGxldCBjb29yZHMxID0gc3BhY2UuZnJvbShjb2xvcjEpO1xuXHRsZXQgY29vcmRzMiA9IHNwYWNlLmZyb20oY29sb3IyKTtcblxuXHRyZXR1cm4gTWF0aC5zcXJ0KGNvb3JkczEucmVkdWNlKChhY2MsIGMxLCBpKSA9PiB7XG5cdFx0bGV0IGMyID0gY29vcmRzMltpXTtcblx0XHRpZiAoaXNOYU4oYzEpIHx8IGlzTmFOKGMyKSkge1xuXHRcdFx0cmV0dXJuIGFjYztcblx0XHR9XG5cblx0XHRyZXR1cm4gYWNjICsgKGMyIC0gYzEpICoqIDI7XG5cdH0sIDApKTtcbn1cblxuZnVuY3Rpb24gZGVsdGFFNzYgKGNvbG9yLCBzYW1wbGUpIHtcblx0Ly8gQXNzdW1lIGdldENvbG9yKCkgaXMgY2FsbGVkIGluIHRoZSBkaXN0YW5jZSBmdW5jdGlvblxuXHRyZXR1cm4gZGlzdGFuY2UoY29sb3IsIHNhbXBsZSwgXCJsYWJcIik7XG59XG5cbi8vIE1vcmUgYWNjdXJhdGUgY29sb3ItZGlmZmVyZW5jZSBmb3JtdWxhZVxuLy8gdGhhbiB0aGUgc2ltcGxlIDE5NzYgRXVjbGlkZWFuIGRpc3RhbmNlIGluIExhYlxuXG4vLyBDTUMgYnkgdGhlIENvbG9yIE1lYXN1cmVtZW50IENvbW1pdHRlZSBvZiB0aGVcbi8vIEJyYWRmb3JkIFNvY2lldHkgb2YgRHllaXN0cyBhbmQgQ29sb3JzdHMsIDE5OTQuXG4vLyBVc2VzIExDSCByYXRoZXIgdGhhbiBMYWIsXG4vLyB3aXRoIGRpZmZlcmVudCB3ZWlnaHRzIGZvciBMLCBDIGFuZCBIIGRpZmZlcmVuY2VzXG4vLyBBIG5pY2UgaW5jcmVhc2UgaW4gYWNjdXJhY3kgZm9yIG1vZGVzdCBpbmNyZWFzZSBpbiBjb21wbGV4aXR5XG5jb25zdCDPgCA9IE1hdGguUEk7XG5jb25zdCBkMnIgPSDPgCAvIDE4MDtcblxuZnVuY3Rpb24gZGVsdGFFQ01DIChjb2xvciwgc2FtcGxlLCB7bCA9IDIsIGMgPSAxfSA9IHt9KSB7XG5cdFtjb2xvciwgc2FtcGxlXSA9IGdldENvbG9yKFtjb2xvciwgc2FtcGxlXSk7XG5cblx0Ly8gR2l2ZW4gdGhpcyBjb2xvciBhcyB0aGUgcmVmZXJlbmNlXG5cdC8vIGFuZCBhIHNhbXBsZSxcblx0Ly8gY2FsY3VsYXRlIGRlbHRhRSBDTUMuXG5cblx0Ly8gVGhpcyBpbXBsZW1lbnRhdGlvbiBhc3N1bWVzIHRoZSBwYXJhbWV0cmljXG5cdC8vIHdlaWdodGluZyBmYWN0b3JzIGw6YyBhcmUgMjoxXG5cdC8vIHdoaWNoIGlzIHR5cGljYWwgZm9yIG5vbi10ZXh0aWxlIHVzZXMuXG5cblx0bGV0IFtMMSwgYTEsIGIxXSA9IGxhYi5mcm9tKGNvbG9yKTtcblx0bGV0IFssIEMxLCBIMV0gPSBsY2guZnJvbShsYWIsIFtMMSwgYTEsIGIxXSk7XG5cdGxldCBbTDIsIGEyLCBiMl0gPSBsYWIuZnJvbShzYW1wbGUpO1xuXHRsZXQgQzIgPSBsY2guZnJvbShsYWIsIFtMMiwgYTIsIGIyXSlbMV07XG5cblx0Ly8gbGV0IFtMMSwgYTEsIGIxXSA9IGNvbG9yLmdldEFsbChsYWIpO1xuXHQvLyBsZXQgQzEgPSBjb2xvci5nZXQoXCJsY2guY1wiKTtcblx0Ly8gbGV0IEgxID0gY29sb3IuZ2V0KFwibGNoLmhcIik7XG5cdC8vIGxldCBbTDIsIGEyLCBiMl0gPSBzYW1wbGUuZ2V0QWxsKGxhYik7XG5cdC8vIGxldCBDMiA9IHNhbXBsZS5nZXQoXCJsY2guY1wiKTtcblxuXHQvLyBDaGVjayBmb3IgbmVnYXRpdmUgQ2hyb21hLFxuXHQvLyB3aGljaCBtaWdodCBoYXBwZW4gdGhyb3VnaFxuXHQvLyBkaXJlY3QgdXNlciBpbnB1dCBvZiBMQ0ggdmFsdWVzXG5cblx0aWYgKEMxIDwgMCkge1xuXHRcdEMxID0gMDtcblx0fVxuXHRpZiAoQzIgPCAwKSB7XG5cdFx0QzIgPSAwO1xuXHR9XG5cblx0Ly8gd2UgZG9uJ3QgbmVlZCBIMiBhcyDOlEggaXMgY2FsY3VsYXRlZCBmcm9tIM6UYSwgzpRiIGFuZCDOlENcblxuXHQvLyBMaWdodG5lc3MgYW5kIENocm9tYSBkaWZmZXJlbmNlc1xuXHQvLyBUaGVzZSBhcmUgKGNvbG9yIC0gc2FtcGxlKSwgdW5saWtlIGRlbHRhRTIwMDBcblx0bGV0IM6UTCA9IEwxIC0gTDI7XG5cdGxldCDOlEMgPSBDMSAtIEMyO1xuXG5cdGxldCDOlGEgPSBhMSAtIGEyO1xuXHRsZXQgzpRiID0gYjEgLSBiMjtcblxuXHQvLyB3ZWlnaHRlZCBIdWUgZGlmZmVyZW5jZSwgbGVzcyBmb3IgbGFyZ2VyIENocm9tYSBkaWZmZXJlbmNlXG5cblx0bGV0IEgyID0gKM6UYSAqKiAyKSArICjOlGIgKiogMikgLSAozpRDICoqIDIpO1xuXHQvLyBkdWUgdG8gcm91bmRvZmYgZXJyb3IgaXQgaXMgcG9zc2libGUgdGhhdCwgZm9yIHplcm8gYSBhbmQgYixcblx0Ly8gzpRDID4gzpRhICsgzpRiIGlzIDAsIHJlc3VsdGluZyBpbiBhdHRlbXB0aW5nXG5cdC8vIHRvIHRha2UgdGhlIHNxdWFyZSByb290IG9mIGEgbmVnYXRpdmUgbnVtYmVyXG5cblx0Ly8gdHJ5aW5nIGluc3RlYWQgdGhlIGVxdWF0aW9uIGZyb20gSW5kdXN0cmlhbCBDb2xvciBQaHlzaWNzXG5cdC8vIEJ5IEdlb3JnIEEuIEtsZWluXG5cblx0Ly8gbGV0IM6USCA9ICgoYTEgKiBiMikgLSAoYTIgKiBiMSkpIC8gTWF0aC5zcXJ0KDAuNSAqICgoQzIgKiBDMSkgKyAoYTIgKiBhMSkgKyAoYjIgKiBiMSkpKTtcblx0Ly8gY29uc29sZS5sb2coe86USH0pO1xuXHQvLyBUaGlzIGdpdmVzIHRoZSBzYW1lIHJlc3VsdCB0byAxMiBkZWNpbWFsIHBsYWNlc1xuXHQvLyBleGNlcHQgaXQgc29tZXRpbWVzIE5hTnMgd2hlbiB0cnlpbmcgdG8gcm9vdCBhIG5lZ2F0aXZlIG51bWJlclxuXG5cdC8vIGxldCDOlEggPSBNYXRoLnNxcnQoSDIpOyB3ZSBuZXZlciBhY3R1YWxseSB1c2UgdGhlIHJvb3QsIGl0IGdldHMgc3F1YXJlZCBhZ2FpbiEhXG5cblx0Ly8gcG9zaXRpb25hbCBjb3JyZWN0aW9ucyB0byB0aGUgbGFjayBvZiB1bmlmb3JtaXR5IG9mIENJRUxBQlxuXHQvLyBUaGVzZSBhcmUgYWxsIHRyeWluZyB0byBtYWtlIEpORCBlbGxpcHNvaWRzIG1vcmUgbGlrZSBzcGhlcmVzXG5cblx0Ly8gU0wgTGlnaHRuZXNzIGNyaXNwZW5pbmcgZmFjdG9yLCBkZXBlbmRzIGVudGlyZWx5IG9uIEwxIG5vdCBMMlxuXHRsZXQgU0wgPSAwLjUxMTtcdC8vIGxpbmVhciBwb3J0aW9uIG9mIHRoZSBZIHRvIEwgdHJhbnNmZXIgZnVuY3Rpb25cblx0aWYgKEwxID49IDE2KSB7XHQvLyBjdWJpYyBwb3J0aW9uXG5cdFx0U0wgPSAoMC4wNDA5NzUgKiBMMSkgLyAoMSArIDAuMDE3NjUgKiBMMSk7XG5cdH1cblxuXHQvLyBTQyBDaHJvbWEgZmFjdG9yXG5cdGxldCBTQyA9ICgoMC4wNjM4ICogQzEpIC8gKDEgKyAwLjAxMzEgKiBDMSkpICsgMC42Mzg7XG5cblx0Ly8gQ3Jvc3MgdGVybSBUIGZvciBibHVlIG5vbi1saW5lYXJpdHlcblx0bGV0IFQ7XG5cdGlmIChOdW1iZXIuaXNOYU4oSDEpKSB7XG5cdFx0SDEgPSAwO1xuXHR9XG5cblx0aWYgKEgxID49IDE2NCAmJiBIMSA8PSAzNDUpIHtcblx0XHRUID0gMC41NiArIE1hdGguYWJzKDAuMiAqIE1hdGguY29zKChIMSArIDE2OCkgKiBkMnIpKTtcblx0fVxuXHRlbHNlIHtcblx0XHRUID0gMC4zNiArIE1hdGguYWJzKDAuNCAqIE1hdGguY29zKChIMSArIDM1KSAqIGQycikpO1xuXHR9XG5cdC8vIGNvbnNvbGUubG9nKHtUfSk7XG5cblx0Ly8gU0ggSHVlIGZhY3RvciBhbHNvIGRlcGVuZHMgb24gQzEsXG5cdGxldCBDNCA9IE1hdGgucG93KEMxLCA0KTtcblx0bGV0IEYgPSBNYXRoLnNxcnQoQzQgLyAoQzQgKyAxOTAwKSk7XG5cdGxldCBTSCA9IFNDICogKChGICogVCkgKyAxIC0gRik7XG5cblx0Ly8gRmluYWxseSBjYWxjdWxhdGUgdGhlIGRlbHRhRSwgdGVybSBieSB0ZXJtIGFzIHJvb3Qgc3VtZSBvZiBzcXVhcmVzXG5cdGxldCBkRSA9ICjOlEwgLyAobCAqIFNMKSkgKiogMjtcblx0ZEUgKz0gKM6UQyAvIChjICogU0MpKSAqKiAyO1xuXHRkRSArPSAoSDIgLyAoU0ggKiogMikpO1xuXHQvLyBkRSArPSAozpRIIC8gU0gpICAqKiAyO1xuXHRyZXR1cm4gTWF0aC5zcXJ0KGRFKTtcblx0Ly8gWWF5ISEhXG59XG5cbmNvbnN0IFl3JDEgPSAyMDM7XHQvLyBhYnNvbHV0ZSBsdW1pbmFuY2Ugb2YgbWVkaWEgd2hpdGVcblxudmFyIFhZWl9BYnNfRDY1ID0gbmV3IENvbG9yU3BhY2Uoe1xuLy8gQWJzb2x1dGUgQ0lFIFhZWiwgd2l0aCBhIEQ2NSB3aGl0ZXBvaW50LFxuLy8gYXMgdXNlZCBpbiBtb3N0IEhEUiBjb2xvcnNwYWNlcyBhcyBhIHN0YXJ0aW5nIHBvaW50LlxuLy8gU0RSIHNwYWNlcyBhcmUgY29udmVydGVkIHBlciBCVC4yMDQ4XG4vLyBzbyB0aGF0IGRpZmZ1c2UsIG1lZGlhIHdoaXRlIGlzIDIwMyBjZC9twrJcblx0aWQ6IFwieHl6LWFicy1kNjVcIixcblx0Y3NzSWQ6IFwiLS14eXotYWJzLWQ2NVwiLFxuXHRuYW1lOiBcIkFic29sdXRlIFhZWiBENjVcIixcblx0Y29vcmRzOiB7XG5cdFx0eDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCA5NTA0LjddLFxuXHRcdFx0bmFtZTogXCJYYVwiLFxuXHRcdH0sXG5cdFx0eToge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxMDAwMF0sXG5cdFx0XHRuYW1lOiBcIllhXCIsXG5cdFx0fSxcblx0XHR6OiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDEwODg4LjNdLFxuXHRcdFx0bmFtZTogXCJaYVwiLFxuXHRcdH0sXG5cdH0sXG5cblx0YmFzZTogeHl6X2Q2NSxcblx0ZnJvbUJhc2UgKFhZWikge1xuXHRcdC8vIE1ha2UgWFlaIGFic29sdXRlLCBub3QgcmVsYXRpdmUgdG8gbWVkaWEgd2hpdGVcblx0XHQvLyBNYXhpbXVtIGx1bWluYW5jZSBpbiBQUSBpcyAxMCwwMDAgY2QvbcKyXG5cdFx0Ly8gUmVsYXRpdmUgWFlaIGhhcyBZPTEgZm9yIG1lZGlhIHdoaXRlXG5cdFx0cmV0dXJuIFhZWi5tYXAgKHYgPT4gTWF0aC5tYXgodiAqIFl3JDEsIDApKTtcblx0fSxcblx0dG9CYXNlIChBYnNYWVopIHtcblx0XHQvLyBDb252ZXJ0IHRvIG1lZGlhLXdoaXRlIHJlbGF0aXZlIFhZWlxuXHRcdHJldHVybiBBYnNYWVoubWFwKHYgPT4gTWF0aC5tYXgodiAvIFl3JDEsIDApKTtcblx0fSxcbn0pO1xuXG5jb25zdCBiJDEgPSAxLjE1O1xuY29uc3QgZyA9IDAuNjY7XG5jb25zdCBuJDEgPSAyNjEwIC8gKDIgKiogMTQpO1xuY29uc3QgbmludiQxID0gKDIgKiogMTQpIC8gMjYxMDtcbmNvbnN0IGMxJDIgPSAzNDI0IC8gKDIgKiogMTIpO1xuY29uc3QgYzIkMiA9IDI0MTMgLyAoMiAqKiA3KTtcbmNvbnN0IGMzJDIgPSAyMzkyIC8gKDIgKiogNyk7XG5jb25zdCBwID0gMS43ICogMjUyMyAvICgyICoqIDUpO1xuY29uc3QgcGludiA9ICgyICoqIDUpIC8gKDEuNyAqIDI1MjMpO1xuY29uc3QgZCA9IC0wLjU2O1xuY29uc3QgZDAgPSAxLjYyOTU0OTk1MzI4MjE1NjZFLTExO1xuXG5jb25zdCBYWVp0b0NvbmVfTSA9IFtcblx0WyAgMC40MTQ3ODk3MiwgMC41Nzk5OTksICAwLjAxNDY0ODAgXSxcblx0WyAtMC4yMDE1MTAwLCAgMS4xMjA2NDksICAwLjA1MzEwMDggXSxcblx0WyAtMC4wMTY2MDA4LCAgMC4yNjQ4MDAsICAwLjY2ODQ3OTkgXSxcbl07XG4vLyBYWVp0b0NvbmVfTSBpbnZlcnRlZFxuY29uc3QgQ29uZXRvWFlaX00gPSBbXG5cdFsgIDEuOTI0MjI2NDM1Nzg3NjA2NywgIC0xLjAwNDc5MjMxMjU5NTM2NTcsICAwLjAzNzY1MTQwNDAzMDYxOCAgIF0sXG5cdFsgIDAuMzUwMzE2NzYyMDk0OTk5MDcsICAwLjcyNjQ4MTE5MzkzMTY1NTIsIC0wLjA2NTM4NDQyMjk0ODA4NTAxIF0sXG5cdFsgLTAuMDkwOTgyODEwOTgyODQ3NTIsIC0wLjMxMjcyODI5MDUyMzA3MzksICAxLjUyMjc2NjU2MTMwNTI2MDMgIF0sXG5dO1xuY29uc3QgQ29uZXRvSWFiX00gPSBbXG5cdFsgIDAuNSwgICAgICAgMC41LCAgICAgICAwICAgICAgICBdLFxuXHRbICAzLjUyNDAwMCwgLTQuMDY2NzA4LCAgMC41NDI3MDggXSxcblx0WyAgMC4xOTkwNzYsICAxLjA5Njc5OSwgLTEuMjk1ODc1IF0sXG5dO1xuLy8gQ29uZXRvSWFiX00gaW52ZXJ0ZWRcbmNvbnN0IElhYnRvQ29uZV9NID0gW1xuXHRbIDEsICAgICAgICAgICAgICAgICAgIDAuMTM4NjA1MDQzMjcxNTM5MywgICAwLjA1ODA0NzMxNjE1NjExODg2IF0sXG5cdFsgMC45OTk5OTk5OTk5OTk5OTk5LCAtMC4xMzg2MDUwNDMyNzE1MzkzLCAgLTAuMDU4MDQ3MzE2MTU2MTE4ODYgXSxcblx0WyAwLjk5OTk5OTk5OTk5OTk5OTgsIC0wLjA5NjAxOTI0MjAyNjMxODk1LCAtMC44MTE4OTE4OTYwNTYwMzg4ICBdLFxuXTtcblxudmFyIEp6YXpieiA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwianphemJ6XCIsXG5cdG5hbWU6IFwiSnphemJ6XCIsXG5cdGNvb3Jkczoge1xuXHRcdGp6OiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDFdLFxuXHRcdFx0bmFtZTogXCJKelwiLFxuXHRcdH0sXG5cdFx0YXo6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTAuNSwgMC41XSxcblx0XHR9LFxuXHRcdGJ6OiB7XG5cdFx0XHRyZWZSYW5nZTogWy0wLjUsIDAuNV0sXG5cdFx0fSxcblx0fSxcblxuXHRiYXNlOiBYWVpfQWJzX0Q2NSxcblx0ZnJvbUJhc2UgKFhZWikge1xuXHRcdC8vIEZpcnN0IG1ha2UgWFlaIGFic29sdXRlLCBub3QgcmVsYXRpdmUgdG8gbWVkaWEgd2hpdGVcblx0XHQvLyBNYXhpbXVtIGx1bWluYW5jZSBpbiBQUSBpcyAxMCwwMDAgY2QvbcKyXG5cdFx0Ly8gUmVsYXRpdmUgWFlaIGhhcyBZPTEgZm9yIG1lZGlhIHdoaXRlXG5cdFx0Ly8gQlQuMjA0OCBzYXlzIG1lZGlhIHdoaXRlIFk9MjAzIGF0IFBRIDU4XG5cblx0XHRsZXQgWyBYYSwgWWEsIFphIF0gPSBYWVo7XG5cblx0XHQvLyBtb2RpZnkgWCBhbmQgWVxuXHRcdGxldCBYbSA9IChiJDEgKiBYYSkgLSAoKGIkMSAtIDEpICogWmEpO1xuXHRcdGxldCBZbSA9IChnICogWWEpIC0gKChnIC0gMSkgKiBYYSk7XG5cblx0XHQvLyBtb3ZlIHRvIExNUyBjb25lIGRvbWFpblxuXHRcdGxldCBMTVMgPSBtdWx0aXBseU1hdHJpY2VzKFhZWnRvQ29uZV9NLCBbIFhtLCBZbSwgWmEgXSk7XG5cblx0XHQvLyBQUS1lbmNvZGUgTE1TXG5cdFx0bGV0IFBRTE1TID0gTE1TLm1hcCAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0bGV0IG51bSA9IGMxJDIgKyAoYzIkMiAqICgodmFsIC8gMTAwMDApICoqIG4kMSkpO1xuXHRcdFx0bGV0IGRlbm9tID0gMSArIChjMyQyICogKCh2YWwgLyAxMDAwMCkgKiogbiQxKSk7XG5cblx0XHRcdHJldHVybiAobnVtIC8gZGVub20pICAqKiBwO1xuXHRcdH0pO1xuXG5cdFx0Ly8gYWxtb3N0IHRoZXJlLCBjYWxjdWxhdGUgSXogYXogYnpcblx0XHRsZXQgWyBJeiwgYXosIGJ6XSA9IG11bHRpcGx5TWF0cmljZXMoQ29uZXRvSWFiX00sIFBRTE1TKTtcblx0XHQvLyBjb25zb2xlLmxvZyh7SXosIGF6LCBien0pO1xuXG5cdFx0bGV0IEp6ID0gKCgxICsgZCkgKiBJeikgLyAoMSArIChkICogSXopKSAtIGQwO1xuXHRcdHJldHVybiBbSnosIGF6LCBiel07XG5cdH0sXG5cdHRvQmFzZSAoSnphemJ6KSB7XG5cdFx0bGV0IFtKeiwgYXosIGJ6XSA9IEp6YXpiejtcblx0XHRsZXQgSXogPSAoSnogKyBkMCkgLyAoMSArIGQgLSBkICogKEp6ICsgZDApKTtcblxuXHRcdC8vIGJyaW5nIGludG8gTE1TIGNvbmUgZG9tYWluXG5cdFx0bGV0IFBRTE1TID0gbXVsdGlwbHlNYXRyaWNlcyhJYWJ0b0NvbmVfTSwgWyBJeiwgYXosIGJ6IF0pO1xuXG5cdFx0Ly8gY29udmVydCBmcm9tIFBRLWNvZGVkIHRvIGxpbmVhci1saWdodFxuXHRcdGxldCBMTVMgPSBQUUxNUy5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0bGV0IG51bSA9IChjMSQyIC0gKHZhbCAqKiBwaW52KSk7XG5cdFx0XHRsZXQgZGVub20gPSAoYzMkMiAqICh2YWwgKiogcGludikpIC0gYzIkMjtcblx0XHRcdGxldCB4ID0gMTAwMDAgKiAoKG51bSAvIGRlbm9tKSAqKiBuaW52JDEpO1xuXG5cdFx0XHRyZXR1cm4gKHgpOyBcdC8vIGx1bWluYW5jZSByZWxhdGl2ZSB0byBkaWZmdXNlIHdoaXRlLCBbMCwgNzAgb3Igc29dLlxuXHRcdH0pO1xuXG5cdFx0Ly8gbW9kaWZpZWQgYWJzIFhZWlxuXHRcdGxldCBbIFhtLCBZbSwgWmEgXSA9IG11bHRpcGx5TWF0cmljZXMoQ29uZXRvWFlaX00sIExNUyk7XG5cblx0XHQvLyByZXN0b3JlIHN0YW5kYXJkIEQ1MCByZWxhdGl2ZSBYWVosIHJlbGF0aXZlIHRvIG1lZGlhIHdoaXRlXG5cdFx0bGV0IFhhID0gKFhtICsgKChiJDEgLSAxKSAqIFphKSkgLyBiJDE7XG5cdFx0bGV0IFlhID0gKFltICsgKChnIC0gMSkgKiBYYSkpIC8gZztcblx0XHRyZXR1cm4gWyBYYSwgWWEsIFphIF07XG5cdH0sXG5cblx0Zm9ybWF0czoge1xuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29sb3ItaGRyLyNKemF6Ynpcblx0XHRcImNvbG9yXCI6IHtcblx0XHRcdGNvb3JkczogW1wiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5cIiwgXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlstMSwxXVwiLCBcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+Wy0xLDFdXCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxudmFyIGp6Y3poeiA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwianpjemh6XCIsXG5cdG5hbWU6IFwiSnpDekh6XCIsXG5cdGNvb3Jkczoge1xuXHRcdGp6OiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDFdLFxuXHRcdFx0bmFtZTogXCJKelwiLFxuXHRcdH0sXG5cdFx0Y3o6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMV0sXG5cdFx0XHRuYW1lOiBcIkNocm9tYVwiLFxuXHRcdH0sXG5cdFx0aHo6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0fSxcblxuXHRiYXNlOiBKemF6YnosXG5cdGZyb21CYXNlIChqemF6YnopIHtcblx0XHQvLyBDb252ZXJ0IHRvIHBvbGFyIGZvcm1cblx0XHRsZXQgW0p6LCBheiwgYnpdID0ganphemJ6O1xuXHRcdGxldCBodWU7XG5cdFx0Y29uc3QgzrUgPSAwLjAwMDI7IC8vIGNocm9tYXRpYyBjb21wb25lbnRzIG11Y2ggc21hbGxlciB0aGFuIGEsYlxuXG5cdFx0aWYgKE1hdGguYWJzKGF6KSA8IM61ICYmIE1hdGguYWJzKGJ6KSA8IM61KSB7XG5cdFx0XHRodWUgPSBOYU47XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aHVlID0gTWF0aC5hdGFuMihieiwgYXopICogMTgwIC8gTWF0aC5QSTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0SnosIC8vIEp6IGlzIHN0aWxsIEp6XG5cdFx0XHRNYXRoLnNxcnQoYXogKiogMiArIGJ6ICoqIDIpLCAvLyBDaHJvbWFcblx0XHRcdGNvbnN0cmFpbihodWUpLCAvLyBIdWUsIGluIGRlZ3JlZXMgWzAgdG8gMzYwKVxuXHRcdF07XG5cdH0sXG5cdHRvQmFzZSAoanpjemh6KSB7XG5cdFx0Ly8gQ29udmVydCBmcm9tIHBvbGFyIGZvcm1cblx0XHQvLyBkZWJ1Z2dlcjtcblx0XHRyZXR1cm4gW1xuXHRcdFx0anpjemh6WzBdLCAvLyBKeiBpcyBzdGlsbCBKelxuXHRcdFx0anpjemh6WzFdICogTWF0aC5jb3Moanpjemh6WzJdICogTWF0aC5QSSAvIDE4MCksIC8vIGF6XG5cdFx0XHRqemN6aHpbMV0gKiBNYXRoLnNpbihqemN6aHpbMl0gKiBNYXRoLlBJIC8gMTgwKSwgIC8vIGJ6XG5cdFx0XTtcblx0fSxcbn0pO1xuXG4vLyBNb3JlIGFjY3VyYXRlIGNvbG9yLWRpZmZlcmVuY2UgZm9ybXVsYWVcbi8vIHRoYW4gdGhlIHNpbXBsZSAxOTc2IEV1Y2xpZGVhbiBkaXN0YW5jZSBpbiBMYWJcblxuLy8gVXNlcyBKekN6SHosIHdoaWNoIGhhcyBpbXByb3ZlZCBwZXJjZXB0dWFsIHVuaWZvcm1pdHlcbi8vIGFuZCB0aHVzIGEgc2ltcGxlIEV1Y2xpZGVhbiByb290LXN1bSBvZiDOlEzCsiDOlEPCsiDOlEjCslxuLy8gZ2l2ZXMgZ29vZCByZXN1bHRzLlxuXG5mdW5jdGlvbiBkZWx0YUVKeiAoY29sb3IsIHNhbXBsZSkge1xuXHRbY29sb3IsIHNhbXBsZV0gPSBnZXRDb2xvcihbY29sb3IsIHNhbXBsZV0pO1xuXG5cdC8vIEdpdmVuIHRoaXMgY29sb3IgYXMgdGhlIHJlZmVyZW5jZVxuXHQvLyBhbmQgYSBzYW1wbGUsXG5cdC8vIGNhbGN1bGF0ZSBkZWx0YUUgaW4gSnpDekh6LlxuXHRsZXQgW0p6MSwgQ3oxLCBIejFdID0ganpjemh6LmZyb20oY29sb3IpO1xuXHRsZXQgW0p6MiwgQ3oyLCBIejJdID0ganpjemh6LmZyb20oc2FtcGxlKTtcblxuXHQvLyBMaWdodG5lc3MgYW5kIENocm9tYSBkaWZmZXJlbmNlc1xuXHQvLyBzaWduIGRvZXMgbm90IG1hdHRlciBhcyB0aGV5IGFyZSBzcXVhcmVkLlxuXHRsZXQgzpRKID0gSnoxIC0gSnoyO1xuXHRsZXQgzpRDID0gQ3oxIC0gQ3oyO1xuXG5cdC8vIGxlbmd0aCBvZiBjaG9yZCBmb3IgzpRIXG5cdGlmICgoTnVtYmVyLmlzTmFOKEh6MSkpICYmIChOdW1iZXIuaXNOYU4oSHoyKSkpIHtcblx0XHQvLyBib3RoIHVuZGVmaW5lZCBodWVzXG5cdFx0SHoxID0gMDtcblx0XHRIejIgPSAwO1xuXHR9XG5cdGVsc2UgaWYgKE51bWJlci5pc05hTihIejEpKSB7XG5cdFx0Ly8gb25lIHVuZGVmaW5lZCwgc2V0IHRvIHRoZSBkZWZpbmVkIGh1ZVxuXHRcdEh6MSA9IEh6Mjtcblx0fVxuXHRlbHNlIGlmIChOdW1iZXIuaXNOYU4oSHoyKSkge1xuXHRcdEh6MiA9IEh6MTtcblx0fVxuXG5cdGxldCDOlGggPSBIejEgLSBIejI7XG5cdGxldCDOlEggPSAyICogTWF0aC5zcXJ0KEN6MSAqIEN6MikgKiBNYXRoLnNpbigozpRoIC8gMikgKiAoTWF0aC5QSSAvIDE4MCkpO1xuXG5cdHJldHVybiBNYXRoLnNxcnQozpRKICoqIDIgKyDOlEMgKiogMiArIM6USCAqKiAyKTtcbn1cblxuY29uc3QgYzEkMSA9IDM0MjQgLyA0MDk2O1xuY29uc3QgYzIkMSA9IDI0MTMgLyAxMjg7XG5jb25zdCBjMyQxID0gMjM5MiAvIDEyODtcbmNvbnN0IG0xJDEgPSAyNjEwIC8gMTYzODQ7XG5jb25zdCBtMiA9IDI1MjMgLyAzMjtcbmNvbnN0IGltMSA9IDE2Mzg0IC8gMjYxMDtcbmNvbnN0IGltMiA9IDMyIC8gMjUyMztcblxuLy8gVGhlIG1hdHJpeCBiZWxvdyBpbmNsdWRlcyB0aGUgNCUgY3Jvc3N0YWxrIGNvbXBvbmVudHNcbi8vIGFuZCBpcyBmcm9tIHRoZSBEb2xieSBcIldoYXQgaXMgSUN0Q3BcIiBwYXBlclwiXG5jb25zdCBYWVp0b0xNU19NID0gW1xuXHRbICAwLjM1OTI4MzI1OTAxMjEyMTcsICAwLjY5NzYwNTExNDc3Nzk1MDIsIC0wLjAzNTg5MTU5MzIzMjAyOTAgXSxcblx0WyAtMC4xOTIwODA4NDYzNzA0OTkzLCAgMS4xMDA0NzY3OTcwMzc0MzIxLCAgMC4wNzUzNzQ4NjU4NTE5MTE4IF0sXG5cdFsgIDAuMDA3MDc5Nzg0NDYwNzQ3OSwgIDAuMDc0ODM5NjY2MjE4NjM2MiwgIDAuODQzMzI2NTQ1Mzg5ODc2NSBdLFxuXTtcbi8vIGxpbmVhci1saWdodCBSZWMuMjAyMCB0byBMTVMsIGFnYWluIHdpdGggY3Jvc3N0YWxrXG4vLyByYXRpb25hbCB0ZXJtcyBmcm9tIEphbiBGcsO2aGxpY2gsXG4vLyBFbmNvZGluZyBIaWdoIER5bmFtaWMgUmFuZ2UgYW5kV2lkZSBDb2xvciBHYW11dCBJbWFnZXJ5LCBwLjk3XG4vLyBhbmQgSVRVLVIgQlQuMjEyNC0wIHAuMlxuLypcbmNvbnN0IFJlYzIwMjB0b0xNU19NID0gW1xuXHRbIDE2ODggLyA0MDk2LCAgMjE0NiAvIDQwOTYsICAgMjYyIC8gNDA5NiBdLFxuXHRbICA2ODMgLyA0MDk2LCAgMjk1MSAvIDQwOTYsICAgNDYyIC8gNDA5NiBdLFxuXHRbICAgOTkgLyA0MDk2LCAgIDMwOSAvIDQwOTYsICAzNjg4IC8gNDA5NiBdXG5dO1xuKi9cbi8vIHRoaXMgaW5jbHVkZXMgdGhlIEVibmVyIExNUyBjb2VmZmljaWVudHMsXG4vLyB0aGUgcm90YXRpb24sIGFuZCB0aGUgc2NhbGluZyB0byBbLTAuNSwwLjVdIHJhbmdlXG4vLyByYXRpb25hbCB0ZXJtcyBmcm9tIEZyw7ZobGljaCBwLjk3XG4vLyBhbmQgSVRVLVIgQlQuMjEyNC0wIHBwLjItM1xuY29uc3QgTE1TdG9JUFRfTSA9IFtcblx0WyAgMjA0OCAvIDQwOTYsICAgMjA0OCAvIDQwOTYsICAgICAgIDAgICAgICBdLFxuXHRbICA2NjEwIC8gNDA5NiwgLTEzNjEzIC8gNDA5NiwgIDcwMDMgLyA0MDk2IF0sXG5cdFsgMTc5MzMgLyA0MDk2LCAtMTczOTAgLyA0MDk2LCAgLTU0MyAvIDQwOTYgXSxcbl07XG5cbi8vIGludmVydGVkIG1hdHJpY2VzLCBjYWxjdWxhdGVkIGZyb20gdGhlIGFib3ZlXG5jb25zdCBJUFR0b0xNU19NID0gW1xuXHRbIDAuOTk5OTk5OTk5OTk5OTk5OCwgIDAuMDA4NjA5MDM3MDM3OTMyOCwgIDAuMTExMDI5NjI1MDAzMDI2MCBdLFxuXHRbIDAuOTk5OTk5OTk5OTk5OTk5OCwgLTAuMDA4NjA5MDM3MDM3OTMyOCwgLTAuMTExMDI5NjI1MDAzMDI1OSBdLFxuXHRbIDAuOTk5OTk5OTk5OTk5OTk5OCwgIDAuNTYwMDMxMzM1NzEwNjc5MSwgLTAuMzIwNjI3MTc0OTg3MzE4OCBdLFxuXTtcbi8qXG5jb25zdCBMTVN0b1JlYzIwMjBfTSA9IFtcblx0WyAzLjQzNzU1Njg5MzI4MTQwMTIxMTIsICAgLTIuNTA3MjExMjEyNTA5NTA1ODE5NSwgICAwLjA2OTY1NDMxOTIyODEwNDYwODM4Ml0sXG5cdFstMC43OTE0Mjg2ODY2NTY0NDE1NjEyNSwgICAxLjk4MzgzNzIxOTg3NDAwODk4NzQsICAtMC4xOTI0MDg1MzMyMTc1Njc0MjYyNiBdLFxuXHRbLTAuMDI1NjQ2NjYyOTExNTA2NDc2MzYzLCAtMC4wOTkyNDAyNDg2NDM5NDU1NjY3NTEsIDEuMTI0ODg2OTExNTU1NDUyMDQzMSAgXVxuXTtcbiovXG5jb25zdCBMTVN0b1hZWl9NID0gW1xuXHRbICAyLjA3MDE1MjIxODM4OTQyMjMsIC0xLjMyNjM0NzMzODk2NzE1NjMsICAwLjIwNjY1MTA0NzYyOTQwNTMgXSxcblx0WyAgMC4zNjQ3Mzg1MjA5NzQ4MDcyLCAgMC42ODA1NjYwMjQ5NDcyMjczLCAtMC4wNDUzMDQ1NDU5MjIwMzQ3IF0sXG5cdFsgLTAuMDQ5NzQ3MjA3NTM1ODEyMywgLTAuMDQ5MjYwOTY2Njk2NjEzMSwgIDEuMTg4MDY1OTI0OTkyMzA0MiBdLFxuXTtcblxuLy8gT25seSB0aGUgUFEgZm9ybSBvZiBJQ3RDcCBpcyBpbXBsZW1lbnRlZCBoZXJlLiBUaGVyZSBpcyBhbHNvIGFuIEhMRyBmb3JtLlxuLy8gZnJvbSBEb2xieSwgXCJXSEFUIElTIElDVENQP1wiXG4vLyBodHRwczovL3Byb2Zlc3Npb25hbC5kb2xieS5jb20vc2l0ZWFzc2V0cy9wZGZzL2ljdGNwX2RvbGJ5d2hpdGVwYXBlcl92MDcxLnBkZlxuLy8gYW5kXG4vLyBEb2xieSwgXCJQZXJjZXB0dWFsIENvbG9yIFZvbHVtZVxuLy8gTWVhc3VyaW5nIHRoZSBEaXN0aW5ndWlzaGFibGUgQ29sb3JzIG9mIEhEUiBhbmQgV0NHIERpc3BsYXlzXCJcbi8vIGh0dHBzOi8vcHJvZmVzc2lvbmFsLmRvbGJ5LmNvbS9zaXRlYXNzZXRzL3BkZnMvZG9sYnktdmlzaW9uLW1lYXN1cmluZy1wZXJjZXB0dWFsLWNvbG9yLXZvbHVtZS12Ny4xLnBkZlxudmFyIGljdGNwID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJpY3RjcFwiLFxuXHRuYW1lOiBcIklDVENQXCIsXG5cdC8vIEZyb20gQlQuMjEwMC0yIHBhZ2UgNzpcblx0Ly8gRHVyaW5nIHByb2R1Y3Rpb24sIHNpZ25hbCB2YWx1ZXMgYXJlIGV4cGVjdGVkIHRvIGV4Y2VlZCB0aGVcblx0Ly8gcmFuZ2UgReKAsiA9IFswLjAgOiAxLjBdLiBUaGlzIHByb3ZpZGVzIHByb2Nlc3NpbmcgaGVhZHJvb20gYW5kIGF2b2lkc1xuXHQvLyBzaWduYWwgZGVncmFkYXRpb24gZHVyaW5nIGNhc2NhZGVkIHByb2Nlc3NpbmcuIFN1Y2ggdmFsdWVzIG9mIEXigLIsXG5cdC8vIGJlbG93IDAuMCBvciBleGNlZWRpbmcgMS4wLCBzaG91bGQgbm90IGJlIGNsaXBwZWQgZHVyaW5nIHByb2R1Y3Rpb25cblx0Ly8gYW5kIGV4Y2hhbmdlLlxuXHQvLyBWYWx1ZXMgYmVsb3cgMC4wIHNob3VsZCBub3QgYmUgY2xpcHBlZCBpbiByZWZlcmVuY2UgZGlzcGxheXMgKGV2ZW5cblx0Ly8gdGhvdWdoIHRoZXkgcmVwcmVzZW50IOKAnG5lZ2F0aXZl4oCdIGxpZ2h0KSB0byBhbGxvdyB0aGUgYmxhY2sgbGV2ZWwgb2Zcblx0Ly8gdGhlIHNpZ25hbCAoTEIpIHRvIGJlIHByb3Blcmx5IHNldCB1c2luZyB0ZXN0IHNpZ25hbHMga25vd24gYXMg4oCcUExVR0XigJ1cblx0Y29vcmRzOiB7XG5cdFx0aToge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxXSxcdC8vIENvbnN0YW50IGx1bWluYW5jZSxcblx0XHRcdG5hbWU6IFwiSVwiLFxuXHRcdH0sXG5cdFx0Y3Q6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTAuNSwgMC41XSxcdC8vIEZ1bGwgQlQuMjAyMCBnYW11dCBpbiByYW5nZSBbLTAuNSwgMC41XVxuXHRcdFx0bmFtZTogXCJDVFwiLFxuXHRcdH0sXG5cdFx0Y3A6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTAuNSwgMC41XSxcblx0XHRcdG5hbWU6IFwiQ1BcIixcblx0XHR9LFxuXHR9LFxuXG5cdGJhc2U6IFhZWl9BYnNfRDY1LFxuXHRmcm9tQmFzZSAoWFlaKSB7XG5cdFx0Ly8gbW92ZSB0byBMTVMgY29uZSBkb21haW5cblx0XHRsZXQgTE1TID0gbXVsdGlwbHlNYXRyaWNlcyhYWVp0b0xNU19NLCBYWVopO1xuXG5cdFx0cmV0dXJuIExNU3RvSUN0Q3AoTE1TKTtcblx0fSxcblx0dG9CYXNlIChJQ3RDcCkge1xuXHRcdGxldCBMTVMgPSBJQ3RDcHRvTE1TKElDdENwKTtcblxuXHRcdHJldHVybiBtdWx0aXBseU1hdHJpY2VzKExNU3RvWFlaX00sIExNUyk7XG5cdH0sXG59KTtcblxuZnVuY3Rpb24gTE1TdG9JQ3RDcCAoTE1TKSB7XG5cdC8vIGFwcGx5IHRoZSBQUSBFT1RGXG5cdC8vIHdlIGNhbid0IGV2ZXIgYmUgZGl2aWRpbmcgYnkgemVybyBiZWNhdXNlIG9mIHRoZSBcIjEgK1wiIGluIHRoZSBkZW5vbWluYXRvclxuXHRsZXQgUFFMTVMgPSBMTVMubWFwIChmdW5jdGlvbiAodmFsKSB7XG5cdFx0bGV0IG51bSA9IGMxJDEgKyAoYzIkMSAqICgodmFsIC8gMTAwMDApICoqIG0xJDEpKTtcblx0XHRsZXQgZGVub20gPSAxICsgKGMzJDEgKiAoKHZhbCAvIDEwMDAwKSAqKiBtMSQxKSk7XG5cblx0XHRyZXR1cm4gKG51bSAvIGRlbm9tKSAgKiogbTI7XG5cdH0pO1xuXG5cdC8vIExNUyB0byBJUFQsIHdpdGggcm90YXRpb24gZm9yIFknQydiQydyIGNvbXBhdGliaWxpdHlcblx0cmV0dXJuIG11bHRpcGx5TWF0cmljZXMoTE1TdG9JUFRfTSwgUFFMTVMpO1xufVxuXG5mdW5jdGlvbiBJQ3RDcHRvTE1TIChJQ3RDcCkge1xuXHRsZXQgUFFMTVMgPSBtdWx0aXBseU1hdHJpY2VzKElQVHRvTE1TX00sIElDdENwKTtcblxuXHQvLyBGcm9tIEJULjIxMjQtMCBBbm5leCAyIENvbnZlcnNpb24gM1xuXHRsZXQgTE1TID0gUFFMTVMubWFwIChmdW5jdGlvbiAodmFsKSB7XG5cdFx0bGV0IG51bSAgPSBNYXRoLm1heCgodmFsICoqIGltMikgLSBjMSQxLCAwKTtcblx0XHRsZXQgZGVub20gPSAoYzIkMSAtIChjMyQxICogKHZhbCAqKiBpbTIpKSk7XG5cdFx0cmV0dXJuIDEwMDAwICogKChudW0gLyBkZW5vbSkgKiogaW0xKTtcblx0fSk7XG5cblx0cmV0dXJuIExNUztcbn1cblxuLy8gRGVsdGEgRSBpbiBJQ3RDcCBzcGFjZSxcbi8vIHdoaWNoIHRoZSBJVFUgY2FsbHMgRGVsdGEgRSBJVFAsIHdoaWNoIGlzIHNob3J0ZXJcbi8vIGZvcm11bGFlIGZyb20gSVRVIFJlYy4gSVRVLVIgQlQuMjEyNC0wXG5cbmZ1bmN0aW9uIGRlbHRhRUlUUCAoY29sb3IsIHNhbXBsZSkge1xuXHRbY29sb3IsIHNhbXBsZV0gPSBnZXRDb2xvcihbY29sb3IsIHNhbXBsZV0pO1xuXG5cdC8vIEdpdmVuIHRoaXMgY29sb3IgYXMgdGhlIHJlZmVyZW5jZVxuXHQvLyBhbmQgYSBzYW1wbGUsXG5cdC8vIGNhbGN1bGF0ZSBkZWx0YUUgaW4gSUN0Q3Bcblx0Ly8gd2hpY2ggaXMgc2ltcGx5IHRoZSBFdWNsaWRlYW4gZGlzdGFuY2VcblxuXHRsZXQgWyBJMSwgVDEsIFAxIF0gPSBpY3RjcC5mcm9tKGNvbG9yKTtcblx0bGV0IFsgSTIsIFQyLCBQMiBdID0gaWN0Y3AuZnJvbShzYW1wbGUpO1xuXG5cdC8vIHRoZSAwLjI1IGZhY3RvciBpcyB0byB1bmRvIHRoZSBlbmNvZGluZyBzY2FsaW5nIGluIEN0XG5cdC8vIHRoZSA3MjAgaXMgc28gdGhhdCAxIGRlbHRhRSA9IDEgSk5EXG5cdC8vIHBlciAgSVRVLVIgQlQuMjEyNC0wIHAuM1xuXG5cdHJldHVybiA3MjAgKiBNYXRoLnNxcnQoKEkxIC0gSTIpICoqIDIgKyAoMC4yNSAqIChUMSAtIFQyKSAqKiAyKSArIChQMSAtIFAyKSAqKiAyKTtcbn1cblxuY29uc3Qgd2hpdGUkMyA9IFdISVRFUy5ENjU7XG5jb25zdCBhZGFwdGVkQ29lZiA9IDAuNDI7XG5jb25zdCBhZGFwdGVkQ29lZkludiA9IDEgLyBhZGFwdGVkQ29lZjtcbmNvbnN0IHRhdSA9IDIgKiBNYXRoLlBJO1xuXG5jb25zdCBjYXQxNiA9IFtcblx0WyAgMC40MDEyODgsICAwLjY1MDE3MywgLTAuMDUxNDYxIF0sXG5cdFsgLTAuMjUwMjY4LCAgMS4yMDQ0MTQsICAwLjA0NTg1NCBdLFxuXHRbIC0wLjAwMjA3OSwgIDAuMDQ4OTUyLCAgMC45NTMxMjcgXSxcbl07XG5cbmNvbnN0IGNhdDE2SW52ID0gW1xuXHRbMS44NjIwNjc4NTUwODcyMzI3LCAtMS4wMTEyNTQ2MzA1MzE2ODQzLCAwLjE0OTE4Njc3NTQ0NDQ1MTc1XSxcblx0WzAuMzg3NTI2NTQzMjM2MTM3MTcsIDAuNjIxNDQ3NDQxOTMxNDc1MywgLTAuMDA4OTczOTg1MTY3NjEyNTE4XSxcblx0Wy0wLjAxNTg0MTQ5ODg0OTMzMzg1NiwgLTAuMDM0MTIyOTM4MDI4NTE1NTcsIDEuMDQ5OTY0NDM2ODc3ODQ5Nl0sXG5dO1xuXG5jb25zdCBtMSA9IFtcblx0WzQ2MC4wLCA0NTEuMCwgMjg4LjBdLFxuXHRbNDYwLjAsIC04OTEuMCwgLTI2MS4wXSxcblx0WzQ2MC4wLCAtMjIwLjAsIC02MzAwLjBdLFxuXTtcblxuY29uc3Qgc3Vycm91bmRNYXAgPSB7XG5cdGRhcms6IFswLjgsIDAuNTI1LCAwLjhdLFxuXHRkaW06IFswLjksIDAuNTksIDAuOV0sXG5cdGF2ZXJhZ2U6IFsxLCAwLjY5LCAxXSxcbn07XG5cbmNvbnN0IGh1ZVF1YWRNYXAgPSB7XG5cdC8vIFJlZCwgWWVsbG93LCBHcmVlbiwgQmx1ZSwgUmVkXG5cdGg6IFsyMC4xNCwgOTAuMDAsIDE2NC4yNSwgMjM3LjUzLCAzODAuMTRdLFxuXHRlOiBbMC44LCAwLjcsIDEuMCwgMS4yLCAwLjhdLFxuXHRIOiBbMC4wLCAxMDAuMCwgMjAwLjAsIDMwMC4wLCA0MDAuMF0sXG59O1xuXG5jb25zdCByYWQyZGVnID0gMTgwIC8gTWF0aC5QSTtcbmNvbnN0IGRlZzJyYWQkMSA9IE1hdGguUEkgLyAxODA7XG5cbmZ1bmN0aW9uIGFkYXB0JDEgKGNvb3JkcywgZmwpIHtcblx0Y29uc3QgdGVtcCA9IGNvb3Jkcy5tYXAoYyA9PiB7XG5cdFx0Y29uc3QgeCA9IHNwb3coZmwgKiBNYXRoLmFicyhjKSAqIDAuMDEsIGFkYXB0ZWRDb2VmKTtcblx0XHRyZXR1cm4gNDAwICogY29weVNpZ24oeCwgYykgLyAoeCArIDI3LjEzKTtcblx0fSk7XG5cdHJldHVybiB0ZW1wO1xufVxuXG5mdW5jdGlvbiB1bmFkYXB0IChhZGFwdGVkLCBmbCkge1xuXHRjb25zdCBjb25zdGFudCA9IDEwMCAvIGZsICogKDI3LjEzICoqIGFkYXB0ZWRDb2VmSW52KTtcblx0cmV0dXJuIGFkYXB0ZWQubWFwKGMgPT4ge1xuXHRcdGNvbnN0IGNhYnMgPSBNYXRoLmFicyhjKTtcblx0XHRyZXR1cm4gY29weVNpZ24oY29uc3RhbnQgKiBzcG93KGNhYnMgLyAoNDAwIC0gY2FicyksIGFkYXB0ZWRDb2VmSW52KSwgYyk7XG5cdH0pO1xufVxuXG5mdW5jdGlvbiBodWVRdWFkcmF0dXJlIChoKSB7XG5cdGxldCBocCA9IGNvbnN0cmFpbihoKTtcblx0aWYgKGhwIDw9IGh1ZVF1YWRNYXAuaFswXSkge1xuXHRcdGhwICs9IDM2MDtcblx0fVxuXG5cdGNvbnN0IGkgPSBiaXNlY3RMZWZ0KGh1ZVF1YWRNYXAuaCwgaHApIC0gMTtcblx0Y29uc3QgW2hpLCBoaWldID0gaHVlUXVhZE1hcC5oLnNsaWNlKGksIGkgKyAyKTtcblx0Y29uc3QgW2VpLCBlaWldID0gaHVlUXVhZE1hcC5lLnNsaWNlKGksIGkgKyAyKTtcblx0Y29uc3QgSGkgPSBodWVRdWFkTWFwLkhbaV07XG5cblx0Y29uc3QgdCA9IChocCAtIGhpKSAvIGVpO1xuXHRyZXR1cm4gSGkgKyAoMTAwICogdCkgLyAodCArIChoaWkgLSBocCkgLyBlaWkpO1xufVxuXG5mdW5jdGlvbiBpbnZIdWVRdWFkcmF0dXJlIChIKSB7XG5cdGxldCBIcCA9ICgoSCAlIDQwMCArIDQwMCkgJSA0MDApO1xuXHRjb25zdCBpID0gTWF0aC5mbG9vcigwLjAxICogSHApO1xuXHRIcCA9IEhwICUgMTAwO1xuXHRjb25zdCBbaGksIGhpaV0gPSBodWVRdWFkTWFwLmguc2xpY2UoaSwgaSArIDIpO1xuXHRjb25zdCBbZWksIGVpaV0gPSBodWVRdWFkTWFwLmUuc2xpY2UoaSwgaSArIDIpO1xuXG5cdHJldHVybiBjb25zdHJhaW4oXG5cdFx0KEhwICogKGVpaSAqIGhpIC0gZWkgKiBoaWkpIC0gMTAwICogaGkgKiBlaWkpIC9cblx0XHQoSHAgKiAoZWlpIC0gZWkpIC0gMTAwICogZWlpKSxcblx0KTtcbn1cblxuZnVuY3Rpb24gZW52aXJvbm1lbnQgKFxuXHRyZWZXaGl0ZSxcblx0YWRhcHRpbmdMdW1pbmFuY2UsXG5cdGJhY2tncm91bmRMdW1pbmFuY2UsXG5cdHN1cnJvdW5kLFxuXHRkaXNjb3VudGluZyxcbikge1xuXG5cdGNvbnN0IGVudiA9IHt9O1xuXG5cdGVudi5kaXNjb3VudGluZyA9IGRpc2NvdW50aW5nO1xuXHRlbnYucmVmV2hpdGUgPSByZWZXaGl0ZTtcblx0ZW52LnN1cnJvdW5kID0gc3Vycm91bmQ7XG5cdGNvbnN0IHh5elcgPSByZWZXaGl0ZS5tYXAoYyA9PiB7XG5cdFx0cmV0dXJuIGMgKiAxMDA7XG5cdH0pO1xuXG5cdC8vIFRoZSBhdmVyYWdlIGx1bWluYW5jZSBvZiB0aGUgZW52aXJvbm1lbnQgaW4gYGNkL21eMmNkL21gIChhLmsuYS4gbml0cylcblx0ZW52LmxhID0gYWRhcHRpbmdMdW1pbmFuY2U7XG5cdC8vIFRoZSByZWxhdGl2ZSBsdW1pbmFuY2Ugb2YgdGhlIG5lYXJieSBiYWNrZ3JvdW5kXG5cdGVudi55YiA9IGJhY2tncm91bmRMdW1pbmFuY2U7XG5cdC8vIEFic29sdXRlIGx1bWluYW5jZSBvZiB0aGUgcmVmZXJlbmNlIHdoaXRlLlxuXHRjb25zdCB5dyA9IHh5eldbMV07XG5cblx0Ly8gQ29uZSByZXNwb25zZSBmb3IgcmVmZXJlbmNlIHdoaXRlXG5cdGNvbnN0IHJnYlcgPSBtdWx0aXBseU1hdHJpY2VzKGNhdDE2LCB4eXpXKTtcblxuXHQvLyBTdXJyb3VuZDogZGFyaywgZGltLCBhbmQgYXZlcmFnZVxuXHRzdXJyb3VuZCA9IHN1cnJvdW5kTWFwW2Vudi5zdXJyb3VuZF07XG5cdGNvbnN0IGYgPSBzdXJyb3VuZFswXTtcblx0ZW52LmMgPSBzdXJyb3VuZFsxXTtcblx0ZW52Lm5jID0gc3Vycm91bmRbMl07XG5cblx0Y29uc3QgayA9IDEgLyAoNSAqIGVudi5sYSArIDEpO1xuXHRjb25zdCBrNCA9IGsgKiogNDtcblxuXHQvLyBGYWN0b3Igb2YgbHVtaW5hbmNlIGxldmVsIGFkYXB0YXRpb25cblx0ZW52LmZsID0gKGs0ICogZW52LmxhICsgMC4xICogKDEgLSBrNCkgKiAoMSAtIGs0KSAqIE1hdGguY2JydCg1ICogZW52LmxhKSk7XG5cdGVudi5mbFJvb3QgPSBlbnYuZmwgKiogMC4yNTtcblxuXHRlbnYubiA9IGVudi55YiAvIHl3O1xuXHRlbnYueiA9IDEuNDggKyBNYXRoLnNxcnQoZW52Lm4pO1xuXHRlbnYubmJiID0gMC43MjUgKiAoZW52Lm4gKiogLTAuMik7XG5cdGVudi5uY2IgPSBlbnYubmJiO1xuXG5cdC8vIERlZ3JlZSBvZiBhZGFwdGF0aW9uIGNhbGN1bGF0aW5nIGlmIG5vdCBkaXNjb3VudGluZ1xuXHQvLyBpbGx1bWluYW50IChhc3N1bWVkIGV5ZSBpcyBmdWxseSBhZGFwdGVkKVxuXHRjb25zdCBkID0gKGRpc2NvdW50aW5nKSA/XG5cdFx0MSA6XG5cdFx0TWF0aC5tYXgoXG5cdFx0XHRNYXRoLm1pbihmICogKDEgLSAxIC8gMy42ICogTWF0aC5leHAoKC1lbnYubGEgLSA0MikgLyA5MikpLCAxKSxcblx0XHRcdDAsXG5cdFx0KTtcblx0ZW52LmRSZ2IgPSByZ2JXLm1hcChjID0+IHtcblx0XHRyZXR1cm4gaW50ZXJwb2xhdGUoMSwgeXcgLyBjLCBkKTtcblx0fSk7XG5cdGVudi5kUmdiSW52ID0gZW52LmRSZ2IubWFwKGMgPT4ge1xuXHRcdHJldHVybiAxIC8gYztcblx0fSk7XG5cblx0Ly8gQWNocm9tYXRpYyByZXNwb25zZVxuXHRjb25zdCByZ2JDVyA9IHJnYlcubWFwKChjLCBpKSA9PiB7XG5cdFx0cmV0dXJuIGMgKiBlbnYuZFJnYltpXTtcblx0fSk7XG5cdGNvbnN0IHJnYkFXID0gYWRhcHQkMShyZ2JDVywgZW52LmZsKTtcblx0ZW52LmFXID0gZW52Lm5iYiAqICgyICogcmdiQVdbMF0gKyByZ2JBV1sxXSArIDAuMDUgKiByZ2JBV1syXSk7XG5cblx0Ly8gY29uc29sZS5sb2coZW52KTtcblxuXHRyZXR1cm4gZW52O1xufVxuXG4vLyBQcmUtY2FsY3VsYXRlIGV2ZXJ5dGhpbmcgd2UgY2FuIHdpdGggdGhlIHZpZXdpbmcgY29uZGl0aW9uc1xuY29uc3Qgdmlld2luZ0NvbmRpdGlvbnMkMSA9IGVudmlyb25tZW50KFxuXHR3aGl0ZSQzLFxuXHQ2NCAvIE1hdGguUEkgKiAwLjIsIDIwLFxuXHRcImF2ZXJhZ2VcIixcblx0ZmFsc2UsXG4pO1xuXG5mdW5jdGlvbiBmcm9tQ2FtMTYgKGNhbTE2LCBlbnYpIHtcblxuXHQvLyBUaGVzZSBjaGVjayBlbnN1cmUgb25lLCBhbmQgb25seSBvbmUgYXR0cmlidXRlIGZvciBhXG5cdC8vIGdpdmVuIGNhdGVnb3J5IGlzIHByb3ZpZGVkLlxuXHRpZiAoISgoY2FtMTYuSiAhPT0gdW5kZWZpbmVkKSBeIChjYW0xNi5RICE9PSB1bmRlZmluZWQpKSkge1xuXHRcdHRocm93IG5ldyBFcnJvcihcIkNvbnZlcnNpb24gcmVxdWlyZXMgb25lIGFuZCBvbmx5IG9uZTogJ0onIG9yICdRJ1wiKTtcblx0fVxuXG5cdGlmICghKChjYW0xNi5DICE9PSB1bmRlZmluZWQpIF4gKGNhbTE2Lk0gIT09IHVuZGVmaW5lZCkgXiAoY2FtMTYucyAhPT0gdW5kZWZpbmVkKSkpIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoXCJDb252ZXJzaW9uIHJlcXVpcmVzIG9uZSBhbmQgb25seSBvbmU6ICdDJywgJ00nIG9yICdzJ1wiKTtcblx0fVxuXG5cdC8vIEh1ZSBpcyBhYnNvbHV0ZWx5IHJlcXVpcmVkXG5cdGlmICghKChjYW0xNi5oICE9PSB1bmRlZmluZWQpIF4gKGNhbTE2LkggIT09IHVuZGVmaW5lZCkpKSB7XG5cdFx0dGhyb3cgbmV3IEVycm9yKFwiQ29udmVyc2lvbiByZXF1aXJlcyBvbmUgYW5kIG9ubHkgb25lOiAnaCcgb3IgJ0gnXCIpO1xuXHR9XG5cblx0Ly8gQmxhY2tcblx0aWYgKGNhbTE2LkogPT09IDAuMCB8fCBjYW0xNi5RID09PSAwLjApIHtcblx0XHRyZXR1cm4gWzAuMCwgMC4wLCAwLjBdO1xuXHR9XG5cblx0Ly8gQnJlYWsgaHVlIGludG8gQ2FydGVzaWFuIGNvbXBvbmVudHNcblx0bGV0IGhSYWQgPSAwLjA7XG5cdGlmIChjYW0xNi5oICE9PSB1bmRlZmluZWQpIHtcblx0XHRoUmFkID0gY29uc3RyYWluKGNhbTE2LmgpICogZGVnMnJhZCQxO1xuXHR9XG5cdGVsc2Uge1xuXHRcdGhSYWQgPSBpbnZIdWVRdWFkcmF0dXJlKGNhbTE2LkgpICogZGVnMnJhZCQxO1xuXHR9XG5cblx0Y29uc3QgY29zaCA9IE1hdGguY29zKGhSYWQpO1xuXHRjb25zdCBzaW5oID0gTWF0aC5zaW4oaFJhZCk7XG5cblx0Ly8gQ2FsY3VsYXRlIGBKcm9vdGAgZnJvbSBvbmUgb2YgdGhlIGxpZ2h0bmVzcyBkZXJpdmVkIGNvb3JkaW5hdGVzLlxuXHRsZXQgSnJvb3QgPSAwLjA7XG5cdGlmIChjYW0xNi5KICE9PSB1bmRlZmluZWQpIHtcblx0XHRKcm9vdCA9IHNwb3coY2FtMTYuSiwgMSAvIDIpICogMC4xO1xuXHR9XG5cdGVsc2UgaWYgKGNhbTE2LlEgIT09IHVuZGVmaW5lZCkge1xuXHRcdEpyb290ID0gMC4yNSAqIGVudi5jICogY2FtMTYuUSAvICgoZW52LmFXICsgNCkgKiBlbnYuZmxSb290KTtcblx0fVxuXG5cdC8vIENhbGN1bGF0ZSB0aGUgYHRgIHZhbHVlIGZyb20gb25lIG9mIHRoZSBjaHJvbWEgZGVyaXZlZCBjb29yZGluYXRlc1xuXHRsZXQgYWxwaGEgPSAwLjA7XG5cdGlmIChjYW0xNi5DICE9PSB1bmRlZmluZWQpIHtcblx0XHRhbHBoYSA9IGNhbTE2LkMgLyBKcm9vdDtcblx0fVxuXHRlbHNlIGlmIChjYW0xNi5NICE9PSB1bmRlZmluZWQpIHtcblx0XHRhbHBoYSA9IChjYW0xNi5NIC8gZW52LmZsUm9vdCkgLyBKcm9vdDtcblx0fVxuXHRlbHNlIGlmIChjYW0xNi5zICE9PSB1bmRlZmluZWQpIHtcblx0XHRhbHBoYSA9IDAuMDAwNCAqIChjYW0xNi5zICoqIDIpICogKGVudi5hVyArIDQpIC8gZW52LmM7XG5cdH1cblx0Y29uc3QgdCA9IHNwb3coXG5cdFx0YWxwaGEgKiBNYXRoLnBvdygxLjY0IC0gTWF0aC5wb3coMC4yOSwgZW52Lm4pLCAtMC43MyksXG5cdFx0MTAgLyA5LFxuXHQpO1xuXG5cdC8vIEVjY2VudHJpY2l0eVxuXHRjb25zdCBldCA9IDAuMjUgKiAoTWF0aC5jb3MoaFJhZCArIDIpICsgMy44KTtcblxuXHQvLyBBY2hyb21hdGljIHJlc3BvbnNlXG5cdGNvbnN0IEEgPSBlbnYuYVcgKiBzcG93KEpyb290LCAyIC8gZW52LmMgLyBlbnYueik7XG5cblx0Ly8gQ2FsY3VsYXRlIHJlZC1ncmVlbiBhbmQgeWVsbG93LWJsdWUgY29tcG9uZW50c1xuXHRjb25zdCBwMSA9IDVlNCAvIDEzICogZW52Lm5jICogZW52Lm5jYiAqIGV0O1xuXHRjb25zdCBwMiA9IEEgLyBlbnYubmJiO1xuXHRjb25zdCByID0gKFxuXHRcdDIzICogKHAyICsgMC4zMDUpICpcblx0XHR6ZGl2KHQsIDIzICogcDEgKyB0ICogKDExICogY29zaCArIDEwOCAqIHNpbmgpKVxuXHQpO1xuXHRjb25zdCBhID0gciAqIGNvc2g7XG5cdGNvbnN0IGIgPSByICogc2luaDtcblxuXHQvLyBDYWxjdWxhdGUgYmFjayBmcm9tIGNvbmUgcmVzcG9uc2UgdG8gWFlaXG5cdGNvbnN0IHJnYl9jID0gdW5hZGFwdChcblx0XHRtdWx0aXBseU1hdHJpY2VzKG0xLCBbcDIsIGEsIGJdKS5tYXAoYyA9PiB7XG5cdFx0XHRyZXR1cm4gYyAqIDEgLyAxNDAzO1xuXHRcdH0pLFxuXHRcdGVudi5mbCxcblx0KTtcblx0cmV0dXJuIG11bHRpcGx5TWF0cmljZXMoXG5cdFx0Y2F0MTZJbnYsXG5cdFx0cmdiX2MubWFwKChjLCBpKSA9PiB7XG5cdFx0XHRyZXR1cm4gYyAqIGVudi5kUmdiSW52W2ldO1xuXHRcdH0pLFxuXHQpLm1hcChjID0+IHtcblx0XHRyZXR1cm4gYyAvIDEwMDtcblx0fSk7XG59XG5cblxuZnVuY3Rpb24gdG9DYW0xNiAoeHl6ZDY1LCBlbnYpIHtcblx0Ly8gQ29uZSByZXNwb25zZVxuXHRjb25zdCB4eXoxMDAgPSB4eXpkNjUubWFwKGMgPT4ge1xuXHRcdHJldHVybiBjICogMTAwO1xuXHR9KTtcblx0Y29uc3QgcmdiQSA9IGFkYXB0JDEoXG5cdFx0bXVsdGlwbHlNYXRyaWNlcyhjYXQxNiwgeHl6MTAwKS5tYXAoKGMsIGkpID0+IHtcblx0XHRcdHJldHVybiBjICogZW52LmRSZ2JbaV07XG5cdFx0fSksXG5cdFx0ZW52LmZsLFxuXHQpO1xuXG5cdC8vIENhbGN1bGF0ZSBodWUgZnJvbSByZWQtZ3JlZW4gYW5kIHllbGxvdy1ibHVlIGNvbXBvbmVudHNcblx0Y29uc3QgYSA9IHJnYkFbMF0gKyAoLTEyICogcmdiQVsxXSArIHJnYkFbMl0pIC8gMTE7XG5cdGNvbnN0IGIgPSAocmdiQVswXSArIHJnYkFbMV0gLSAyICogcmdiQVsyXSkgLyA5O1xuXHRjb25zdCBoUmFkID0gKChNYXRoLmF0YW4yKGIsIGEpICUgdGF1KSArIHRhdSkgJSB0YXU7XG5cblx0Ly8gRWNjZW50cmljaXR5XG5cdGNvbnN0IGV0ID0gMC4yNSAqIChNYXRoLmNvcyhoUmFkICsgMikgKyAzLjgpO1xuXG5cdGNvbnN0IHQgPSAoXG5cdFx0NWU0IC8gMTMgKiBlbnYubmMgKiBlbnYubmNiICpcblx0XHR6ZGl2KFxuXHRcdFx0ZXQgKiBNYXRoLnNxcnQoYSAqKiAyICsgYiAqKiAyKSxcblx0XHRcdHJnYkFbMF0gKyByZ2JBWzFdICsgMS4wNSAqIHJnYkFbMl0gKyAwLjMwNSxcblx0XHQpXG5cdCk7XG5cdGNvbnN0IGFscGhhID0gc3Bvdyh0LCAwLjkpICogTWF0aC5wb3coMS42NCAtIE1hdGgucG93KDAuMjksIGVudi5uKSwgMC43Myk7XG5cblx0Ly8gQWNocm9tYXRpYyByZXNwb25zZVxuXHRjb25zdCBBID0gZW52Lm5iYiAqICgyICogcmdiQVswXSArIHJnYkFbMV0gKyAwLjA1ICogcmdiQVsyXSk7XG5cblx0Y29uc3QgSnJvb3QgPSBzcG93KEEgLyBlbnYuYVcsIDAuNSAqIGVudi5jICogZW52LnopO1xuXG5cdC8vIExpZ2h0bmVzc1xuXHRjb25zdCBKID0gMTAwICogc3BvdyhKcm9vdCwgMik7XG5cblx0Ly8gQnJpZ2h0bmVzc1xuXHRjb25zdCBRID0gKDQgLyBlbnYuYyAqIEpyb290ICogKGVudi5hVyArIDQpICogZW52LmZsUm9vdCk7XG5cblx0Ly8gQ2hyb21hXG5cdGNvbnN0IEMgPSBhbHBoYSAqIEpyb290O1xuXG5cdC8vIENvbG9yZnVsbmVzc1xuXHRjb25zdCBNID0gQyAqIGVudi5mbFJvb3Q7XG5cblx0Ly8gSHVlXG5cdGNvbnN0IGggPSBjb25zdHJhaW4oaFJhZCAqIHJhZDJkZWcpO1xuXG5cdC8vIEh1ZSBxdWFkcmF0dXJlXG5cdGNvbnN0IEggPSBodWVRdWFkcmF0dXJlKGgpO1xuXG5cdC8vIFNhdHVyYXRpb25cblx0Y29uc3QgcyA9IDUwICogc3BvdyhlbnYuYyAqIGFscGhhIC8gKGVudi5hVyArIDQpLCAxIC8gMik7XG5cblx0Ly8gY29uc29sZS5sb2coe0o6IEosIEM6IEMsIGg6IGgsIHM6IHMsIFE6IFEsIE06IE0sIEg6IEh9KTtcblxuXHRyZXR1cm4ge0o6IEosIEM6IEMsIGg6IGgsIHM6IHMsIFE6IFEsIE06IE0sIEg6IEh9O1xufVxuXG5cbi8vIFByb3ZpZGVkIGFzIGEgd2F5IHRvIGRpcmVjdGx5IGV2YWx1YXRlIHRoZSBDQU0xNiBtb2RlbFxuLy8gaHR0cHM6Ly9vYnNlcnZhYmxlaHEuY29tL0BqcnVzL2NhbTE2OiByZWZlcmVuY2UgaW1wbGVtZW50YXRpb25cbi8vIGh0dHBzOi8vYXJ4aXYub3JnL3BkZi8xODAyLjA2MDY3LnBkZjogTmljbyBTY2hsw7ZtZXJcbi8vIGh0dHBzOi8vb25saW5lbGlicmFyeS53aWxleS5jb20vZG9pL3BkZi8xMC4xMDAyL2NvbC4yMjMyNDogaHVlIHF1YWRyYXR1cmVcbi8vIGh0dHBzOi8vd3d3LnJlc2VhcmNoZ2F0ZS5uZXQvcHVibGljYXRpb24vMzE4MTUyMjk2X0NvbXByZWhlbnNpdmVfY29sb3Jfc29sdXRpb25zX0NBTTE2X0NBVDE2X2FuZF9DQU0xNi1VQ1Ncbi8vIFJlc3VsdHMgY29tcGFyZWQgYWdhaW5zdDogaHR0cHM6Ly9naXRodWIuY29tL2NvbG91ci1zY2llbmNlL2NvbG91clxudmFyIGNhbTE2ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJjYW0xNi1qbWhcIixcblx0Y3NzSWQ6IFwiLS1jYW0xNi1qbWhcIixcblx0bmFtZTogXCJDQU0xNi1KTWhcIixcblx0Y29vcmRzOiB7XG5cdFx0ajoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJKXCIsXG5cdFx0fSxcblx0XHRtOiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDEwNS4wXSxcblx0XHRcdG5hbWU6IFwiQ29sb3JmdWxuZXNzXCIsXG5cdFx0fSxcblx0XHRoOiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDM2MF0sXG5cdFx0XHR0eXBlOiBcImFuZ2xlXCIsXG5cdFx0XHRuYW1lOiBcIkh1ZVwiLFxuXHRcdH0sXG5cdH0sXG5cblx0YmFzZTogeHl6X2Q2NSxcblxuXHRmcm9tQmFzZSAoeHl6KSB7XG5cdFx0Y29uc3QgY2FtMTYgPSB0b0NhbTE2KHh5eiwgdmlld2luZ0NvbmRpdGlvbnMkMSk7XG5cdFx0cmV0dXJuIFtjYW0xNi5KLCBjYW0xNi5NLCBjYW0xNi5oXTtcblx0fSxcblx0dG9CYXNlIChjYW0xNikge1xuXHRcdHJldHVybiBmcm9tQ2FtMTYoXG5cdFx0XHR7SjogY2FtMTZbMF0sIE06IGNhbTE2WzFdLCBoOiBjYW0xNlsyXX0sXG5cdFx0XHR2aWV3aW5nQ29uZGl0aW9ucyQxLFxuXHRcdCk7XG5cdH0sXG59KTtcblxuY29uc3Qgd2hpdGUkMiA9IFdISVRFUy5ENjU7XG5jb25zdCDOtSQ0ID0gMjE2IC8gMjQzODk7ICAvLyA2XjMvMjleMyA9PSAoMjQvMTE2KV4zXG5jb25zdCDOuiQzID0gMjQzODkgLyAyNzsgICAvLyAyOV4zLzNeM1xuXG5mdW5jdGlvbiB0b0xzdGFyICh5KSB7XG5cdC8vIENvbnZlcnQgWFlaIFkgdG8gTCpcblxuXHRjb25zdCBmeSA9ICh5ID4gzrUkNCkgPyBNYXRoLmNicnQoeSkgOiAozrokMyAqIHkgKyAxNikgLyAxMTY7XG5cdHJldHVybiAoMTE2LjAgKiBmeSkgLSAxNi4wO1xufVxuXG5mdW5jdGlvbiBmcm9tTHN0YXIgKGxzdGFyKSB7XG5cdC8vIENvbnZlcnQgTCogYmFjayB0byBYWVogWVxuXG5cdHJldHVybiAobHN0YXIgPiA4KSA/ICBNYXRoLnBvdygobHN0YXIgKyAxNikgLyAxMTYsIDMpIDogbHN0YXIgLyDOuiQzO1xufVxuXG5mdW5jdGlvbiBmcm9tSGN0IChjb29yZHMsIGVudikge1xuXHQvLyBVc2UgTmV3dG9uJ3MgbWV0aG9kIHRvIHRyeSBhbmQgY29udmVyZ2UgYXMgcXVpY2sgYXMgcG9zc2libGUgb3Jcblx0Ly8gY29udmVyZ2UgYXMgY2xvc2UgYXMgd2UgY2FuLiBXaGlsZSB0aGUgcmVxdWVzdGVkIHByZWNpc2lvbiBpcyBhY2hpZXZlZFxuXHQvLyBtb3N0IG9mIHRoZSB0aW1lLCBpdCBtYXkgbm90IGFsd2F5cyBiZSBhY2hpZXZhYmxlLiBFc3BlY2lhbGx5IHBhc3QgdGhlXG5cdC8vIHZpc2libGUgc3BlY3RydW0sIHRoZSBhbGdvcml0aG0gd2lsbCBsaWtlbHkgc3RydWdnbGUgdG8gZ2V0IHRoZSBzYW1lXG5cdC8vIHByZWNpc2lvbi4gSWYsIGZvciB3aGF0ZXZlciByZWFzb24sIHdlIGNhbm5vdCBhY2hpZXZlIHRoZSBhY2N1cmFjeSB3ZVxuXHQvLyBzZWVrIGluIHRoZSBhbGxvdHRlZCBpdGVyYXRpb25zLCBqdXN0IHJldHVybiB0aGUgY2xvc2VzdCB3ZSB3ZXJlIGFibGUgdG9cblx0Ly8gZ2V0LlxuXG5cdGxldCBbaCwgYywgdF0gPSBjb29yZHM7XG5cdGxldCB4eXogPSBbXTtcblx0bGV0IGogPSAwO1xuXG5cdC8vIFNob3J0Y3V0IG91dCBmb3IgYmxhY2tcblx0aWYgKHQgPT09IDApIHtcblx0XHRyZXR1cm4gWzAuMCwgMC4wLCAwLjBdO1xuXHR9XG5cblx0Ly8gQ2FsY3VsYXRlIHRoZSBZIHdlIG5lZWQgdG8gdGFyZ2V0XG5cdGxldCB5ID0gZnJvbUxzdGFyKHQpO1xuXG5cdC8vIEEgYmV0dGVyIGluaXRpYWwgZ3Vlc3MgeWllbGRzIGJldHRlciByZXN1bHRzLiBQb2x5bm9taWFscyBjb21lIGZyb21cblx0Ly8gY3VydmUgZml0dGluZyB0aGUgVCB2cyBKIHJlc3BvbnNlLlxuXHRpZiAodCA+IDApIHtcblx0XHRqID0gMC4wMDM3OTA1ODUxMTQ5MjkxNCAqIHQgKiogMiArIDAuNjA4OTgzMTg5NDAxMDMyICogdCArIDAuOTE1NTA4ODU3NDc2MjIzMztcblx0fVxuXHRlbHNlIHtcblx0XHRqID0gOS41MTQ0NDA3NTY1NTAzNjFlLTA2ICogdCAqKiAyICsgMC4wODY5MzA1NzQzOTc4ODU5NyAqIHQgLSAyMS45Mjg5NzU4NDIxOTQ2MTQ7XG5cdH1cblxuXHQvLyBUaHJlc2hvbGQgb2YgaG93IGNsb3NlIGlzIGNsb3NlIGVub3VnaCwgYW5kIG1heCBudW1iZXIgb2YgYXR0ZW1wdHMuXG5cdC8vIE1vcmUgcHJlY2lzaW9uIGFuZCBtb3JlIGF0dGVtcHRzIG1lYW5zIG1vcmUgdGltZSBzcGVudCBpdGVyYXRpbmcuIEhpZ2hlclxuXHQvLyByZXF1aXJlZCBwcmVjaXNpb24gZ2l2ZXMgbW9yZSBhY2N1cmFjeSBidXQgYWxzbyBpbmNyZWFzZXMgdGhlIGNoYW5jZSBvZlxuXHQvLyBub3QgaGl0dGluZyB0aGUgZ29hbC4gMmUtMTIgYWxsb3dzIHVzIHRvIGNvbnZlcnQgcm91bmQgdHJpcCB3aXRoXG5cdC8vIHJlYXNvbmFibGUgYWNjdXJhY3kgb2Ygc2l4IGRlY2ltYWwgcGxhY2VzIG9yIG1vcmUuXG5cdGNvbnN0IHRocmVzaG9sZCA9IDJlLTEyO1xuXHRjb25zdCBtYXhfYXR0ZW1wdHMgPSAxNTtcblxuXHRsZXQgYXR0ZW1wdCA9IDA7XG5cdGxldCBsYXN0ID0gSW5maW5pdHk7XG5cblx0Ly8gVHJ5IHRvIGZpbmQgYSBKIHN1Y2ggdGhhdCB0aGUgcmV0dXJuZWQgeSBtYXRjaGVzIHRoZSByZXR1cm5lZCB5IG9mIHRoZSBMKlxuXHR3aGlsZSAoYXR0ZW1wdCA8PSBtYXhfYXR0ZW1wdHMpIHtcblx0XHR4eXogPSBmcm9tQ2FtMTYoe0o6IGosIEM6IGMsIGg6IGh9LCBlbnYpO1xuXG5cdFx0Ly8gSWYgd2UgYXJlIHdpdGhpbiByYW5nZSwgcmV0dXJuIFhZWlxuXHRcdC8vIElmIHdlIGFyZSBjbG9zZXIgdGhhbiBsYXN0IHRpbWUsIHNhdmUgdGhlIHZhbHVlc1xuXHRcdGNvbnN0IGRlbHRhID0gTWF0aC5hYnMoeHl6WzFdIC0geSk7XG5cdFx0aWYgKGRlbHRhIDwgbGFzdCkge1xuXHRcdFx0aWYgKGRlbHRhIDw9IHRocmVzaG9sZCkge1xuXHRcdFx0XHRyZXR1cm4geHl6O1xuXHRcdFx0fVxuXHRcdFx0bGFzdCA9IGRlbHRhO1xuXHRcdH1cblxuXHRcdC8vIGYoal9yb290KSA9IChqICoqICgxIC8gMikpICogMC4xXG5cdFx0Ly8gZihqKSA9ICgoZihqX3Jvb3QpICogMTAwKSAqKiAyKSAvIGogLSAxID0gMFxuXHRcdC8vIGYoal9yb290KSA9IFkgPSB5IC8gMTAwXG5cdFx0Ly8gZihqKSA9ICh5ICoqIDIpIC8gaiAtIDFcblx0XHQvLyBmJyhqKSA9ICgyICogeSkgLyBqXG5cdFx0aiA9IGogLSAoeHl6WzFdIC0geSkgKiBqIC8gKDIgKiB4eXpbMV0pO1xuXG5cdFx0YXR0ZW1wdCArPSAxO1xuXHR9XG5cblx0Ly8gV2UgY291bGQgbm90IGFjcXVpcmUgdGhlIHByZWNpc2lvbiB3ZSBkZXNpcmVkLFxuXHQvLyByZXR1cm4gb3VyIGNsb3Nlc3QgYXR0ZW1wdC5cblx0cmV0dXJuIGZyb21DYW0xNih7SjogaiwgQzogYywgaDogaH0sIGVudik7XG59XG5cbmZ1bmN0aW9uIHRvSGN0ICh4eXosIGVudikge1xuXHQvLyBDYWxjdWxhdGUgSENUIGJ5IHRha2luZyB0aGUgTCogb2YgQ0lFIExDaCBENjUgYW5kIENBTTE2IGNocm9tYSBhbmQgaHVlLlxuXG5cdGNvbnN0IHQgPSB0b0xzdGFyKHh5elsxXSk7XG5cdGlmICh0ID09PSAwLjApIHtcblx0XHRyZXR1cm4gWzAuMCwgMC4wLCAwLjBdO1xuXHR9XG5cdGNvbnN0IGNhbTE2ID0gdG9DYW0xNih4eXosIHZpZXdpbmdDb25kaXRpb25zKTtcblx0cmV0dXJuIFtjb25zdHJhaW4oY2FtMTYuaCksIGNhbTE2LkMsIHRdO1xufVxuXG4vLyBQcmUtY2FsY3VsYXRlIGV2ZXJ5dGhpbmcgd2UgY2FuIHdpdGggdGhlIHZpZXdpbmcgY29uZGl0aW9uc1xuY29uc3Qgdmlld2luZ0NvbmRpdGlvbnMgPSBlbnZpcm9ubWVudChcblx0d2hpdGUkMiwgMjAwIC8gTWF0aC5QSSAqIGZyb21Mc3Rhcig1MC4wKSxcblx0ZnJvbUxzdGFyKDUwLjApICogMTAwLFxuXHRcImF2ZXJhZ2VcIixcblx0ZmFsc2UsXG4pO1xuXG4vLyBodHRwczovL21hdGVyaWFsLmlvL2Jsb2cvc2NpZW5jZS1vZi1jb2xvci1kZXNpZ25cbi8vIFRoaXMgaXMgbm90IGEgcG9ydCBvZiB0aGUgbWF0ZXJpYWwtY29sb3ItdXRpbGl0aWVzLFxuLy8gYnV0IGluc3RlYWQgaW1wbGVtZW50cyB0aGUgZnVsbCBjb2xvciBzcGFjZSBhcyBkZXNjcmliZWQsXG4vLyBjb21iaW5pbmcgQ0FNMTYgSkNoIGFuZCBMYWIgRDY1LiBUaGlzIGRvZXMgbm90IGNsYW1wIGNvbnZlcnNpb25cbi8vIHRvIEhDVCB0byBzcGVjaWZpYyBjaHJvbWEgYmFuZHMgYW5kIHByb3ZpZGVzIHN1cHBvcnQgZm9yIHdpZGVyXG4vLyBnYW11dHMgdGhhbiBHb29nbGUgY3VycmVudGx5IHN1cHBvcnRzIGFuZCBkb2VzIHNvIGF0IGEgZ3JlYXRlclxuLy8gcHJlY2lzaW9uICg+IDggYml0cyBiYWNrIHRvIHNSR0IpLlxuLy8gVGhpcyBpbXBsZW1lbnRhdGlvbiBjb21lcyBmcm9tIGh0dHBzOi8vZ2l0aHViLmNvbS9mYWNlbGVzc3VzZXIvY29sb3JhaWRlXG4vLyB3aGljaCBpcyBsaWNlbnNlZCB1bmRlciBNSVQuXG52YXIgaGN0ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJoY3RcIixcblx0bmFtZTogXCJIQ1RcIixcblx0Y29vcmRzOiB7XG5cdFx0aDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAzNjBdLFxuXHRcdFx0dHlwZTogXCJhbmdsZVwiLFxuXHRcdFx0bmFtZTogXCJIdWVcIixcblx0XHR9LFxuXHRcdGM6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMTQ1XSxcblx0XHRcdG5hbWU6IFwiQ29sb3JmdWxuZXNzXCIsXG5cdFx0fSxcblx0XHR0OiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDEwMF0sXG5cdFx0XHRuYW1lOiBcIlRvbmVcIixcblx0XHR9LFxuXHR9LFxuXG5cdGJhc2U6IHh5el9kNjUsXG5cblx0ZnJvbUJhc2UgKHh5eikge1xuXHRcdHJldHVybiB0b0hjdCh4eXopO1xuXHR9LFxuXHR0b0Jhc2UgKGhjdCkge1xuXHRcdHJldHVybiBmcm9tSGN0KGhjdCwgdmlld2luZ0NvbmRpdGlvbnMpO1xuXHR9LFxuXHRmb3JtYXRzOiB7XG5cdFx0Y29sb3I6IHtcblx0XHRcdGlkOiBcIi0taGN0XCIsXG5cdFx0XHRjb29yZHM6IFtcIjxudW1iZXI+IHwgPGFuZ2xlPlwiLCBcIjxwZXJjZW50YWdlPiB8IDxudW1iZXI+XCIsIFwiPHBlcmNlbnRhZ2U+IHwgPG51bWJlcj5cIl0sXG5cdFx0fSxcblx0fSxcbn0pO1xuXG5jb25zdCBkZWcycmFkID0gTWF0aC5QSSAvIDE4MDtcbmNvbnN0IHVjc0NvZWZmID0gWzEuMDAsIDAuMDA3LCAwLjAyMjhdO1xuXG4vKipcbiogQ29udmVydCBIQ1QgY2hyb21hIGFuZCBodWUgKENBTTE2IEpNaCBjb2xvcmZ1bG5lc3MgYW5kIGh1ZSkgdXNpbmcgVUNTIGxvZ2ljIGZvciBhIGFuZCBiLlxuKiBAcGFyYW0ge251bWJlcltdfSBjb29yZHMgLSBIQ1QgY29vcmRpbmF0ZXMuXG4qIEByZXR1cm4ge251bWJlcltdfVxuKi9cbmZ1bmN0aW9uIGNvbnZlcnRVY3NBYiAoY29vcmRzKSB7XG5cdC8vIFdlIHdhbnQgdGhlIGRpc3RhbmNlIGJldHdlZW4gdGhlIGFjdHVhbCBjb2xvci5cblx0Ly8gSWYgY2hyb21hIGlzIG5lZ2F0aXZlLCBpdCB3aWxsIHRocm93IG9mZiBvdXIgY2FsY3VsYXRpb25zLlxuXHQvLyBOb3JtYWxseSwgY29udmVydGluZyBiYWNrIHRvIHRoZSBiYXNlIGFuZCBmb3J3YXJkIHdpbGwgY29ycmVjdCBpdC5cblx0Ly8gSWYgd2UgaGF2ZSBhIG5lZ2F0aXZlIGNocm9tYSBhZnRlciB0aGlzLCB0aGVuIHdlIGhhdmUgYSBjb2xvciB0aGF0XG5cdC8vIGNhbm5vdCByZXNvbHZlIHRvIHBvc2l0aXZlIGNocm9tYS5cblx0aWYgKGNvb3Jkc1sxXSA8IDApIHtcblx0XHRjb29yZHMgPSBoY3QuZnJvbUJhc2UoaGN0LnRvQmFzZShjb29yZHMpKTtcblx0fVxuXG5cdC8vIE9ubHkgaW4gZXh0cmVtZSBjYXNlcyAodXN1YWxseSBvdXRzaWRlIHRoZSB2aXNpYmxlIHNwZWN0cnVtKVxuXHQvLyBjYW4gdGhlIGlucHV0IHZhbHVlIGZvciBsb2cgYmVjb21lIG5lZ2F0aXZlLlxuXHQvLyBBdm9pZCBkb21haW4gZXJyb3IgYnkgZm9yY2luZyBhIHplcm8gcmVzdWx0IHZpYSBcIm1heFwiIGlmIG5lY2Vzc2FyeS5cblx0Y29uc3QgTSA9IE1hdGgubG9nKE1hdGgubWF4KDEgKyB1Y3NDb2VmZlsyXSAqIGNvb3Jkc1sxXSAqIHZpZXdpbmdDb25kaXRpb25zLmZsUm9vdCwgMS4wKSkgLyB1Y3NDb2VmZlsyXTtcblx0Y29uc3QgaHJhZCA9IGNvb3Jkc1swXSAqIGRlZzJyYWQ7XG5cdGNvbnN0IGEgPSBNICogTWF0aC5jb3MoaHJhZCk7XG5cdGNvbnN0IGIgPSBNICogTWF0aC5zaW4oaHJhZCk7XG5cblx0cmV0dXJuIFtjb29yZHNbMl0sIGEsIGJdO1xufVxuXG5cbi8qKlxuKiBDb2xvciBkaXN0YW5jZSB1c2luZyBIQ1QuXG4qIEBwYXJhbSB7Q29sb3J9IGNvbG9yIC0gQ29sb3IgdG8gY29tcGFyZS5cbiogQHBhcmFtIHtDb2xvcn0gc2FtcGxlIC0gQ29sb3IgdG8gY29tcGFyZS5cbiogQHJldHVybiB7bnVtYmVyW119XG4qL1xuZnVuY3Rpb24gZGVsdGFFSENUIChjb2xvciwgc2FtcGxlKSB7XG5cdFtjb2xvciwgc2FtcGxlXSA9IGdldENvbG9yKFtjb2xvciwgc2FtcGxlXSk7XG5cblx0bGV0IFsgdDEsIGExLCBiMSBdID0gY29udmVydFVjc0FiKGhjdC5mcm9tKGNvbG9yKSk7XG5cdGxldCBbIHQyLCBhMiwgYjIgXSA9IGNvbnZlcnRVY3NBYihoY3QuZnJvbShzYW1wbGUpKTtcblxuXHQvLyBVc2Ugc2ltcGxlIGV1Y2xpZGVhbiBkaXN0YW5jZSB3aXRoIGEgYW5kIGIgdXNpbmcgVUNTIGNvbnZlcnNpb25cblx0Ly8gYW5kIExDaCBsaWdodG5lc3MgKEhDVCB0b25lKS5cblx0cmV0dXJuIE1hdGguc3FydCgodDEgLSB0MikgKiogMiArIChhMSAtIGEyKSAqKiAyICsgKGIxIC0gYjIpICoqIDIpO1xufVxuXG52YXIgZGVsdGFFTWV0aG9kcyA9IHtcblx0ZGVsdGFFNzYsXG5cdGRlbHRhRUNNQyxcblx0ZGVsdGFFMjAwMCxcblx0ZGVsdGFFSnosXG5cdGRlbHRhRUlUUCxcblx0ZGVsdGFFT0ssXG5cdGRlbHRhRUhDVCxcbn07XG5cbi8qKlxuICogQ2FsY3VsYXRlIHRoZSBlcHNpbG9uIHRvIDIgZGVncmVlcyBzbWFsbGVyIHRoYW4gdGhlIHNwZWNpZmllZCBKTkQuXG4gKiBAcGFyYW0ge051bWJlcn0gam5kIC0gVGhlIHRhcmdldCBcImp1c3Qgbm90aWNlYWJsZSBkaWZmZXJlbmNlXCIuXG4gKiBAcmV0dXJucyB7TnVtYmVyfVxuICovXG5mdW5jdGlvbiBjYWxjRXBzaWxvbiAoam5kKSB7XG5cdC8vIENhbGN1bGF0ZSB0aGUgZXBzaWxvbiB0byAyIGRlZ3JlZXMgc21hbGxlciB0aGFuIHRoZSBzcGVjaWZpZWQgSk5ELlxuXG5cdGNvbnN0IG9yZGVyID0gKCFqbmQpID8gMCA6IE1hdGguZmxvb3IoTWF0aC5sb2cxMChNYXRoLmFicyhqbmQpKSk7XG5cdC8vIExpbWl0IHRvIGFuIGFyYml0cmFyeSB2YWx1ZSB0byBlbnN1cmUgdmFsdWUgaXMgbmV2ZXIgdG9vIHNtYWxsIGFuZCBjYXVzZXMgaW5maW5pdGUgbG9vcHMuXG5cdHJldHVybiBNYXRoLm1heChwYXJzZUZsb2F0KGAxZSR7b3JkZXIgLSAyfWApLCAxZS02KTtcbn1cblxuY29uc3QgR01BUFBSRVNFVCA9IHtcblx0XCJoY3RcIjoge1xuXHRcdG1ldGhvZDogXCJoY3QuY1wiLFxuXHRcdGpuZDogMixcblx0XHRkZWx0YUVNZXRob2Q6IFwiaGN0XCIsXG5cdFx0YmxhY2tXaGl0ZUNsYW1wOiB7fSxcblx0fSxcblx0XCJoY3QtdG9uYWxcIjoge1xuXHRcdG1ldGhvZDogXCJoY3QuY1wiLFxuXHRcdGpuZDogMCxcblx0XHRkZWx0YUVNZXRob2Q6IFwiaGN0XCIsXG5cdFx0YmxhY2tXaGl0ZUNsYW1wOiB7IGNoYW5uZWw6IFwiaGN0LnRcIiwgbWluOiAwLCBtYXg6IDEwMCB9LFxuXHR9LFxufTtcblxuLyoqXG4gKiBGb3JjZSBjb29yZGluYXRlcyB0byBiZSBpbiBnYW11dCBvZiBhIGNlcnRhaW4gY29sb3Igc3BhY2UuXG4gKiBNdXRhdGVzIHRoZSBjb2xvciBpdCBpcyBwYXNzZWQuXG4gKiBAcGFyYW0ge09iamVjdHxzdHJpbmd9IG9wdGlvbnMgb2JqZWN0IG9yIHNwYWNlSWQgc3RyaW5nXG4gKiBAcGFyYW0ge3N0cmluZ30gb3B0aW9ucy5tZXRob2QgLSBIb3cgdG8gZm9yY2UgaW50byBnYW11dC5cbiAqICAgICAgICBJZiBcImNsaXBcIiwgY29vcmRpbmF0ZXMgYXJlIGp1c3QgY2xpcHBlZCB0byB0aGVpciByZWZlcmVuY2UgcmFuZ2UuXG4gKiAgICAgICAgSWYgXCJjc3NcIiwgY29vcmRpbmF0ZXMgYXJlIHJlZHVjZWQgYWNjb3JkaW5nIHRvIHRoZSBDU1MgNCBHYW11dCBNYXBwaW5nIEFsZ29yaXRobS5cbiAqICAgICAgICBJZiBpbiB0aGUgZm9ybSBbY29sb3JTcGFjZUlkXS5bY29vcmROYW1lXSwgdGhhdCBjb29yZGluYXRlIGlzIHJlZHVjZWRcbiAqICAgICAgICB1bnRpbCB0aGUgY29sb3IgaXMgaW4gZ2FtdXQuIFBsZWFzZSBub3RlIHRoYXQgdGhpcyBtYXkgcHJvZHVjZSBub25zZW5zaWNhbFxuICogICAgICAgIHJlc3VsdHMgZm9yIGNlcnRhaW4gY29vcmRpbmF0ZXMgKGUuZy4gaHVlKSBvciBpbmZpbml0ZSBsb29wcyBpZiByZWR1Y2luZyB0aGUgY29vcmRpbmF0ZSBuZXZlciBicmluZ3MgdGhlIGNvbG9yIGluIGdhbXV0LlxuICogQHBhcmFtIHtDb2xvclNwYWNlfHN0cmluZ30gb3B0aW9ucy5zcGFjZSAtIFRoZSBzcGFjZSB3aG9zZSBnYW11dCB3ZSB3YW50IHRvIG1hcCB0b1xuICogQHBhcmFtIHtzdHJpbmd9IG9wdGlvbnMuZGVsdGFFTWV0aG9kIC0gVGhlIGRlbHRhIEUgbWV0aG9kIHRvIHVzZSB3aGlsZSBwZXJmb3JtaW5nIGdhbXV0IG1hcHBpbmcuXG4gKiAgICAgICAgSWYgbm8gbWV0aG9kIGlzIHNwZWNpZmllZCwgZGVsdGEgRSAyMDAwIGlzIHVzZWQuXG4gKiBAcGFyYW0ge051bWJlcn0gb3B0aW9ucy5qbmQgLSBUaGUgXCJqdXN0IG5vdGljZWFibGUgZGlmZmVyZW5jZVwiIHRvIHRhcmdldC5cbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLmJsYWNrV2hpdGVDbGFtcCAtIFVzZWQgdG8gY29uZmlndXJlIFNEUiBibGFjayBhbmQgY2xhbXBpbmcuXG4gKiAgICAgICAgXCJjaGFubmVsXCIgaW5kaWNhdGVzIHRoZSBcInNwYWNlLmNoYW5uZWxcIiB0byB1c2UgZm9yIGRldGVybWluaW5nIHdoZW4gdG8gY2xhbXAuXG4gKiAgICAgICAgXCJtaW5cIiBpbmRpY2F0ZXMgdGhlIGxvd2VyIGxpbWl0IGZvciBibGFjayBjbGFtcGluZyBhbmQgXCJtYXhcIiBpbmRpY2F0ZXMgdGhlIHVwcGVyXG4gKiAgICAgICAgbGltaXQgZm9yIHdoaXRlIGNsYW1waW5nLlxuICovXG5cbmZ1bmN0aW9uIHRvR2FtdXQgKFxuXHRjb2xvcixcblx0e1xuXHRcdG1ldGhvZCA9IGRlZmF1bHRzLmdhbXV0X21hcHBpbmcsXG5cdFx0c3BhY2UgPSB1bmRlZmluZWQsXG5cdFx0ZGVsdGFFTWV0aG9kID0gXCJcIixcblx0XHRqbmQgPSAyLFxuXHRcdGJsYWNrV2hpdGVDbGFtcCA9IHt9LFxuXHR9ID0ge30sXG4pIHtcblx0Y29sb3IgPSBnZXRDb2xvcihjb2xvcik7XG5cblx0aWYgKGlzU3RyaW5nKGFyZ3VtZW50c1sxXSkpIHtcblx0XHRzcGFjZSA9IGFyZ3VtZW50c1sxXTtcblx0fVxuXHRlbHNlIGlmICghc3BhY2UpIHtcblx0XHRzcGFjZSA9IGNvbG9yLnNwYWNlO1xuXHR9XG5cblx0c3BhY2UgPSBDb2xvclNwYWNlLmdldChzcGFjZSk7XG5cblx0Ly8gMyBzcGFjZXM6XG5cdC8vIGNvbG9yLnNwYWNlOiBjdXJyZW50IGNvbG9yIHNwYWNlXG5cdC8vIHNwYWNlOiBzcGFjZSB3aG9zZSBnYW11dCB3ZSBhcmUgbWFwcGluZyB0b1xuXHQvLyBtYXBTcGFjZTogc3BhY2Ugd2l0aCB0aGUgY29vcmQgd2UncmUgcmVkdWNpbmdcblxuXHRpZiAoaW5HYW11dChjb2xvciwgc3BhY2UsIHsgZXBzaWxvbjogMCB9KSkge1xuXHRcdHJldHVybiBjb2xvcjtcblx0fVxuXG5cdGxldCBzcGFjZUNvbG9yO1xuXHRpZiAobWV0aG9kID09PSBcImNzc1wiKSB7XG5cdFx0c3BhY2VDb2xvciA9IHRvR2FtdXRDU1MoY29sb3IsIHsgc3BhY2UgfSk7XG5cdH1cblx0ZWxzZSB7XG5cdFx0aWYgKG1ldGhvZCAhPT0gXCJjbGlwXCIgJiYgIWluR2FtdXQoY29sb3IsIHNwYWNlKSkge1xuXG5cdFx0XHRpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKEdNQVBQUkVTRVQsIG1ldGhvZCkpIHtcblx0XHRcdFx0KHttZXRob2QsIGpuZCwgZGVsdGFFTWV0aG9kLCBibGFja1doaXRlQ2xhbXB9ID0gR01BUFBSRVNFVFttZXRob2RdKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gR2V0IHRoZSBjb3JyZWN0IGRlbHRhIEUgbWV0aG9kXG5cdFx0XHRsZXQgZGUgPSBkZWx0YUUyMDAwO1xuXHRcdFx0aWYgKGRlbHRhRU1ldGhvZCAhPT0gXCJcIikge1xuXHRcdFx0XHRmb3IgKGxldCBtIGluIGRlbHRhRU1ldGhvZHMpIHtcblx0XHRcdFx0XHRpZiAoXCJkZWx0YWVcIiArIGRlbHRhRU1ldGhvZC50b0xvd2VyQ2FzZSgpID09PSBtLnRvTG93ZXJDYXNlKCkpIHtcblx0XHRcdFx0XHRcdGRlID0gZGVsdGFFTWV0aG9kc1ttXTtcblx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRsZXQgY2xpcHBlZCA9IHRvR2FtdXQodG8oY29sb3IsIHNwYWNlKSwgeyBtZXRob2Q6IFwiY2xpcFwiLCBzcGFjZSB9KTtcblx0XHRcdGlmIChkZShjb2xvciwgY2xpcHBlZCkgPiBqbmQpIHtcblxuXHRcdFx0XHQvLyBDbGFtcCB0byBTRFIgd2hpdGUgYW5kIGJsYWNrIGlmIHJlcXVpcmVkXG5cdFx0XHRcdGlmIChPYmplY3Qua2V5cyhibGFja1doaXRlQ2xhbXApLmxlbmd0aCA9PT0gMykge1xuXHRcdFx0XHRcdGxldCBjaGFubmVsTWV0YSA9IENvbG9yU3BhY2UucmVzb2x2ZUNvb3JkKGJsYWNrV2hpdGVDbGFtcC5jaGFubmVsKTtcblx0XHRcdFx0XHRsZXQgY2hhbm5lbCA9IGdldCh0byhjb2xvciwgY2hhbm5lbE1ldGEuc3BhY2UpLCBjaGFubmVsTWV0YS5pZCk7XG5cdFx0XHRcdFx0aWYgKGlzTm9uZShjaGFubmVsKSkge1xuXHRcdFx0XHRcdFx0Y2hhbm5lbCA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmIChjaGFubmVsID49IGJsYWNrV2hpdGVDbGFtcC5tYXgpIHtcblx0XHRcdFx0XHRcdHJldHVybiB0byh7IHNwYWNlOiBcInh5ei1kNjVcIiwgY29vcmRzOiBXSElURVNbXCJENjVcIl0gfSwgY29sb3Iuc3BhY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIGlmIChjaGFubmVsIDw9IGJsYWNrV2hpdGVDbGFtcC5taW4pIHtcblx0XHRcdFx0XHRcdHJldHVybiB0byh7IHNwYWNlOiBcInh5ei1kNjVcIiwgY29vcmRzOiBbMCwgMCwgMF0gfSwgY29sb3Iuc3BhY2UpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFJlZHVjZSBhIGNvb3JkaW5hdGUgb2YgYSBjZXJ0YWluIGNvbG9yIHNwYWNlIHVudGlsIHRoZSBjb2xvciBpcyBpbiBnYW11dFxuXHRcdFx0XHRsZXQgY29vcmRNZXRhID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQobWV0aG9kKTtcblx0XHRcdFx0bGV0IG1hcFNwYWNlID0gY29vcmRNZXRhLnNwYWNlO1xuXHRcdFx0XHRsZXQgY29vcmRJZCA9IGNvb3JkTWV0YS5pZDtcblxuXHRcdFx0XHRsZXQgbWFwcGVkQ29sb3IgPSB0byhjb2xvciwgbWFwU3BhY2UpO1xuXHRcdFx0XHQvLyBJZiB3ZSB3ZXJlIGFscmVhZHkgaW4gdGhlIG1hcHBlZCBjb2xvciBzcGFjZSwgd2UgbmVlZCB0byByZXNvbHZlIHVuZGVmaW5lZCBjaGFubmVsc1xuXHRcdFx0XHRtYXBwZWRDb2xvci5jb29yZHMuZm9yRWFjaCgoYywgaSkgPT4ge1xuXHRcdFx0XHRcdGlmIChpc05vbmUoYykpIHtcblx0XHRcdFx0XHRcdG1hcHBlZENvbG9yLmNvb3Jkc1tpXSA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9KTtcblx0XHRcdFx0bGV0IGJvdW5kcyA9IGNvb3JkTWV0YS5yYW5nZSB8fCBjb29yZE1ldGEucmVmUmFuZ2U7XG5cdFx0XHRcdGxldCBtaW4gPSBib3VuZHNbMF07XG5cdFx0XHRcdGxldCDOtSA9IGNhbGNFcHNpbG9uKGpuZCk7XG5cdFx0XHRcdGxldCBsb3cgPSBtaW47XG5cdFx0XHRcdGxldCBoaWdoID0gZ2V0KG1hcHBlZENvbG9yLCBjb29yZElkKTtcblxuXHRcdFx0XHR3aGlsZSAoaGlnaCAtIGxvdyA+IM61KSB7XG5cdFx0XHRcdFx0bGV0IGNsaXBwZWQgPSBjbG9uZShtYXBwZWRDb2xvcik7XG5cdFx0XHRcdFx0Y2xpcHBlZCA9IHRvR2FtdXQoY2xpcHBlZCwgeyBzcGFjZSwgbWV0aG9kOiBcImNsaXBcIiB9KTtcblx0XHRcdFx0XHRsZXQgZGVsdGFFID0gZGUobWFwcGVkQ29sb3IsIGNsaXBwZWQpO1xuXG5cdFx0XHRcdFx0aWYgKGRlbHRhRSAtIGpuZCA8IM61KSB7XG5cdFx0XHRcdFx0XHRsb3cgPSBnZXQobWFwcGVkQ29sb3IsIGNvb3JkSWQpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRcdGhpZ2ggPSBnZXQobWFwcGVkQ29sb3IsIGNvb3JkSWQpO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdHNldChtYXBwZWRDb2xvciwgY29vcmRJZCwgKGxvdyArIGhpZ2gpIC8gMik7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRzcGFjZUNvbG9yID0gdG8obWFwcGVkQ29sb3IsIHNwYWNlKTtcblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRzcGFjZUNvbG9yID0gY2xpcHBlZDtcblx0XHRcdH1cblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRzcGFjZUNvbG9yID0gdG8oY29sb3IsIHNwYWNlKTtcblx0XHR9XG5cblx0XHRpZiAobWV0aG9kID09PSBcImNsaXBcIiAvLyBEdW1iIGNvb3JkIGNsaXBwaW5nXG5cdFx0XHQvLyBmaW5pc2ggb2ZmIHNtYXJ0ZXIgZ2FtdXQgbWFwcGluZyB3aXRoIGNsaXAgdG8gZ2V0IHJpZCBvZiDOtSwgc2VlICMxN1xuXHRcdFx0fHwgIWluR2FtdXQoc3BhY2VDb2xvciwgc3BhY2UsIHsgZXBzaWxvbjogMCB9KVxuXHRcdCkge1xuXHRcdFx0bGV0IGJvdW5kcyA9IE9iamVjdC52YWx1ZXMoc3BhY2UuY29vcmRzKS5tYXAoYyA9PiBjLnJhbmdlIHx8IFtdKTtcblxuXHRcdFx0c3BhY2VDb2xvci5jb29yZHMgPSBzcGFjZUNvbG9yLmNvb3Jkcy5tYXAoKGMsIGkpID0+IHtcblx0XHRcdFx0bGV0IFttaW4sIG1heF0gPSBib3VuZHNbaV07XG5cblx0XHRcdFx0aWYgKG1pbiAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0XHRcdFx0YyA9IE1hdGgubWF4KG1pbiwgYyk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAobWF4ICE9PSB1bmRlZmluZWQpIHtcblx0XHRcdFx0XHRjID0gTWF0aC5taW4oYywgbWF4KTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBjO1xuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKHNwYWNlICE9PSBjb2xvci5zcGFjZSkge1xuXHRcdHNwYWNlQ29sb3IgPSB0byhzcGFjZUNvbG9yLCBjb2xvci5zcGFjZSk7XG5cdH1cblxuXHRjb2xvci5jb29yZHMgPSBzcGFjZUNvbG9yLmNvb3Jkcztcblx0cmV0dXJuIGNvbG9yO1xufVxuXG50b0dhbXV0LnJldHVybnMgPSBcImNvbG9yXCI7XG5cbi8vIFRoZSByZWZlcmVuY2UgY29sb3JzIHRvIGJlIHVzZWQgaWYgbGlnaHRuZXNzIGlzIG91dCBvZiB0aGUgcmFuZ2UgMC0xIGluIHRoZVxuLy8gYE9rbGNoYCBzcGFjZS4gVGhlc2UgYXJlIGNyZWF0ZWQgaW4gdGhlIGBPa2xhYmAgc3BhY2UsIGFzIGl0IGlzIHVzZWQgYnkgdGhlXG4vLyBEZWx0YUVPSyBjYWxjdWxhdGlvbiwgc28gaXQgaXMgZ3VhcmFudGVlZCB0byBiZSBpbXBvcnRlZC5cbmNvbnN0IENPTE9SUyA9IHtcblx0V0hJVEU6IHsgc3BhY2U6IE9LTGFiLCBjb29yZHM6IFsxLCAwLCAwXSB9LFxuXHRCTEFDSzogeyBzcGFjZTogT0tMYWIsIGNvb3JkczogWzAsIDAsIDBdIH0sXG59O1xuXG4vKipcbiAqIEdpdmVuIGEgY29sb3IgYG9yaWdpbmAsIHJldHVybnMgYSBuZXcgY29sb3IgdGhhdCBpcyBpbiBnYW11dCB1c2luZ1xuICogdGhlIENTUyBHYW11dCBNYXBwaW5nIEFsZ29yaXRobS4gSWYgYHNwYWNlYCBpcyBzcGVjaWZpZWQsIGl0IHdpbGwgYmUgaW4gZ2FtdXRcbiAqIGluIGBzcGFjZWAsIGFuZCByZXR1cm5lZCBpbiBgc3BhY2VgLiBPdGhlcndpc2UsIGl0IHdpbGwgYmUgaW4gZ2FtdXQgYW5kXG4gKiByZXR1cm5lZCBpbiB0aGUgY29sb3Igc3BhY2Ugb2YgYG9yaWdpbmAuXG4gKiBAcGFyYW0ge09iamVjdH0gb3JpZ2luXG4gKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICogQHBhcmFtIHtDb2xvclNwYWNlfHN0cmluZ30gb3B0aW9ucy5zcGFjZVxuICogQHJldHVybnMge0NvbG9yfVxuICovXG5mdW5jdGlvbiB0b0dhbXV0Q1NTIChvcmlnaW4sIHtzcGFjZX0gPSB7fSkge1xuXHRjb25zdCBKTkQgPSAwLjAyO1xuXHRjb25zdCDOtSA9IDAuMDAwMTtcblxuXHRvcmlnaW4gPSBnZXRDb2xvcihvcmlnaW4pO1xuXG5cdGlmICghc3BhY2UpIHtcblx0XHRzcGFjZSA9IG9yaWdpbi5zcGFjZTtcblx0fVxuXG5cdHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuXHRjb25zdCBva2xjaFNwYWNlID0gQ29sb3JTcGFjZS5nZXQoXCJva2xjaFwiKTtcblxuXHRpZiAoc3BhY2UuaXNVbmJvdW5kZWQpIHtcblx0XHRyZXR1cm4gdG8ob3JpZ2luLCBzcGFjZSk7XG5cdH1cblxuXHRjb25zdCBvcmlnaW5fT0tMQ0ggPSB0byhvcmlnaW4sIG9rbGNoU3BhY2UpO1xuXHRsZXQgTCA9IG9yaWdpbl9PS0xDSC5jb29yZHNbMF07XG5cblx0Ly8gcmV0dXJuIG1lZGlhIHdoaXRlIG9yIGJsYWNrLCBpZiBsaWdodG5lc3MgaXMgb3V0IG9mIHJhbmdlXG5cdGlmIChMID49IDEpIHtcblx0XHRjb25zdCB3aGl0ZSA9IHRvKENPTE9SUy5XSElURSwgc3BhY2UpO1xuXHRcdHdoaXRlLmFscGhhID0gb3JpZ2luLmFscGhhO1xuXHRcdHJldHVybiB0byh3aGl0ZSwgc3BhY2UpO1xuXHR9XG5cdGlmIChMIDw9IDApIHtcblx0XHRjb25zdCBibGFjayA9IHRvKENPTE9SUy5CTEFDSywgc3BhY2UpO1xuXHRcdGJsYWNrLmFscGhhID0gb3JpZ2luLmFscGhhO1xuXHRcdHJldHVybiB0byhibGFjaywgc3BhY2UpO1xuXHR9XG5cblx0aWYgKGluR2FtdXQob3JpZ2luX09LTENILCBzcGFjZSwge2Vwc2lsb246IDB9KSkge1xuXHRcdHJldHVybiB0byhvcmlnaW5fT0tMQ0gsIHNwYWNlKTtcblx0fVxuXG5cdGZ1bmN0aW9uIGNsaXAgKF9jb2xvcikge1xuXHRcdGNvbnN0IGRlc3RDb2xvciA9IHRvKF9jb2xvciwgc3BhY2UpO1xuXHRcdGNvbnN0IHNwYWNlQ29vcmRzID0gT2JqZWN0LnZhbHVlcyhzcGFjZS5jb29yZHMpO1xuXHRcdGRlc3RDb2xvci5jb29yZHMgPSBkZXN0Q29sb3IuY29vcmRzLm1hcCgoY29vcmQsIGluZGV4KSA9PiB7XG5cdFx0XHRpZiAoXCJyYW5nZVwiIGluIHNwYWNlQ29vcmRzW2luZGV4XSkge1xuXHRcdFx0XHRjb25zdCBbbWluLCBtYXhdID0gIHNwYWNlQ29vcmRzW2luZGV4XS5yYW5nZTtcblx0XHRcdFx0cmV0dXJuIGNsYW1wKG1pbiwgY29vcmQsIG1heCk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gY29vcmQ7XG5cdFx0fSk7XG5cdFx0cmV0dXJuIGRlc3RDb2xvcjtcblx0fVxuXHRsZXQgbWluID0gMDtcblx0bGV0IG1heCA9IG9yaWdpbl9PS0xDSC5jb29yZHNbMV07XG5cdGxldCBtaW5faW5HYW11dCA9IHRydWU7XG5cdGxldCBjdXJyZW50ID0gY2xvbmUob3JpZ2luX09LTENIKTtcblx0bGV0IGNsaXBwZWQgPSBjbGlwKGN1cnJlbnQpO1xuXG5cdGxldCBFID0gZGVsdGFFT0soY2xpcHBlZCwgY3VycmVudCk7XG5cdGlmIChFIDwgSk5EKSB7XG5cdFx0cmV0dXJuIGNsaXBwZWQ7XG5cdH1cblxuXHR3aGlsZSAoKG1heCAtIG1pbikgPiDOtSkge1xuXHRcdGNvbnN0IGNocm9tYSA9IChtaW4gKyBtYXgpIC8gMjtcblx0XHRjdXJyZW50LmNvb3Jkc1sxXSA9IGNocm9tYTtcblx0XHRpZiAobWluX2luR2FtdXQgJiYgaW5HYW11dChjdXJyZW50LCBzcGFjZSwge2Vwc2lsb246IDB9KSkge1xuXHRcdFx0bWluID0gY2hyb21hO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGNsaXBwZWQgPSBjbGlwKGN1cnJlbnQpO1xuXHRcdFx0RSA9IGRlbHRhRU9LKGNsaXBwZWQsIGN1cnJlbnQpO1xuXHRcdFx0aWYgKEUgPCBKTkQpIHtcblx0XHRcdFx0aWYgKChKTkQgLSBFIDwgzrUpKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZWxzZSB7XG5cdFx0XHRcdFx0bWluX2luR2FtdXQgPSBmYWxzZTtcblx0XHRcdFx0XHRtaW4gPSBjaHJvbWE7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdGVsc2Uge1xuXHRcdFx0XHRtYXggPSBjaHJvbWE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cdHJldHVybiBjbGlwcGVkO1xufVxuXG4vKipcbiAqIENvbnZlcnQgdG8gY29sb3Igc3BhY2UgYW5kIHJldHVybiBhIG5ldyBjb2xvclxuICogQHBhcmFtIHtPYmplY3R8c3RyaW5nfSBzcGFjZSAtIENvbG9yIHNwYWNlIG9iamVjdCBvciBpZFxuICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5pbkdhbXV0IC0gV2hldGhlciB0byBmb3JjZSByZXN1bHRpbmcgY29sb3IgaW4gZ2FtdXRcbiAqIEByZXR1cm5zIHtDb2xvcn1cbiAqL1xuZnVuY3Rpb24gdG8gKGNvbG9yLCBzcGFjZSwge2luR2FtdXR9ID0ge30pIHtcblx0Y29sb3IgPSBnZXRDb2xvcihjb2xvcik7XG5cdHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoc3BhY2UpO1xuXG5cdGxldCBjb29yZHMgPSBzcGFjZS5mcm9tKGNvbG9yKTtcblx0bGV0IHJldCA9IHtzcGFjZSwgY29vcmRzLCBhbHBoYTogY29sb3IuYWxwaGF9O1xuXG5cdGlmIChpbkdhbXV0KSB7XG5cdFx0cmV0ID0gdG9HYW11dChyZXQsIGluR2FtdXQgPT09IHRydWUgPyB1bmRlZmluZWQgOiBpbkdhbXV0KTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbnRvLnJldHVybnMgPSBcImNvbG9yXCI7XG5cbi8qKlxuICogR2VuZXJpYyB0b1N0cmluZygpIG1ldGhvZCwgb3V0cHV0cyBhIGNvbG9yKHNwYWNlSWQgLi4uY29vcmRzKSBmdW5jdGlvbiwgYSBmdW5jdGlvbmFsIHN5bnRheCwgb3IgY3VzdG9tIGZvcm1hdHMgZGVmaW5lZCBieSB0aGUgY29sb3Igc3BhY2VcbiAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gKiBAcGFyYW0ge251bWJlcn0gb3B0aW9ucy5wcmVjaXNpb24gLSBTaWduaWZpY2FudCBkaWdpdHNcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gb3B0aW9ucy5pbkdhbXV0IC0gQWRqdXN0IGNvb3JkaW5hdGVzIHRvIGZpdCBpbiBnYW11dCBmaXJzdD8gW2RlZmF1bHQ6IGZhbHNlXVxuICovXG5mdW5jdGlvbiBzZXJpYWxpemUgKGNvbG9yLCB7XG5cdHByZWNpc2lvbiA9IGRlZmF1bHRzLnByZWNpc2lvbixcblx0Zm9ybWF0ID0gXCJkZWZhdWx0XCIsXG5cdGluR2FtdXQ6IGluR2FtdXQkMSA9IHRydWUsXG5cdC4uLmN1c3RvbU9wdGlvbnNcbn0gPSB7fSkge1xuXHRsZXQgcmV0O1xuXG5cdGNvbG9yID0gZ2V0Q29sb3IoY29sb3IpO1xuXG5cdGxldCBmb3JtYXRJZCA9IGZvcm1hdDtcblx0Zm9ybWF0ID0gY29sb3Iuc3BhY2UuZ2V0Rm9ybWF0KGZvcm1hdClcblx0ICAgICAgID8/IGNvbG9yLnNwYWNlLmdldEZvcm1hdChcImRlZmF1bHRcIilcblx0ICAgICAgID8/IENvbG9yU3BhY2UuREVGQVVMVF9GT1JNQVQ7XG5cblx0Ly8gVGhlIGFzc2lnbm1lbnQgdG8gY29vcmRzIGFuZCBpbkdhbXV0IG5lZWRzIHRvIHN0YXkgaW4gdGhlIG9yZGVyIHRoZXkgYXJlIG5vd1xuXHQvLyBUaGUgb3JkZXIgb2YgdGhlIGFzc2lnbm1lbnQgd2FzIGNoYW5nZWQgYXMgYSB3b3JrYXJvdW5kIGZvciBhIGJ1ZyBpbiBOZXh0LmpzXG5cdC8vIFNlZSB0aGlzIGlzc3VlIGZvciBkZXRhaWxzOiBodHRwczovL2dpdGh1Yi5jb20vY29sb3ItanMvY29sb3IuanMvaXNzdWVzLzI2MFxuXG5cdGxldCBjb29yZHMgPSBjb2xvci5jb29yZHMuc2xpY2UoKTsgLy8gY2xvbmUgc28gd2UgY2FuIG1hbmlwdWxhdGUgaXRcblxuXHRpbkdhbXV0JDEgfHw9IGZvcm1hdC50b0dhbXV0O1xuXG5cdGlmIChpbkdhbXV0JDEgJiYgIWluR2FtdXQoY29sb3IpKSB7XG5cdFx0Ly8gRklYTUUgd2hhdCBoYXBwZW5zIGlmIHRoZSBjb2xvciBjb250YWlucyBOYU5zP1xuXHRcdGNvb3JkcyA9IHRvR2FtdXQoY2xvbmUoY29sb3IpLCBpbkdhbXV0JDEgPT09IHRydWUgPyB1bmRlZmluZWQgOiBpbkdhbXV0JDEpLmNvb3Jkcztcblx0fVxuXG5cdGlmIChmb3JtYXQudHlwZSA9PT0gXCJjdXN0b21cIikge1xuXHRcdGN1c3RvbU9wdGlvbnMucHJlY2lzaW9uID0gcHJlY2lzaW9uO1xuXG5cdFx0aWYgKGZvcm1hdC5zZXJpYWxpemUpIHtcblx0XHRcdHJldCA9IGZvcm1hdC5zZXJpYWxpemUoY29vcmRzLCBjb2xvci5hbHBoYSwgY3VzdG9tT3B0aW9ucyk7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvcihgZm9ybWF0ICR7Zm9ybWF0SWR9IGNhbiBvbmx5IGJlIHVzZWQgdG8gcGFyc2UgY29sb3JzLCBub3QgZm9yIHNlcmlhbGl6YXRpb25gKTtcblx0XHR9XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gRnVuY3Rpb25hbCBzeW50YXhcblx0XHRsZXQgbmFtZSA9IGZvcm1hdC5uYW1lIHx8IFwiY29sb3JcIjtcblxuXHRcdGlmIChmb3JtYXQuc2VyaWFsaXplQ29vcmRzKSB7XG5cdFx0XHRjb29yZHMgPSBmb3JtYXQuc2VyaWFsaXplQ29vcmRzKGNvb3JkcywgcHJlY2lzaW9uKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRpZiAocHJlY2lzaW9uICE9PSBudWxsKSB7XG5cdFx0XHRcdGNvb3JkcyA9IGNvb3Jkcy5tYXAoYyA9PiB7XG5cdFx0XHRcdFx0cmV0dXJuIHNlcmlhbGl6ZU51bWJlcihjLCB7cHJlY2lzaW9ufSk7XG5cdFx0XHRcdH0pO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGxldCBhcmdzID0gWy4uLmNvb3Jkc107XG5cblx0XHRpZiAobmFtZSA9PT0gXCJjb2xvclwiKSB7XG5cdFx0XHQvLyBJZiBvdXRwdXQgaXMgYSBjb2xvcigpIGZ1bmN0aW9uLCBhZGQgY29sb3JzcGFjZSBpZCBhcyBmaXJzdCBhcmd1bWVudFxuXHRcdFx0bGV0IGNzc0lkID0gZm9ybWF0LmlkIHx8IGZvcm1hdC5pZHM/LlswXSB8fCBjb2xvci5zcGFjZS5pZDtcblx0XHRcdGFyZ3MudW5zaGlmdChjc3NJZCk7XG5cdFx0fVxuXG5cdFx0bGV0IGFscGhhID0gY29sb3IuYWxwaGE7XG5cdFx0aWYgKHByZWNpc2lvbiAhPT0gbnVsbCkge1xuXHRcdFx0YWxwaGEgPSBzZXJpYWxpemVOdW1iZXIoYWxwaGEsIHtwcmVjaXNpb259KTtcblx0XHR9XG5cblx0XHRsZXQgc3RyQWxwaGEgPSBjb2xvci5hbHBoYSA+PSAxIHx8IGZvcm1hdC5ub0FscGhhID8gXCJcIiA6IGAke2Zvcm1hdC5jb21tYXMgPyBcIixcIiA6IFwiIC9cIn0gJHthbHBoYX1gO1xuXHRcdHJldCA9IGAke25hbWV9KCR7YXJncy5qb2luKGZvcm1hdC5jb21tYXMgPyBcIiwgXCIgOiBcIiBcIil9JHtzdHJBbHBoYX0pYDtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cbi8vIGNvbnZlcnQgYW4gYXJyYXkgb2YgbGluZWFyLWxpZ2h0IHJlYzIwMjAgdmFsdWVzIHRvIENJRSBYWVpcbi8vIHVzaW5nICBENjUgKG5vIGNocm9tYXRpYyBhZGFwdGF0aW9uKVxuLy8gaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcW5fUkdCX1hZWl9NYXRyaXguaHRtbFxuLy8gMCBpcyBhY3R1YWxseSBjYWxjdWxhdGVkIGFzICA0Ljk5NDEwNjU3NDQ2NjA3NmUtMTdcbmNvbnN0IHRvWFlaX00kNSA9IFtcblx0WyAwLjYzNjk1ODA0ODMwMTI5MTQsIDAuMTQ0NjE2OTAzNTg2MjA4MzIsICAwLjE2ODg4MDk3NTE2NDE3MjEgIF0sXG5cdFsgMC4yNjI3MDAyMTIwMTEyNjcxLCAwLjY3Nzk5ODA3MTUxODg3MDgsICAgMC4wNTkzMDE3MTY0Njk4NjE5NiBdLFxuXHRbIDAuMDAwMDAwMDAwMDAwMDAwLCAgMC4wMjgwNzI2OTMwNDkwODc0MjgsIDEuMDYwOTg1MDU3NzEwNzkxICAgXSxcbl07XG5cbi8vIGZyb20gSVRVLVIgQlQuMjEyNC0wIEFubmV4IDIgcC4zXG5jb25zdCBmcm9tWFlaX00kNSA9IFtcblx0WyAgMS43MTY2NTExODc5NzEyNjgsICAtMC4zNTU2NzA3ODM3NzYzOTIsIC0wLjI1MzM2NjI4MTM3MzY2MCAgXSxcblx0WyAtMC42NjY2ODQzNTE4MzI0ODksICAgMS42MTY0ODEyMzY2MzQ5MzksICAwLjAxNTc2ODU0NTgxMzkxMTEgXSxcblx0WyAgMC4wMTc2Mzk4NTc0NDUzMTEsICAtMC4wNDI3NzA2MTMyNTc4MDksICAwLjk0MjEwMzEyMTIzNTQ3NCAgXSxcbl07XG5cbnZhciBSRUMyMDIwTGluZWFyID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuXHRpZDogXCJyZWMyMDIwLWxpbmVhclwiLFxuXHRjc3NJZDogXCItLXJlYzIwMjAtbGluZWFyXCIsXG5cdG5hbWU6IFwiTGluZWFyIFJFQy4yMDIwXCIsXG5cdHdoaXRlOiBcIkQ2NVwiLFxuXHR0b1hZWl9NOiB0b1hZWl9NJDUsXG5cdGZyb21YWVpfTTogZnJvbVhZWl9NJDUsXG59KTtcblxuLy8gaW1wb3J0IHNSR0IgZnJvbSBcIi4vc3JnYi5qc1wiO1xuXG5jb25zdCDOsSA9IDEuMDk5Mjk2ODI2ODA5NDQ7XG5jb25zdCDOsiA9IDAuMDE4MDUzOTY4NTEwODA3O1xuXG52YXIgUkVDMjAyMCA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwicmVjMjAyMFwiLFxuXHRuYW1lOiBcIlJFQy4yMDIwXCIsXG5cdGJhc2U6IFJFQzIwMjBMaW5lYXIsXG5cdC8vIE5vbi1saW5lYXIgdHJhbnNmZXIgZnVuY3Rpb24gZnJvbSBSZWMuIElUVS1SIEJULjIwMjAtMiB0YWJsZSA0XG5cdHRvQmFzZSAoUkdCKSB7XG5cdFx0cmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0aWYgKHZhbCA8IM6yICogNC41KSB7XG5cdFx0XHRcdHJldHVybiB2YWwgLyA0LjU7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBNYXRoLnBvdygodmFsICsgzrEgLSAxKSAvIM6xLCAxIC8gMC40NSk7XG5cdFx0fSk7XG5cdH0sXG5cdGZyb21CYXNlIChSR0IpIHtcblx0XHRyZXR1cm4gUkdCLm1hcChmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRpZiAodmFsID49IM6yKSB7XG5cdFx0XHRcdHJldHVybiDOsSAqIE1hdGgucG93KHZhbCwgMC40NSkgLSAozrEgLSAxKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDQuNSAqIHZhbDtcblx0XHR9KTtcblx0fSxcbn0pO1xuXG5jb25zdCB0b1hZWl9NJDQgPSBbXG5cdFswLjQ4NjU3MDk0ODY0ODIxNjIsIDAuMjY1NjY3NjkzMTY5MDkzMDYsIDAuMTk4MjE3Mjg1MjM0MzYyNV0sXG5cdFswLjIyODk3NDU2NDA2OTc0ODgsIDAuNjkxNzM4NTIxODM2NTA2NCwgIDAuMDc5Mjg2OTE0MDkzNzQ1XSxcblx0WzAuMDAwMDAwMDAwMDAwMDAwMCwgMC4wNDUxMTMzODE4NTg5MDI2NCwgMS4wNDM5NDQzNjg5MDA5NzZdLFxuXTtcblxuY29uc3QgZnJvbVhZWl9NJDQgPSBbXG5cdFsgMi40OTM0OTY5MTE5NDE0MjUsICAgLTAuOTMxMzgzNjE3OTE5MTIzOSwgLTAuNDAyNzEwNzg0NDUwNzE2ODRdLFxuXHRbLTAuODI5NDg4OTY5NTYxNTc0NywgICAxLjc2MjY2NDA2MDMxODM0NjMsICAwLjAyMzYyNDY4NTg0MTk0MzU3N10sXG5cdFsgMC4wMzU4NDU4MzAyNDM3ODQ0NywgLTAuMDc2MTcyMzg5MjY4MDQxODIsIDAuOTU2ODg0NTI0MDA3Njg3Ml0sXG5dO1xuXG52YXIgUDNMaW5lYXIgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG5cdGlkOiBcInAzLWxpbmVhclwiLFxuXHRjc3NJZDogXCItLWRpc3BsYXktcDMtbGluZWFyXCIsXG5cdG5hbWU6IFwiTGluZWFyIFAzXCIsXG5cdHdoaXRlOiBcIkQ2NVwiLFxuXHR0b1hZWl9NOiB0b1hZWl9NJDQsXG5cdGZyb21YWVpfTTogZnJvbVhZWl9NJDQsXG59KTtcblxuLy8gVGhpcyBpcyB0aGUgbGluZWFyLWxpZ2h0IHZlcnNpb24gb2Ygc1JHQlxuLy8gYXMgdXNlZCBmb3IgZXhhbXBsZSBpbiBTVkcgZmlsdGVyc1xuLy8gb3IgaW4gQ2FudmFzXG5cbi8vIFRoaXMgbWF0cml4IHdhcyBjYWxjdWxhdGVkIGRpcmVjdGx5IGZyb20gdGhlIFJHQiBhbmQgd2hpdGUgY2hyb21hdGljaXRpZXNcbi8vIHdoZW4gcm91bmRlZCB0byA4IGRlY2ltYWwgcGxhY2VzLCBpdCBhZ3JlZXMgY29tcGxldGVseSB3aXRoIHRoZSBvZmZpY2lhbCBtYXRyaXhcbi8vIHNlZSBodHRwczovL2dpdGh1Yi5jb20vdzNjL2Nzc3dnLWRyYWZ0cy9pc3N1ZXMvNTkyMlxuY29uc3QgdG9YWVpfTSQzID0gW1xuXHRbIDAuNDEyMzkwNzk5MjY1OTU5MzQsIDAuMzU3NTg0MzM5MzgzODc4LCAgIDAuMTgwNDgwNzg4NDAxODM0MyAgXSxcblx0WyAwLjIxMjYzOTAwNTg3MTUxMDI3LCAwLjcxNTE2ODY3ODc2Nzc1NiwgICAwLjA3MjE5MjMxNTM2MDczMzcxIF0sXG5cdFsgMC4wMTkzMzA4MTg3MTU1OTE4MiwgMC4xMTkxOTQ3Nzk3OTQ2MjU5OCwgMC45NTA1MzIxNTIyNDk2NjA3ICBdLFxuXTtcblxuLy8gVGhpcyBtYXRyaXggaXMgdGhlIGludmVyc2Ugb2YgdGhlIGFib3ZlO1xuLy8gYWdhaW4gaXQgYWdyZWVzIHdpdGggdGhlIG9mZmljaWFsIGRlZmluaXRpb24gd2hlbiByb3VuZGVkIHRvIDggZGVjaW1hbCBwbGFjZXNcbmNvbnN0IGZyb21YWVpfTSQzID0gW1xuXHRbICAzLjI0MDk2OTk0MTkwNDUyMjYsICAtMS41MzczODMxNzc1NzAwOTQsICAgLTAuNDk4NjEwNzYwMjkzMDAzNCAgXSxcblx0WyAtMC45NjkyNDM2MzYyODA4Nzk2LCAgIDEuODc1OTY3NTAxNTA3NzIwMiwgICAwLjA0MTU1NTA1NzQwNzE3NTU5IF0sXG5cdFsgIDAuMDU1NjMwMDc5Njk2OTkzNjYsIC0wLjIwMzk3Njk1ODg4ODk3NjUyLCAgMS4wNTY5NzE1MTQyNDI4Nzg2ICBdLFxuXTtcblxudmFyIHNSR0JMaW5lYXIgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG5cdGlkOiBcInNyZ2ItbGluZWFyXCIsXG5cdG5hbWU6IFwiTGluZWFyIHNSR0JcIixcblx0d2hpdGU6IFwiRDY1XCIsXG5cdHRvWFlaX006IHRvWFlaX00kMyxcblx0ZnJvbVhZWl9NOiBmcm9tWFlaX00kMyxcbn0pO1xuXG4vKiBMaXN0IG9mIENTUyBjb2xvciBrZXl3b3Jkc1xuICogTm90ZSB0aGF0IHRoaXMgZG9lcyBub3QgaW5jbHVkZSBjdXJyZW50Q29sb3IsIHRyYW5zcGFyZW50LFxuICogb3Igc3lzdGVtIGNvbG9yc1xuICovXG5cbi8vIFRvIHByb2R1Y2U6IFZpc2l0IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtY29sb3ItNC8jbmFtZWQtY29sb3JzXG4vLyBhbmQgcnVuIGluIHRoZSBjb25zb2xlOlxuLy8gY29weSgkJChcInRyXCIsICQoXCIubmFtZWQtY29sb3ItdGFibGUgdGJvZHlcIikpLm1hcCh0ciA9PiBgXCIke3RyLmNlbGxzWzJdLnRleHRDb250ZW50LnRyaW0oKX1cIjogWyR7dHIuY2VsbHNbNF0udGV4dENvbnRlbnQudHJpbSgpLnNwbGl0KC9cXHMrLykubWFwKGMgPT4gYyA9PT0gXCIwXCI/IFwiMFwiIDogYyA9PT0gXCIyNTVcIj8gXCIxXCIgOiBjICsgXCIgLyAyNTVcIikuam9pbihcIiwgXCIpfV1gKS5qb2luKFwiLFxcblwiKSlcbnZhciBLRVlXT1JEUyA9IHtcblx0XCJhbGljZWJsdWVcIjogWzI0MCAvIDI1NSwgMjQ4IC8gMjU1LCAxXSxcblx0XCJhbnRpcXVld2hpdGVcIjogWzI1MCAvIDI1NSwgMjM1IC8gMjU1LCAyMTUgLyAyNTVdLFxuXHRcImFxdWFcIjogWzAsIDEsIDFdLFxuXHRcImFxdWFtYXJpbmVcIjogWzEyNyAvIDI1NSwgMSwgMjEyIC8gMjU1XSxcblx0XCJhenVyZVwiOiBbMjQwIC8gMjU1LCAxLCAxXSxcblx0XCJiZWlnZVwiOiBbMjQ1IC8gMjU1LCAyNDUgLyAyNTUsIDIyMCAvIDI1NV0sXG5cdFwiYmlzcXVlXCI6IFsxLCAyMjggLyAyNTUsIDE5NiAvIDI1NV0sXG5cdFwiYmxhY2tcIjogWzAsIDAsIDBdLFxuXHRcImJsYW5jaGVkYWxtb25kXCI6IFsxLCAyMzUgLyAyNTUsIDIwNSAvIDI1NV0sXG5cdFwiYmx1ZVwiOiBbMCwgMCwgMV0sXG5cdFwiYmx1ZXZpb2xldFwiOiBbMTM4IC8gMjU1LCA0MyAvIDI1NSwgMjI2IC8gMjU1XSxcblx0XCJicm93blwiOiBbMTY1IC8gMjU1LCA0MiAvIDI1NSwgNDIgLyAyNTVdLFxuXHRcImJ1cmx5d29vZFwiOiBbMjIyIC8gMjU1LCAxODQgLyAyNTUsIDEzNSAvIDI1NV0sXG5cdFwiY2FkZXRibHVlXCI6IFs5NSAvIDI1NSwgMTU4IC8gMjU1LCAxNjAgLyAyNTVdLFxuXHRcImNoYXJ0cmV1c2VcIjogWzEyNyAvIDI1NSwgMSwgMF0sXG5cdFwiY2hvY29sYXRlXCI6IFsyMTAgLyAyNTUsIDEwNSAvIDI1NSwgMzAgLyAyNTVdLFxuXHRcImNvcmFsXCI6IFsxLCAxMjcgLyAyNTUsIDgwIC8gMjU1XSxcblx0XCJjb3JuZmxvd2VyYmx1ZVwiOiBbMTAwIC8gMjU1LCAxNDkgLyAyNTUsIDIzNyAvIDI1NV0sXG5cdFwiY29ybnNpbGtcIjogWzEsIDI0OCAvIDI1NSwgMjIwIC8gMjU1XSxcblx0XCJjcmltc29uXCI6IFsyMjAgLyAyNTUsIDIwIC8gMjU1LCA2MCAvIDI1NV0sXG5cdFwiY3lhblwiOiBbMCwgMSwgMV0sXG5cdFwiZGFya2JsdWVcIjogWzAsIDAsIDEzOSAvIDI1NV0sXG5cdFwiZGFya2N5YW5cIjogWzAsIDEzOSAvIDI1NSwgMTM5IC8gMjU1XSxcblx0XCJkYXJrZ29sZGVucm9kXCI6IFsxODQgLyAyNTUsIDEzNCAvIDI1NSwgMTEgLyAyNTVdLFxuXHRcImRhcmtncmF5XCI6IFsxNjkgLyAyNTUsIDE2OSAvIDI1NSwgMTY5IC8gMjU1XSxcblx0XCJkYXJrZ3JlZW5cIjogWzAsIDEwMCAvIDI1NSwgMF0sXG5cdFwiZGFya2dyZXlcIjogWzE2OSAvIDI1NSwgMTY5IC8gMjU1LCAxNjkgLyAyNTVdLFxuXHRcImRhcmtraGFraVwiOiBbMTg5IC8gMjU1LCAxODMgLyAyNTUsIDEwNyAvIDI1NV0sXG5cdFwiZGFya21hZ2VudGFcIjogWzEzOSAvIDI1NSwgMCwgMTM5IC8gMjU1XSxcblx0XCJkYXJrb2xpdmVncmVlblwiOiBbODUgLyAyNTUsIDEwNyAvIDI1NSwgNDcgLyAyNTVdLFxuXHRcImRhcmtvcmFuZ2VcIjogWzEsIDE0MCAvIDI1NSwgMF0sXG5cdFwiZGFya29yY2hpZFwiOiBbMTUzIC8gMjU1LCA1MCAvIDI1NSwgMjA0IC8gMjU1XSxcblx0XCJkYXJrcmVkXCI6IFsxMzkgLyAyNTUsIDAsIDBdLFxuXHRcImRhcmtzYWxtb25cIjogWzIzMyAvIDI1NSwgMTUwIC8gMjU1LCAxMjIgLyAyNTVdLFxuXHRcImRhcmtzZWFncmVlblwiOiBbMTQzIC8gMjU1LCAxODggLyAyNTUsIDE0MyAvIDI1NV0sXG5cdFwiZGFya3NsYXRlYmx1ZVwiOiBbNzIgLyAyNTUsIDYxIC8gMjU1LCAxMzkgLyAyNTVdLFxuXHRcImRhcmtzbGF0ZWdyYXlcIjogWzQ3IC8gMjU1LCA3OSAvIDI1NSwgNzkgLyAyNTVdLFxuXHRcImRhcmtzbGF0ZWdyZXlcIjogWzQ3IC8gMjU1LCA3OSAvIDI1NSwgNzkgLyAyNTVdLFxuXHRcImRhcmt0dXJxdW9pc2VcIjogWzAsIDIwNiAvIDI1NSwgMjA5IC8gMjU1XSxcblx0XCJkYXJrdmlvbGV0XCI6IFsxNDggLyAyNTUsIDAsIDIxMSAvIDI1NV0sXG5cdFwiZGVlcHBpbmtcIjogWzEsIDIwIC8gMjU1LCAxNDcgLyAyNTVdLFxuXHRcImRlZXBza3libHVlXCI6IFswLCAxOTEgLyAyNTUsIDFdLFxuXHRcImRpbWdyYXlcIjogWzEwNSAvIDI1NSwgMTA1IC8gMjU1LCAxMDUgLyAyNTVdLFxuXHRcImRpbWdyZXlcIjogWzEwNSAvIDI1NSwgMTA1IC8gMjU1LCAxMDUgLyAyNTVdLFxuXHRcImRvZGdlcmJsdWVcIjogWzMwIC8gMjU1LCAxNDQgLyAyNTUsIDFdLFxuXHRcImZpcmVicmlja1wiOiBbMTc4IC8gMjU1LCAzNCAvIDI1NSwgMzQgLyAyNTVdLFxuXHRcImZsb3JhbHdoaXRlXCI6IFsxLCAyNTAgLyAyNTUsIDI0MCAvIDI1NV0sXG5cdFwiZm9yZXN0Z3JlZW5cIjogWzM0IC8gMjU1LCAxMzkgLyAyNTUsIDM0IC8gMjU1XSxcblx0XCJmdWNoc2lhXCI6IFsxLCAwLCAxXSxcblx0XCJnYWluc2Jvcm9cIjogWzIyMCAvIDI1NSwgMjIwIC8gMjU1LCAyMjAgLyAyNTVdLFxuXHRcImdob3N0d2hpdGVcIjogWzI0OCAvIDI1NSwgMjQ4IC8gMjU1LCAxXSxcblx0XCJnb2xkXCI6IFsxLCAyMTUgLyAyNTUsIDBdLFxuXHRcImdvbGRlbnJvZFwiOiBbMjE4IC8gMjU1LCAxNjUgLyAyNTUsIDMyIC8gMjU1XSxcblx0XCJncmF5XCI6IFsxMjggLyAyNTUsIDEyOCAvIDI1NSwgMTI4IC8gMjU1XSxcblx0XCJncmVlblwiOiBbMCwgMTI4IC8gMjU1LCAwXSxcblx0XCJncmVlbnllbGxvd1wiOiBbMTczIC8gMjU1LCAxLCA0NyAvIDI1NV0sXG5cdFwiZ3JleVwiOiBbMTI4IC8gMjU1LCAxMjggLyAyNTUsIDEyOCAvIDI1NV0sXG5cdFwiaG9uZXlkZXdcIjogWzI0MCAvIDI1NSwgMSwgMjQwIC8gMjU1XSxcblx0XCJob3RwaW5rXCI6IFsxLCAxMDUgLyAyNTUsIDE4MCAvIDI1NV0sXG5cdFwiaW5kaWFucmVkXCI6IFsyMDUgLyAyNTUsIDkyIC8gMjU1LCA5MiAvIDI1NV0sXG5cdFwiaW5kaWdvXCI6IFs3NSAvIDI1NSwgMCwgMTMwIC8gMjU1XSxcblx0XCJpdm9yeVwiOiBbMSwgMSwgMjQwIC8gMjU1XSxcblx0XCJraGFraVwiOiBbMjQwIC8gMjU1LCAyMzAgLyAyNTUsIDE0MCAvIDI1NV0sXG5cdFwibGF2ZW5kZXJcIjogWzIzMCAvIDI1NSwgMjMwIC8gMjU1LCAyNTAgLyAyNTVdLFxuXHRcImxhdmVuZGVyYmx1c2hcIjogWzEsIDI0MCAvIDI1NSwgMjQ1IC8gMjU1XSxcblx0XCJsYXduZ3JlZW5cIjogWzEyNCAvIDI1NSwgMjUyIC8gMjU1LCAwXSxcblx0XCJsZW1vbmNoaWZmb25cIjogWzEsIDI1MCAvIDI1NSwgMjA1IC8gMjU1XSxcblx0XCJsaWdodGJsdWVcIjogWzE3MyAvIDI1NSwgMjE2IC8gMjU1LCAyMzAgLyAyNTVdLFxuXHRcImxpZ2h0Y29yYWxcIjogWzI0MCAvIDI1NSwgMTI4IC8gMjU1LCAxMjggLyAyNTVdLFxuXHRcImxpZ2h0Y3lhblwiOiBbMjI0IC8gMjU1LCAxLCAxXSxcblx0XCJsaWdodGdvbGRlbnJvZHllbGxvd1wiOiBbMjUwIC8gMjU1LCAyNTAgLyAyNTUsIDIxMCAvIDI1NV0sXG5cdFwibGlnaHRncmF5XCI6IFsyMTEgLyAyNTUsIDIxMSAvIDI1NSwgMjExIC8gMjU1XSxcblx0XCJsaWdodGdyZWVuXCI6IFsxNDQgLyAyNTUsIDIzOCAvIDI1NSwgMTQ0IC8gMjU1XSxcblx0XCJsaWdodGdyZXlcIjogWzIxMSAvIDI1NSwgMjExIC8gMjU1LCAyMTEgLyAyNTVdLFxuXHRcImxpZ2h0cGlua1wiOiBbMSwgMTgyIC8gMjU1LCAxOTMgLyAyNTVdLFxuXHRcImxpZ2h0c2FsbW9uXCI6IFsxLCAxNjAgLyAyNTUsIDEyMiAvIDI1NV0sXG5cdFwibGlnaHRzZWFncmVlblwiOiBbMzIgLyAyNTUsIDE3OCAvIDI1NSwgMTcwIC8gMjU1XSxcblx0XCJsaWdodHNreWJsdWVcIjogWzEzNSAvIDI1NSwgMjA2IC8gMjU1LCAyNTAgLyAyNTVdLFxuXHRcImxpZ2h0c2xhdGVncmF5XCI6IFsxMTkgLyAyNTUsIDEzNiAvIDI1NSwgMTUzIC8gMjU1XSxcblx0XCJsaWdodHNsYXRlZ3JleVwiOiBbMTE5IC8gMjU1LCAxMzYgLyAyNTUsIDE1MyAvIDI1NV0sXG5cdFwibGlnaHRzdGVlbGJsdWVcIjogWzE3NiAvIDI1NSwgMTk2IC8gMjU1LCAyMjIgLyAyNTVdLFxuXHRcImxpZ2h0eWVsbG93XCI6IFsxLCAxLCAyMjQgLyAyNTVdLFxuXHRcImxpbWVcIjogWzAsIDEsIDBdLFxuXHRcImxpbWVncmVlblwiOiBbNTAgLyAyNTUsIDIwNSAvIDI1NSwgNTAgLyAyNTVdLFxuXHRcImxpbmVuXCI6IFsyNTAgLyAyNTUsIDI0MCAvIDI1NSwgMjMwIC8gMjU1XSxcblx0XCJtYWdlbnRhXCI6IFsxLCAwLCAxXSxcblx0XCJtYXJvb25cIjogWzEyOCAvIDI1NSwgMCwgMF0sXG5cdFwibWVkaXVtYXF1YW1hcmluZVwiOiBbMTAyIC8gMjU1LCAyMDUgLyAyNTUsIDE3MCAvIDI1NV0sXG5cdFwibWVkaXVtYmx1ZVwiOiBbMCwgMCwgMjA1IC8gMjU1XSxcblx0XCJtZWRpdW1vcmNoaWRcIjogWzE4NiAvIDI1NSwgODUgLyAyNTUsIDIxMSAvIDI1NV0sXG5cdFwibWVkaXVtcHVycGxlXCI6IFsxNDcgLyAyNTUsIDExMiAvIDI1NSwgMjE5IC8gMjU1XSxcblx0XCJtZWRpdW1zZWFncmVlblwiOiBbNjAgLyAyNTUsIDE3OSAvIDI1NSwgMTEzIC8gMjU1XSxcblx0XCJtZWRpdW1zbGF0ZWJsdWVcIjogWzEyMyAvIDI1NSwgMTA0IC8gMjU1LCAyMzggLyAyNTVdLFxuXHRcIm1lZGl1bXNwcmluZ2dyZWVuXCI6IFswLCAyNTAgLyAyNTUsIDE1NCAvIDI1NV0sXG5cdFwibWVkaXVtdHVycXVvaXNlXCI6IFs3MiAvIDI1NSwgMjA5IC8gMjU1LCAyMDQgLyAyNTVdLFxuXHRcIm1lZGl1bXZpb2xldHJlZFwiOiBbMTk5IC8gMjU1LCAyMSAvIDI1NSwgMTMzIC8gMjU1XSxcblx0XCJtaWRuaWdodGJsdWVcIjogWzI1IC8gMjU1LCAyNSAvIDI1NSwgMTEyIC8gMjU1XSxcblx0XCJtaW50Y3JlYW1cIjogWzI0NSAvIDI1NSwgMSwgMjUwIC8gMjU1XSxcblx0XCJtaXN0eXJvc2VcIjogWzEsIDIyOCAvIDI1NSwgMjI1IC8gMjU1XSxcblx0XCJtb2NjYXNpblwiOiBbMSwgMjI4IC8gMjU1LCAxODEgLyAyNTVdLFxuXHRcIm5hdmFqb3doaXRlXCI6IFsxLCAyMjIgLyAyNTUsIDE3MyAvIDI1NV0sXG5cdFwibmF2eVwiOiBbMCwgMCwgMTI4IC8gMjU1XSxcblx0XCJvbGRsYWNlXCI6IFsyNTMgLyAyNTUsIDI0NSAvIDI1NSwgMjMwIC8gMjU1XSxcblx0XCJvbGl2ZVwiOiBbMTI4IC8gMjU1LCAxMjggLyAyNTUsIDBdLFxuXHRcIm9saXZlZHJhYlwiOiBbMTA3IC8gMjU1LCAxNDIgLyAyNTUsIDM1IC8gMjU1XSxcblx0XCJvcmFuZ2VcIjogWzEsIDE2NSAvIDI1NSwgMF0sXG5cdFwib3JhbmdlcmVkXCI6IFsxLCA2OSAvIDI1NSwgMF0sXG5cdFwib3JjaGlkXCI6IFsyMTggLyAyNTUsIDExMiAvIDI1NSwgMjE0IC8gMjU1XSxcblx0XCJwYWxlZ29sZGVucm9kXCI6IFsyMzggLyAyNTUsIDIzMiAvIDI1NSwgMTcwIC8gMjU1XSxcblx0XCJwYWxlZ3JlZW5cIjogWzE1MiAvIDI1NSwgMjUxIC8gMjU1LCAxNTIgLyAyNTVdLFxuXHRcInBhbGV0dXJxdW9pc2VcIjogWzE3NSAvIDI1NSwgMjM4IC8gMjU1LCAyMzggLyAyNTVdLFxuXHRcInBhbGV2aW9sZXRyZWRcIjogWzIxOSAvIDI1NSwgMTEyIC8gMjU1LCAxNDcgLyAyNTVdLFxuXHRcInBhcGF5YXdoaXBcIjogWzEsIDIzOSAvIDI1NSwgMjEzIC8gMjU1XSxcblx0XCJwZWFjaHB1ZmZcIjogWzEsIDIxOCAvIDI1NSwgMTg1IC8gMjU1XSxcblx0XCJwZXJ1XCI6IFsyMDUgLyAyNTUsIDEzMyAvIDI1NSwgNjMgLyAyNTVdLFxuXHRcInBpbmtcIjogWzEsIDE5MiAvIDI1NSwgMjAzIC8gMjU1XSxcblx0XCJwbHVtXCI6IFsyMjEgLyAyNTUsIDE2MCAvIDI1NSwgMjIxIC8gMjU1XSxcblx0XCJwb3dkZXJibHVlXCI6IFsxNzYgLyAyNTUsIDIyNCAvIDI1NSwgMjMwIC8gMjU1XSxcblx0XCJwdXJwbGVcIjogWzEyOCAvIDI1NSwgMCwgMTI4IC8gMjU1XSxcblx0XCJyZWJlY2NhcHVycGxlXCI6IFsxMDIgLyAyNTUsIDUxIC8gMjU1LCAxNTMgLyAyNTVdLFxuXHRcInJlZFwiOiBbMSwgMCwgMF0sXG5cdFwicm9zeWJyb3duXCI6IFsxODggLyAyNTUsIDE0MyAvIDI1NSwgMTQzIC8gMjU1XSxcblx0XCJyb3lhbGJsdWVcIjogWzY1IC8gMjU1LCAxMDUgLyAyNTUsIDIyNSAvIDI1NV0sXG5cdFwic2FkZGxlYnJvd25cIjogWzEzOSAvIDI1NSwgNjkgLyAyNTUsIDE5IC8gMjU1XSxcblx0XCJzYWxtb25cIjogWzI1MCAvIDI1NSwgMTI4IC8gMjU1LCAxMTQgLyAyNTVdLFxuXHRcInNhbmR5YnJvd25cIjogWzI0NCAvIDI1NSwgMTY0IC8gMjU1LCA5NiAvIDI1NV0sXG5cdFwic2VhZ3JlZW5cIjogWzQ2IC8gMjU1LCAxMzkgLyAyNTUsIDg3IC8gMjU1XSxcblx0XCJzZWFzaGVsbFwiOiBbMSwgMjQ1IC8gMjU1LCAyMzggLyAyNTVdLFxuXHRcInNpZW5uYVwiOiBbMTYwIC8gMjU1LCA4MiAvIDI1NSwgNDUgLyAyNTVdLFxuXHRcInNpbHZlclwiOiBbMTkyIC8gMjU1LCAxOTIgLyAyNTUsIDE5MiAvIDI1NV0sXG5cdFwic2t5Ymx1ZVwiOiBbMTM1IC8gMjU1LCAyMDYgLyAyNTUsIDIzNSAvIDI1NV0sXG5cdFwic2xhdGVibHVlXCI6IFsxMDYgLyAyNTUsIDkwIC8gMjU1LCAyMDUgLyAyNTVdLFxuXHRcInNsYXRlZ3JheVwiOiBbMTEyIC8gMjU1LCAxMjggLyAyNTUsIDE0NCAvIDI1NV0sXG5cdFwic2xhdGVncmV5XCI6IFsxMTIgLyAyNTUsIDEyOCAvIDI1NSwgMTQ0IC8gMjU1XSxcblx0XCJzbm93XCI6IFsxLCAyNTAgLyAyNTUsIDI1MCAvIDI1NV0sXG5cdFwic3ByaW5nZ3JlZW5cIjogWzAsIDEsIDEyNyAvIDI1NV0sXG5cdFwic3RlZWxibHVlXCI6IFs3MCAvIDI1NSwgMTMwIC8gMjU1LCAxODAgLyAyNTVdLFxuXHRcInRhblwiOiBbMjEwIC8gMjU1LCAxODAgLyAyNTUsIDE0MCAvIDI1NV0sXG5cdFwidGVhbFwiOiBbMCwgMTI4IC8gMjU1LCAxMjggLyAyNTVdLFxuXHRcInRoaXN0bGVcIjogWzIxNiAvIDI1NSwgMTkxIC8gMjU1LCAyMTYgLyAyNTVdLFxuXHRcInRvbWF0b1wiOiBbMSwgOTkgLyAyNTUsIDcxIC8gMjU1XSxcblx0XCJ0dXJxdW9pc2VcIjogWzY0IC8gMjU1LCAyMjQgLyAyNTUsIDIwOCAvIDI1NV0sXG5cdFwidmlvbGV0XCI6IFsyMzggLyAyNTUsIDEzMCAvIDI1NSwgMjM4IC8gMjU1XSxcblx0XCJ3aGVhdFwiOiBbMjQ1IC8gMjU1LCAyMjIgLyAyNTUsIDE3OSAvIDI1NV0sXG5cdFwid2hpdGVcIjogWzEsIDEsIDFdLFxuXHRcIndoaXRlc21va2VcIjogWzI0NSAvIDI1NSwgMjQ1IC8gMjU1LCAyNDUgLyAyNTVdLFxuXHRcInllbGxvd1wiOiBbMSwgMSwgMF0sXG5cdFwieWVsbG93Z3JlZW5cIjogWzE1NCAvIDI1NSwgMjA1IC8gMjU1LCA1MCAvIDI1NV0sXG59O1xuXG5sZXQgY29vcmRHcmFtbWFyID0gQXJyYXkoMykuZmlsbChcIjxwZXJjZW50YWdlPiB8IDxudW1iZXI+WzAsIDI1NV1cIik7XG5sZXQgY29vcmRHcmFtbWFyTnVtYmVyID0gQXJyYXkoMykuZmlsbChcIjxudW1iZXI+WzAsIDI1NV1cIik7XG5cbnZhciBzUkdCID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuXHRpZDogXCJzcmdiXCIsXG5cdG5hbWU6IFwic1JHQlwiLFxuXHRiYXNlOiBzUkdCTGluZWFyLFxuXHRmcm9tQmFzZTogcmdiID0+IHtcblx0XHQvLyBjb252ZXJ0IGFuIGFycmF5IG9mIGxpbmVhci1saWdodCBzUkdCIHZhbHVlcyBpbiB0aGUgcmFuZ2UgMC4wLTEuMFxuXHRcdC8vIHRvIGdhbW1hIGNvcnJlY3RlZCBmb3JtXG5cdFx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU1JHQlxuXHRcdHJldHVybiByZ2IubWFwKHZhbCA9PiB7XG5cdFx0XHRsZXQgc2lnbiA9IHZhbCA8IDAgPyAtMSA6IDE7XG5cdFx0XHRsZXQgYWJzID0gdmFsICogc2lnbjtcblxuXHRcdFx0aWYgKGFicyA+IDAuMDAzMTMwOCkge1xuXHRcdFx0XHRyZXR1cm4gc2lnbiAqICgxLjA1NSAqIChhYnMgKiogKDEgLyAyLjQpKSAtIDAuMDU1KTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIDEyLjkyICogdmFsO1xuXHRcdH0pO1xuXHR9LFxuXHR0b0Jhc2U6IHJnYiA9PiB7XG5cdFx0Ly8gY29udmVydCBhbiBhcnJheSBvZiBzUkdCIHZhbHVlcyBpbiB0aGUgcmFuZ2UgMC4wIC0gMS4wXG5cdFx0Ly8gdG8gbGluZWFyIGxpZ2h0ICh1bi1jb21wYW5kZWQpIGZvcm0uXG5cdFx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvU1JHQlxuXHRcdHJldHVybiByZ2IubWFwKHZhbCA9PiB7XG5cdFx0XHRsZXQgc2lnbiA9IHZhbCA8IDAgPyAtMSA6IDE7XG5cdFx0XHRsZXQgYWJzID0gdmFsICogc2lnbjtcblxuXHRcdFx0aWYgKGFicyA8PSAwLjA0MDQ1KSB7XG5cdFx0XHRcdHJldHVybiB2YWwgLyAxMi45Mjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIHNpZ24gKiAoKChhYnMgKyAwLjA1NSkgLyAxLjA1NSkgKiogMi40KTtcblx0XHR9KTtcblx0fSxcblx0Zm9ybWF0czoge1xuXHRcdFwicmdiXCI6IHtcblx0XHRcdGNvb3JkczogY29vcmRHcmFtbWFyLFxuXHRcdH0sXG5cdFx0XCJyZ2JfbnVtYmVyXCI6IHtcblx0XHRcdG5hbWU6IFwicmdiXCIsXG5cdFx0XHRjb21tYXM6IHRydWUsXG5cdFx0XHRjb29yZHM6IGNvb3JkR3JhbW1hck51bWJlcixcblx0XHRcdG5vQWxwaGE6IHRydWUsXG5cdFx0fSxcblx0XHRcImNvbG9yXCI6IHsgLyogdXNlIGRlZmF1bHRzICovIH0sXG5cdFx0XCJyZ2JhXCI6IHtcblx0XHRcdGNvb3JkczogY29vcmRHcmFtbWFyLFxuXHRcdFx0Y29tbWFzOiB0cnVlLFxuXHRcdFx0bGFzdEFscGhhOiB0cnVlLFxuXHRcdH0sXG5cdFx0XCJyZ2JhX251bWJlclwiOiB7XG5cdFx0XHRuYW1lOiBcInJnYmFcIixcblx0XHRcdGNvbW1hczogdHJ1ZSxcblx0XHRcdGNvb3JkczogY29vcmRHcmFtbWFyTnVtYmVyLFxuXHRcdH0sXG5cdFx0XCJoZXhcIjoge1xuXHRcdFx0dHlwZTogXCJjdXN0b21cIixcblx0XHRcdHRvR2FtdXQ6IHRydWUsXG5cdFx0XHR0ZXN0OiBzdHIgPT4gL14jKFthLWYwLTldezMsNH0pezEsMn0kL2kudGVzdChzdHIpLFxuXHRcdFx0cGFyc2UgKHN0cikge1xuXHRcdFx0XHRpZiAoc3RyLmxlbmd0aCA8PSA1KSB7XG5cdFx0XHRcdFx0Ly8gI3JnYiBvciAjcmdiYSwgZHVwbGljYXRlIGRpZ2l0c1xuXHRcdFx0XHRcdHN0ciA9IHN0ci5yZXBsYWNlKC9bYS1mMC05XS9naSwgXCIkJiQmXCIpO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0bGV0IHJnYmEgPSBbXTtcblx0XHRcdFx0c3RyLnJlcGxhY2UoL1thLWYwLTldezJ9L2dpLCBjb21wb25lbnQgPT4ge1xuXHRcdFx0XHRcdHJnYmEucHVzaChwYXJzZUludChjb21wb25lbnQsIDE2KSAvIDI1NSk7XG5cdFx0XHRcdH0pO1xuXG5cdFx0XHRcdHJldHVybiB7XG5cdFx0XHRcdFx0c3BhY2VJZDogXCJzcmdiXCIsXG5cdFx0XHRcdFx0Y29vcmRzOiByZ2JhLnNsaWNlKDAsIDMpLFxuXHRcdFx0XHRcdGFscGhhOiByZ2JhLnNsaWNlKDMpWzBdLFxuXHRcdFx0XHR9O1xuXHRcdFx0fSxcblx0XHRcdHNlcmlhbGl6ZTogKGNvb3JkcywgYWxwaGEsIHtcblx0XHRcdFx0Y29sbGFwc2UgPSB0cnVlLCAvLyBjb2xsYXBzZSB0byAzLTQgZGlnaXQgaGV4IHdoZW4gcG9zc2libGU/XG5cdFx0XHR9ID0ge30pID0+IHtcblx0XHRcdFx0aWYgKGFscGhhIDwgMSkge1xuXHRcdFx0XHRcdGNvb3Jkcy5wdXNoKGFscGhhKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNvb3JkcyA9IGNvb3Jkcy5tYXAoYyA9PiBNYXRoLnJvdW5kKGMgKiAyNTUpKTtcblxuXHRcdFx0XHRsZXQgY29sbGFwc2libGUgPSBjb2xsYXBzZSAmJiBjb29yZHMuZXZlcnkoYyA9PiBjICUgMTcgPT09IDApO1xuXG5cdFx0XHRcdGxldCBoZXggPSBjb29yZHMubWFwKGMgPT4ge1xuXHRcdFx0XHRcdGlmIChjb2xsYXBzaWJsZSkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIChjIC8gMTcpLnRvU3RyaW5nKDE2KTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gYy50b1N0cmluZygxNikucGFkU3RhcnQoMiwgXCIwXCIpO1xuXHRcdFx0XHR9KS5qb2luKFwiXCIpO1xuXG5cdFx0XHRcdHJldHVybiBcIiNcIiArIGhleDtcblx0XHRcdH0sXG5cdFx0fSxcblx0XHRcImtleXdvcmRcIjoge1xuXHRcdFx0dHlwZTogXCJjdXN0b21cIixcblx0XHRcdHRlc3Q6IHN0ciA9PiAvXlthLXpdKyQvaS50ZXN0KHN0ciksXG5cdFx0XHRwYXJzZSAoc3RyKSB7XG5cdFx0XHRcdHN0ciA9IHN0ci50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0XHRsZXQgcmV0ID0ge3NwYWNlSWQ6IFwic3JnYlwiLCBjb29yZHM6IG51bGwsIGFscGhhOiAxfTtcblxuXHRcdFx0XHRpZiAoc3RyID09PSBcInRyYW5zcGFyZW50XCIpIHtcblx0XHRcdFx0XHRyZXQuY29vcmRzID0gS0VZV09SRFMuYmxhY2s7XG5cdFx0XHRcdFx0cmV0LmFscGhhID0gMDtcblx0XHRcdFx0fVxuXHRcdFx0XHRlbHNlIHtcblx0XHRcdFx0XHRyZXQuY29vcmRzID0gS0VZV09SRFNbc3RyXTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChyZXQuY29vcmRzKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHR9LFxuXHR9LFxufSk7XG5cbnZhciBQMyA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwicDNcIixcblx0Y3NzSWQ6IFwiZGlzcGxheS1wM1wiLFxuXHRuYW1lOiBcIlAzXCIsXG5cdGJhc2U6IFAzTGluZWFyLFxuXHQvLyBHYW1tYSBlbmNvZGluZy9kZWNvZGluZyBpcyB0aGUgc2FtZSBhcyBzUkdCXG5cdGZyb21CYXNlOiBzUkdCLmZyb21CYXNlLFxuXHR0b0Jhc2U6IHNSR0IudG9CYXNlLFxufSk7XG5cbi8vIERlZmF1bHQgc3BhY2UgZm9yIENTUyBvdXRwdXQuIENvZGUgaW4gQ29sb3IuanMgbWFrZXMgdGhpcyB3aWRlciBpZiB0aGVyZSdzIGEgRE9NIGF2YWlsYWJsZVxuZGVmYXVsdHMuZGlzcGxheV9zcGFjZSA9IHNSR0I7XG5cbmxldCBzdXBwb3J0c05vbmU7XG5cbmlmICh0eXBlb2YgQ1NTICE9PSBcInVuZGVmaW5lZFwiICYmIENTUy5zdXBwb3J0cykge1xuXHQvLyBGaW5kIHdpZGVzdCBzdXBwb3J0ZWQgY29sb3Igc3BhY2UgZm9yIENTU1xuXHRmb3IgKGxldCBzcGFjZSBvZiBbbGFiLCBSRUMyMDIwLCBQM10pIHtcblx0XHRsZXQgY29vcmRzID0gc3BhY2UuZ2V0TWluQ29vcmRzKCk7XG5cdFx0bGV0IGNvbG9yID0ge3NwYWNlLCBjb29yZHMsIGFscGhhOiAxfTtcblx0XHRsZXQgc3RyID0gc2VyaWFsaXplKGNvbG9yKTtcblxuXHRcdGlmIChDU1Muc3VwcG9ydHMoXCJjb2xvclwiLCBzdHIpKSB7XG5cdFx0XHRkZWZhdWx0cy5kaXNwbGF5X3NwYWNlID0gc3BhY2U7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgc2VyaWFsaXphdGlvbiBvZiB0aGUgY29sb3IgdGhhdCBjYW4gYWN0dWFsbHkgYmUgZGlzcGxheWVkIGluIHRoZSBicm93c2VyLlxuICogSWYgdGhlIGRlZmF1bHQgc2VyaWFsaXphdGlvbiBjYW4gYmUgZGlzcGxheWVkLCBpdCBpcyByZXR1cm5lZC5cbiAqIE90aGVyd2lzZSwgdGhlIGNvbG9yIGlzIGNvbnZlcnRlZCB0byBMYWIsIFJFQzIwMjAsIG9yIFAzLCB3aGljaGV2ZXIgaXMgdGhlIHdpZGVzdCBzdXBwb3J0ZWQuXG4gKiBJbiBOb2RlLmpzLCB0aGlzIGlzIGJhc2ljYWxseSBlcXVpdmFsZW50IHRvIGBzZXJpYWxpemUoKWAgYnV0IHJldHVybnMgYSBgU3RyaW5nYCBvYmplY3QgaW5zdGVhZC5cbiAqXG4gKiBAZXhwb3J0XG4gKiBAcGFyYW0ge3tzcGFjZSwgY29vcmRzfSB8IENvbG9yIHwgc3RyaW5nfSBjb2xvclxuICogQHBhcmFtIHsqfSBbb3B0aW9ucz17fV0gT3B0aW9ucyB0byBiZSBwYXNzZWQgdG8gc2VyaWFsaXplKClcbiAqIEBwYXJhbSB7Q29sb3JTcGFjZSB8IHN0cmluZ30gW29wdGlvbnMuc3BhY2UgPSBkZWZhdWx0cy5kaXNwbGF5X3NwYWNlXSBDb2xvciBzcGFjZSB0byB1c2UgZm9yIHNlcmlhbGl6YXRpb24gaWYgZGVmYXVsdCBpcyBub3Qgc3VwcG9ydGVkXG4gKiBAcmV0dXJucyB7U3RyaW5nfSBTdHJpbmcgb2JqZWN0IGNvbnRhaW5pbmcgdGhlIHNlcmlhbGl6ZWQgY29sb3Igd2l0aCBhIGNvbG9yIHByb3BlcnR5IGNvbnRhaW5pbmcgdGhlIGNvbnZlcnRlZCBjb2xvciAob3IgdGhlIG9yaWdpbmFsLCBpZiBubyBjb252ZXJzaW9uIHdhcyBuZWNlc3NhcnkpXG4gKi9cbmZ1bmN0aW9uIGRpc3BsYXkgKGNvbG9yLCB7c3BhY2UgPSBkZWZhdWx0cy5kaXNwbGF5X3NwYWNlLCAuLi5vcHRpb25zfSA9IHt9KSB7XG5cdGxldCByZXQgPSBzZXJpYWxpemUoY29sb3IsIG9wdGlvbnMpO1xuXG5cdGlmICh0eXBlb2YgQ1NTID09PSBcInVuZGVmaW5lZFwiIHx8IENTUy5zdXBwb3J0cyhcImNvbG9yXCIsIHJldCkgfHwgIWRlZmF1bHRzLmRpc3BsYXlfc3BhY2UpIHtcblx0XHRyZXQgPSBuZXcgU3RyaW5nKHJldCk7XG5cdFx0cmV0LmNvbG9yID0gY29sb3I7XG5cdH1cblx0ZWxzZSB7XG5cdFx0Ly8gSWYgd2UncmUgaGVyZSwgd2hhdCB3ZSB3ZXJlIGFib3V0IHRvIG91dHB1dCBpcyBub3Qgc3VwcG9ydGVkXG5cdFx0bGV0IGZhbGxiYWNrQ29sb3IgPSBjb2xvcjtcblxuXHRcdC8vIEZpcnN0LCBjaGVjayBpZiB0aGUgY3VscHJpdCBpcyBub25lIHZhbHVlc1xuXHRcdGxldCBoYXNOb25lID0gY29sb3IuY29vcmRzLnNvbWUoaXNOb25lKSB8fCBpc05vbmUoY29sb3IuYWxwaGEpO1xuXG5cdFx0aWYgKGhhc05vbmUpIHtcblx0XHRcdC8vIERvZXMgdGhlIGJyb3dzZXIgc3VwcG9ydCBub25lIHZhbHVlcz9cblx0XHRcdGlmICghKHN1cHBvcnRzTm9uZSA/Pz0gQ1NTLnN1cHBvcnRzKFwiY29sb3JcIiwgXCJoc2wobm9uZSA1MCUgNTAlKVwiKSkpIHtcblx0XHRcdFx0Ly8gTm9wZSwgdHJ5IGFnYWluIHdpdGhvdXQgbm9uZVxuXHRcdFx0XHRmYWxsYmFja0NvbG9yID0gY2xvbmUoY29sb3IpO1xuXHRcdFx0XHRmYWxsYmFja0NvbG9yLmNvb3JkcyA9IGZhbGxiYWNrQ29sb3IuY29vcmRzLm1hcChza2lwTm9uZSk7XG5cdFx0XHRcdGZhbGxiYWNrQ29sb3IuYWxwaGEgPSBza2lwTm9uZShmYWxsYmFja0NvbG9yLmFscGhhKTtcblxuXHRcdFx0XHRyZXQgPSBzZXJpYWxpemUoZmFsbGJhY2tDb2xvciwgb3B0aW9ucyk7XG5cblx0XHRcdFx0aWYgKENTUy5zdXBwb3J0cyhcImNvbG9yXCIsIHJldCkpIHtcblx0XHRcdFx0XHQvLyBXZSdyZSBkb25lLCBub3cgaXQncyBzdXBwb3J0ZWRcblx0XHRcdFx0XHRyZXQgPSBuZXcgU3RyaW5nKHJldCk7XG5cdFx0XHRcdFx0cmV0LmNvbG9yID0gZmFsbGJhY2tDb2xvcjtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UncmUgaGVyZSwgdGhlIGNvbG9yIGZ1bmN0aW9uIGlzIG5vdCBzdXBwb3J0ZWRcblx0XHQvLyBGYWxsIGJhY2sgdG8gZmFsbGJhY2sgc3BhY2Vcblx0XHRmYWxsYmFja0NvbG9yID0gdG8oZmFsbGJhY2tDb2xvciwgc3BhY2UpO1xuXHRcdHJldCA9IG5ldyBTdHJpbmcoc2VyaWFsaXplKGZhbGxiYWNrQ29sb3IsIG9wdGlvbnMpKTtcblx0XHRyZXQuY29sb3IgPSBmYWxsYmFja0NvbG9yO1xuXHR9XG5cblx0cmV0dXJuIHJldDtcbn1cblxuZnVuY3Rpb24gZXF1YWxzIChjb2xvcjEsIGNvbG9yMikge1xuXHRjb2xvcjEgPSBnZXRDb2xvcihjb2xvcjEpO1xuXHRjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuXG5cdHJldHVybiBjb2xvcjEuc3BhY2UgPT09IGNvbG9yMi5zcGFjZVxuXHQgICAgICAgJiYgY29sb3IxLmFscGhhID09PSBjb2xvcjIuYWxwaGFcblx0ICAgICAgICYmIGNvbG9yMS5jb29yZHMuZXZlcnkoKGMsIGkpID0+IGMgPT09IGNvbG9yMi5jb29yZHNbaV0pO1xufVxuXG4vKipcbiAqIFJlbGF0aXZlIGx1bWluYW5jZVxuICovXG5cbmZ1bmN0aW9uIGdldEx1bWluYW5jZSAoY29sb3IpIHtcblx0Ly8gQXNzdW1lIGdldENvbG9yKCkgaXMgY2FsbGVkIG9uIGNvbG9yIGluIGdldCgpXG5cdHJldHVybiBnZXQoY29sb3IsIFt4eXpfZDY1LCBcInlcIl0pO1xufVxuXG5mdW5jdGlvbiBzZXRMdW1pbmFuY2UgKGNvbG9yLCB2YWx1ZSkge1xuXHQvLyBBc3N1bWUgZ2V0Q29sb3IoKSBpcyBjYWxsZWQgb24gY29sb3IgaW4gc2V0KClcblx0c2V0KGNvbG9yLCBbeHl6X2Q2NSwgXCJ5XCJdLCB2YWx1ZSk7XG59XG5cbmZ1bmN0aW9uIHJlZ2lzdGVyJDIgKENvbG9yKSB7XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwibHVtaW5hbmNlXCIsIHtcblx0XHRnZXQgKCkge1xuXHRcdFx0cmV0dXJuIGdldEx1bWluYW5jZSh0aGlzKTtcblx0XHR9LFxuXHRcdHNldCAodmFsdWUpIHtcblx0XHRcdHNldEx1bWluYW5jZSh0aGlzLCB2YWx1ZSk7XG5cdFx0fSxcblx0fSk7XG59XG5cbnZhciBsdW1pbmFuY2UgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0Z2V0THVtaW5hbmNlOiBnZXRMdW1pbmFuY2UsXG5cdHJlZ2lzdGVyOiByZWdpc3RlciQyLFxuXHRzZXRMdW1pbmFuY2U6IHNldEx1bWluYW5jZVxufSk7XG5cbi8vIFdDQUcgMi4wIGNvbnRyYXN0IGh0dHBzOi8vd3d3LnczLm9yZy9UUi9XQ0FHMjAtVEVDSFMvRzE4Lmh0bWxcbi8vIFNpbXBsZSBjb250cmFzdCwgd2l0aCBmaXhlZCA1JSB2aWV3aW5nIGZsYXJlIGNvbnRyaWJ1dGlvblxuLy8gU3ltbWV0cmljLCBkb2VzIG5vdCBtYXR0ZXIgd2hpY2ggaXMgZm9yZWdyb3VuZCBhbmQgd2hpY2ggaXMgYmFja2dyb3VuZFxuXG5cbmZ1bmN0aW9uIGNvbnRyYXN0V0NBRzIxIChjb2xvcjEsIGNvbG9yMikge1xuXHRjb2xvcjEgPSBnZXRDb2xvcihjb2xvcjEpO1xuXHRjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuXG5cdGxldCBZMSA9IE1hdGgubWF4KGdldEx1bWluYW5jZShjb2xvcjEpLCAwKTtcblx0bGV0IFkyID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMiksIDApO1xuXG5cdGlmIChZMiA+IFkxKSB7XG5cdFx0W1kxLCBZMl0gPSBbWTIsIFkxXTtcblx0fVxuXG5cdHJldHVybiAoWTEgKyAuMDUpIC8gKFkyICsgLjA1KTtcbn1cblxuLy8gQVBDQSAwLjAuOThHXG4vLyBodHRwczovL2dpdGh1Yi5jb20vTXluZGV4L2FwY2EtdzNcbi8vIHNlZSBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS93M2Mvc2lsdmVyL2lzc3Vlcy82NDNcblxuXG4vLyBleHBvbmVudHNcbmNvbnN0IG5vcm1CRyA9IDAuNTY7XG5jb25zdCBub3JtVFhUID0gMC41NztcbmNvbnN0IHJldlRYVCA9IDAuNjI7XG5jb25zdCByZXZCRyA9IDAuNjU7XG5cbi8vIGNsYW1wc1xuY29uc3QgYmxrVGhycyA9IDAuMDIyO1xuY29uc3QgYmxrQ2xtcCA9IDEuNDE0O1xuY29uc3QgbG9DbGlwID0gMC4xO1xuY29uc3QgZGVsdGFZbWluID0gMC4wMDA1O1xuXG4vLyBzY2FsZXJzXG4vLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9zaWx2ZXIvaXNzdWVzLzY0NVxuY29uc3Qgc2NhbGVCb1cgPSAxLjE0O1xuY29uc3QgbG9Cb1dvZmZzZXQgPSAwLjAyNztcbmNvbnN0IHNjYWxlV29CID0gMS4xNDtcblxuZnVuY3Rpb24gZmNsYW1wIChZKSB7XG5cdGlmIChZID49IGJsa1RocnMpIHtcblx0XHRyZXR1cm4gWTtcblx0fVxuXHRyZXR1cm4gWSArIChibGtUaHJzIC0gWSkgKiogYmxrQ2xtcDtcbn1cblxuZnVuY3Rpb24gbGluZWFyaXplICh2YWwpIHtcblx0bGV0IHNpZ24gPSB2YWwgPCAwID8gLTEgOiAxO1xuXHRsZXQgYWJzID0gTWF0aC5hYnModmFsKTtcblx0cmV0dXJuIHNpZ24gKiBNYXRoLnBvdyhhYnMsIDIuNCk7XG59XG5cbi8vIE5vdCBzeW1tZXRyaWMsIHJlcXVpcmVzIGEgZm9yZWdyb3VuZCAodGV4dCkgY29sb3IsIGFuZCBhIGJhY2tncm91bmQgY29sb3JcbmZ1bmN0aW9uIGNvbnRyYXN0QVBDQSAoYmFja2dyb3VuZCwgZm9yZWdyb3VuZCkge1xuXHRmb3JlZ3JvdW5kID0gZ2V0Q29sb3IoZm9yZWdyb3VuZCk7XG5cdGJhY2tncm91bmQgPSBnZXRDb2xvcihiYWNrZ3JvdW5kKTtcblxuXHRsZXQgUztcblx0bGV0IEM7XG5cdGxldCBTYXBjO1xuXG5cdC8vIE15bmRleCBhcy1wdWJsaXNoZWQsIGFzc3VtZXMgc1JHQiBpbnB1dHNcblx0bGV0IFIsIEcsIEI7XG5cblx0Zm9yZWdyb3VuZCA9IHRvKGZvcmVncm91bmQsIFwic3JnYlwiKTtcblx0Ly8gU2hvdWxkIHRoZXNlIGJlIGNsYW1wZWQgdG8gaW4tZ2FtdXQgdmFsdWVzP1xuXG5cdC8vIENhbGN1bGF0ZXMgXCJzY3JlZW4gbHVtaW5hbmNlXCIgd2l0aCBub24tc3RhbmRhcmQgc2ltcGxlIGdhbW1hIEVPVEZcblx0Ly8gd2VpZ2h0cyBzaG91bGQgYmUgZnJvbSBDU1MgQ29sb3IgNCwgbm90IHRoZSBvbmVzIGhlcmUgd2hpY2ggYXJlIHZpYSBNeW5kZXggYW5kIGNvcGllZCBmcm9tIExpbmRibG9vbVxuXHRbUiwgRywgQl0gPSBmb3JlZ3JvdW5kLmNvb3Jkcztcblx0bGV0IGx1bVR4dCA9IGxpbmVhcml6ZShSKSAqIDAuMjEyNjcyOSArIGxpbmVhcml6ZShHKSAqIDAuNzE1MTUyMiArIGxpbmVhcml6ZShCKSAqIDAuMDcyMTc1MDtcblxuXHRiYWNrZ3JvdW5kID0gdG8oYmFja2dyb3VuZCwgXCJzcmdiXCIpO1xuXHRbUiwgRywgQl0gPSBiYWNrZ3JvdW5kLmNvb3Jkcztcblx0bGV0IGx1bUJnID0gbGluZWFyaXplKFIpICogMC4yMTI2NzI5ICsgbGluZWFyaXplKEcpICogMC43MTUxNTIyICsgbGluZWFyaXplKEIpICogMC4wNzIxNzUwO1xuXG5cdC8vIHRvZSBjbGFtcGluZyBvZiB2ZXJ5IGRhcmsgdmFsdWVzIHRvIGFjY291bnQgZm9yIGZsYXJlXG5cdGxldCBZdHh0ID0gZmNsYW1wKGx1bVR4dCk7XG5cdGxldCBZYmcgPSBmY2xhbXAobHVtQmcpO1xuXG5cdC8vIGFyZSB3ZSBcIkJsYWNrIG9uIFdoaXRlXCIgKGRhcmsgb24gbGlnaHQpLCBvciBsaWdodCBvbiBkYXJrP1xuXHRsZXQgQm9XID0gWWJnID4gWXR4dDtcblxuXHQvLyB3aHkgaXMgdGhpcyBhIGRlbHRhLCB3aGVuIFkgaXMgbm90IHBlcmNlcHR1YWxseSB1bmlmb3JtP1xuXHQvLyBBbnN3ZXI6IGl0IGlzIGEgbm9pc2UgZ2F0ZSwgc2VlXG5cdC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFWZXJvdS9jb2xvci5qcy9pc3N1ZXMvMjA4XG5cdGlmIChNYXRoLmFicyhZYmcgLSBZdHh0KSA8IGRlbHRhWW1pbikge1xuXHRcdEMgPSAwO1xuXHR9XG5cdGVsc2Uge1xuXHRcdGlmIChCb1cpIHtcblx0XHRcdC8vIGRhcmsgdGV4dCBvbiBsaWdodCBiYWNrZ3JvdW5kXG5cdFx0XHRTID0gWWJnICoqIG5vcm1CRyAtIFl0eHQgKiogbm9ybVRYVDtcblx0XHRcdEMgPSBTICogc2NhbGVCb1c7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0Ly8gbGlnaHQgdGV4dCBvbiBkYXJrIGJhY2tncm91bmRcblx0XHRcdFMgPSBZYmcgKiogcmV2QkcgLSBZdHh0ICoqIHJldlRYVDtcblx0XHRcdEMgPSBTICogc2NhbGVXb0I7XG5cdFx0fVxuXHR9XG5cdGlmIChNYXRoLmFicyhDKSA8IGxvQ2xpcCkge1xuXHRcdFNhcGMgPSAwO1xuXHR9XG5cdGVsc2UgaWYgKEMgPiAwKSB7XG5cdFx0Ly8gbm90IGNsZWFyIHdoZXRoZXIgV29mZnNldCBpcyBsb0JvV29mZnNldCBvciBsb1dvQm9mZnNldFxuXHRcdC8vIGJ1dCB0aGV5IGhhdmUgdGhlIHNhbWUgdmFsdWVcblx0XHRTYXBjID0gQyAtIGxvQm9Xb2Zmc2V0O1xuXHR9XG5cdGVsc2Uge1xuXHRcdFNhcGMgPSBDICsgbG9Cb1dvZmZzZXQ7XG5cdH1cblxuXHRyZXR1cm4gU2FwYyAqIDEwMDtcbn1cblxuLy8gTWljaGVsc29uICBsdW1pbmFuY2UgY29udHJhc3Rcbi8vIHRoZSByZWxhdGlvbiBiZXR3ZWVuIHRoZSBzcHJlYWQgYW5kIHRoZSBzdW0gb2YgdGhlIHR3byBsdW1pbmFuY2VzXG4vLyBTeW1tZXRyaWMsIGRvZXMgbm90IG1hdHRlciB3aGljaCBpcyBmb3JlZ3JvdW5kIGFuZCB3aGljaCBpcyBiYWNrZ3JvdW5kXG4vLyBObyBibGFjayBsZXZlbCBjb21wZW5zYXRpb24gZm9yIGZsYXJlLlxuXG5cbmZ1bmN0aW9uIGNvbnRyYXN0TWljaGVsc29uIChjb2xvcjEsIGNvbG9yMikge1xuXHRjb2xvcjEgPSBnZXRDb2xvcihjb2xvcjEpO1xuXHRjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuXG5cdGxldCBZMSA9IE1hdGgubWF4KGdldEx1bWluYW5jZShjb2xvcjEpLCAwKTtcblx0bGV0IFkyID0gTWF0aC5tYXgoZ2V0THVtaW5hbmNlKGNvbG9yMiksIDApO1xuXG5cdGlmIChZMiA+IFkxKSB7XG5cdFx0W1kxLCBZMl0gPSBbWTIsIFkxXTtcblx0fVxuXG5cdGxldCBkZW5vbSA9IChZMSArIFkyKTtcblx0cmV0dXJuIGRlbm9tID09PSAwID8gMCA6IChZMSAtIFkyKSAvIGRlbm9tO1xufVxuXG4vLyBXZWJlciBsdW1pbmFuY2UgY29udHJhc3Rcbi8vIFRoZSBkaWZmZXJlbmNlIGJldHdlZW4gdGhlIHR3byBsdW1pbmFuY2VzIGRpdmlkZWQgYnkgdGhlIGxvd2VyIGx1bWluYW5jZVxuLy8gU3ltbWV0cmljLCBkb2VzIG5vdCBtYXR0ZXIgd2hpY2ggaXMgZm9yZWdyb3VuZCBhbmQgd2hpY2ggaXMgYmFja2dyb3VuZFxuLy8gTm8gYmxhY2sgbGV2ZWwgY29tcGVuc2F0aW9uIGZvciBmbGFyZS5cblxuXG4vLyB0aGUgZGFya2VzdCBzUkdCIGNvbG9yIGFib3ZlIGJsYWNrIGlzICMwMDAwMDEgYW5kIHRoaXMgcHJvZHVjZXNcbi8vIGEgcGxhaW4gV2ViZXIgY29udHJhc3Qgb2YgfjQ1NjQ3LlxuLy8gU28sIHNldHRpbmcgdGhlIGRpdmlkZS1ieS16ZXJvIHJlc3VsdCBhdCA1MDAwMCBpcyBhIHJlYXNvbmFibGVcbi8vIG1heCBjbGFtcCBmb3IgdGhlIHBsYWluIFdlYmVyXG5jb25zdCBtYXggPSA1MDAwMDtcblxuZnVuY3Rpb24gY29udHJhc3RXZWJlciAoY29sb3IxLCBjb2xvcjIpIHtcblx0Y29sb3IxID0gZ2V0Q29sb3IoY29sb3IxKTtcblx0Y29sb3IyID0gZ2V0Q29sb3IoY29sb3IyKTtcblxuXHRsZXQgWTEgPSBNYXRoLm1heChnZXRMdW1pbmFuY2UoY29sb3IxKSwgMCk7XG5cdGxldCBZMiA9IE1hdGgubWF4KGdldEx1bWluYW5jZShjb2xvcjIpLCAwKTtcblxuXHRpZiAoWTIgPiBZMSkge1xuXHRcdFtZMSwgWTJdID0gW1kyLCBZMV07XG5cdH1cblxuXHRyZXR1cm4gWTIgPT09IDAgPyBtYXggOiAoWTEgLSBZMikgLyBZMjtcbn1cblxuLy8gQ0lFIExpZ2h0bmVzcyBkaWZmZXJlbmNlLCBhcyB1c2VkIGJ5IEdvb2dsZSBNYXRlcmlhbCBEZXNpZ25cbi8vIEdvb2dsZSBIQ1QgVG9uZSBpcyB0aGUgc2FtZSBhcyBDSUUgTGlnaHRuZXNzXG4vLyBodHRwczovL21hdGVyaWFsLmlvL2Jsb2cvc2NpZW5jZS1vZi1jb2xvci1kZXNpZ25cblxuXG5mdW5jdGlvbiBjb250cmFzdExzdGFyIChjb2xvcjEsIGNvbG9yMikge1xuXHRjb2xvcjEgPSBnZXRDb2xvcihjb2xvcjEpO1xuXHRjb2xvcjIgPSBnZXRDb2xvcihjb2xvcjIpO1xuXG5cdGxldCBMMSA9IGdldChjb2xvcjEsIFtsYWIsIFwibFwiXSk7XG5cdGxldCBMMiA9IGdldChjb2xvcjIsIFtsYWIsIFwibFwiXSk7XG5cblx0cmV0dXJuIE1hdGguYWJzKEwxIC0gTDIpO1xufVxuXG4vLyDOuiAqIM61ICA9IDJeMyA9IDhcbmNvbnN0IM61JDMgPSAyMTYgLyAyNDM4OTsgIC8vIDZeMy8yOV4zID09ICgyNC8xMTYpXjNcbmNvbnN0IM61MyA9IDI0IC8gMTE2O1xuY29uc3QgzrokMiA9IDI0Mzg5IC8gMjc7ICAgLy8gMjleMy8zXjNcblxubGV0IHdoaXRlJDEgPSBXSElURVMuRDY1O1xuXG52YXIgbGFiX2Q2NSA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwibGFiLWQ2NVwiLFxuXHRuYW1lOiBcIkxhYiBENjVcIixcblx0Y29vcmRzOiB7XG5cdFx0bDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJMaWdodG5lc3NcIixcblx0XHR9LFxuXHRcdGE6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTEyNSwgMTI1XSxcblx0XHR9LFxuXHRcdGI6IHtcblx0XHRcdHJlZlJhbmdlOiBbLTEyNSwgMTI1XSxcblx0XHR9LFxuXHR9LFxuXG5cdC8vIEFzc3VtaW5nIFhZWiBpcyByZWxhdGl2ZSB0byBENjUsIGNvbnZlcnQgdG8gQ0lFIExhYlxuXHQvLyBmcm9tIENJRSBzdGFuZGFyZCwgd2hpY2ggbm93IGRlZmluZXMgdGhlc2UgYXMgYSByYXRpb25hbCBmcmFjdGlvblxuXHR3aGl0ZTogd2hpdGUkMSxcblxuXHRiYXNlOiB4eXpfZDY1LFxuXHQvLyBDb252ZXJ0IEQ2NS1hZGFwdGVkIFhZWiB0byBMYWJcblx0Ly8gIENJRSAxNS4zOjIwMDQgc2VjdGlvbiA4LjIuMS4xXG5cdGZyb21CYXNlIChYWVopIHtcblx0XHQvLyBjb21wdXRlIHh5eiwgd2hpY2ggaXMgWFlaIHNjYWxlZCByZWxhdGl2ZSB0byByZWZlcmVuY2Ugd2hpdGVcblx0XHRsZXQgeHl6ID0gWFlaLm1hcCgodmFsdWUsIGkpID0+IHZhbHVlIC8gd2hpdGUkMVtpXSk7XG5cblx0XHQvLyBub3cgY29tcHV0ZSBmXG5cdFx0bGV0IGYgPSB4eXoubWFwKHZhbHVlID0+IHZhbHVlID4gzrUkMyA/IE1hdGguY2JydCh2YWx1ZSkgOiAozrokMiAqIHZhbHVlICsgMTYpIC8gMTE2KTtcblxuXHRcdHJldHVybiBbXG5cdFx0XHQoMTE2ICogZlsxXSkgLSAxNiwgICAvLyBMXG5cdFx0XHQ1MDAgKiAoZlswXSAtIGZbMV0pLCAvLyBhXG5cdFx0XHQyMDAgKiAoZlsxXSAtIGZbMl0pLCAgLy8gYlxuXHRcdF07XG5cdH0sXG5cdC8vIENvbnZlcnQgTGFiIHRvIEQ2NS1hZGFwdGVkIFhZWlxuXHQvLyBTYW1lIHJlc3VsdCBhcyBDSUUgMTUuMzoyMDA0IEFwcGVuZGl4IEQgYWx0aG91Z2ggdGhlIGRlcml2YXRpb24gaXMgZGlmZmVyZW50XG5cdC8vIGh0dHA6Ly93d3cuYnJ1Y2VsaW5kYmxvb20uY29tL2luZGV4Lmh0bWw/RXFuX1JHQl9YWVpfTWF0cml4Lmh0bWxcblx0dG9CYXNlIChMYWIpIHtcblx0XHQvLyBjb21wdXRlIGYsIHN0YXJ0aW5nIHdpdGggdGhlIGx1bWluYW5jZS1yZWxhdGVkIHRlcm1cblx0XHRsZXQgZiA9IFtdO1xuXHRcdGZbMV0gPSAoTGFiWzBdICsgMTYpIC8gMTE2O1xuXHRcdGZbMF0gPSBMYWJbMV0gLyA1MDAgKyBmWzFdO1xuXHRcdGZbMl0gPSBmWzFdIC0gTGFiWzJdIC8gMjAwO1xuXG5cdFx0Ly8gY29tcHV0ZSB4eXpcblx0XHRsZXQgeHl6ID0gW1xuXHRcdFx0ZlswXSAgID4gzrUzID8gTWF0aC5wb3coZlswXSwgMykgICAgICAgICAgICAgICAgOiAoMTE2ICogZlswXSAtIDE2KSAvIM66JDIsXG5cdFx0XHRMYWJbMF0gPiA4ICA/IE1hdGgucG93KChMYWJbMF0gKyAxNikgLyAxMTYsIDMpIDogTGFiWzBdIC8gzrokMixcblx0XHRcdGZbMl0gICA+IM61MyA/IE1hdGgucG93KGZbMl0sIDMpICAgICAgICAgICAgICAgIDogKDExNiAqIGZbMl0gLSAxNikgLyDOuiQyLFxuXHRcdF07XG5cblx0XHQvLyBDb21wdXRlIFhZWiBieSBzY2FsaW5nIHh5eiBieSByZWZlcmVuY2Ugd2hpdGVcblx0XHRyZXR1cm4geHl6Lm1hcCgodmFsdWUsIGkpID0+IHZhbHVlICogd2hpdGUkMVtpXSk7XG5cdH0sXG5cblx0Zm9ybWF0czoge1xuXHRcdFwibGFiLWQ2NVwiOiB7XG5cdFx0XHRjb29yZHM6IFtcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+XCIsIFwiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5bLTEsMV1cIiwgXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlstMSwxXVwiXSxcblx0XHR9LFxuXHR9LFxufSk7XG5cbi8vIERlbHRhIFBoaSBTdGFyIHBlcmNlcHR1YWwgbGlnaHRuZXNzIGNvbnRyYXN0XG4vLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL015bmRleC9kZWx0YXBoaXN0YXJcbi8vIFRoZSAoZGlmZmVyZW5jZSBiZXR3ZWVuIHR3byBMc3RhcnMgZWFjaCByYWlzZWQgdG8gcGhpKSByYWlzZWQgdG8gKDEvcGhpKVxuLy8gU3ltbWV0cmljLCBkb2VzIG5vdCBtYXR0ZXIgd2hpY2ggaXMgZm9yZWdyb3VuZCBhbmQgd2hpY2ggaXMgYmFja2dyb3VuZFxuXG5cbmNvbnN0IHBoaSA9IE1hdGgucG93KDUsIDAuNSkgKiAwLjUgKyAwLjU7IC8vIE1hdGgucGhpIGNhbiBiZSB1c2VkIGlmIE1hdGguanNcblxuZnVuY3Rpb24gY29udHJhc3REZWx0YVBoaSAoY29sb3IxLCBjb2xvcjIpIHtcblx0Y29sb3IxID0gZ2V0Q29sb3IoY29sb3IxKTtcblx0Y29sb3IyID0gZ2V0Q29sb3IoY29sb3IyKTtcblxuXHRsZXQgTHN0cjEgPSBnZXQoY29sb3IxLCBbbGFiX2Q2NSwgXCJsXCJdKTtcblx0bGV0IExzdHIyID0gZ2V0KGNvbG9yMiwgW2xhYl9kNjUsIFwibFwiXSk7XG5cblx0bGV0IGRlbHRhUGhpU3RhciA9IE1hdGguYWJzKE1hdGgucG93KExzdHIxLCBwaGkpIC0gTWF0aC5wb3coTHN0cjIsIHBoaSkpO1xuXG5cdGxldCBjb250cmFzdCA9IE1hdGgucG93KGRlbHRhUGhpU3RhciwgKDEgLyBwaGkpKSAqIE1hdGguU1FSVDIgLSA0MDtcblxuXHRyZXR1cm4gKGNvbnRyYXN0IDwgNy41KSA/IDAuMCA6IGNvbnRyYXN0IDtcbn1cblxudmFyIGNvbnRyYXN0TWV0aG9kcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRjb250cmFzdEFQQ0E6IGNvbnRyYXN0QVBDQSxcblx0Y29udHJhc3REZWx0YVBoaTogY29udHJhc3REZWx0YVBoaSxcblx0Y29udHJhc3RMc3RhcjogY29udHJhc3RMc3Rhcixcblx0Y29udHJhc3RNaWNoZWxzb246IGNvbnRyYXN0TWljaGVsc29uLFxuXHRjb250cmFzdFdDQUcyMTogY29udHJhc3RXQ0FHMjEsXG5cdGNvbnRyYXN0V2ViZXI6IGNvbnRyYXN0V2ViZXJcbn0pO1xuXG5mdW5jdGlvbiBjb250cmFzdCAoYmFja2dyb3VuZCwgZm9yZWdyb3VuZCwgbyA9IHt9KSB7XG5cdGlmIChpc1N0cmluZyhvKSkge1xuXHRcdG8gPSB7YWxnb3JpdGhtOiBvfTtcblx0fVxuXG5cdGxldCB7YWxnb3JpdGhtLCAuLi5yZXN0fSA9IG87XG5cblx0aWYgKCFhbGdvcml0aG0pIHtcblx0XHRsZXQgYWxnb3JpdGhtcyA9IE9iamVjdC5rZXlzKGNvbnRyYXN0TWV0aG9kcykubWFwKGEgPT4gYS5yZXBsYWNlKC9eY29udHJhc3QvLCBcIlwiKSkuam9pbihcIiwgXCIpO1xuXHRcdHRocm93IG5ldyBUeXBlRXJyb3IoYGNvbnRyYXN0KCkgZnVuY3Rpb24gbmVlZHMgYSBjb250cmFzdCBhbGdvcml0aG0uIFBsZWFzZSBzcGVjaWZ5IG9uZSBvZjogJHthbGdvcml0aG1zfWApO1xuXHR9XG5cblx0YmFja2dyb3VuZCA9IGdldENvbG9yKGJhY2tncm91bmQpO1xuXHRmb3JlZ3JvdW5kID0gZ2V0Q29sb3IoZm9yZWdyb3VuZCk7XG5cblx0Zm9yIChsZXQgYSBpbiBjb250cmFzdE1ldGhvZHMpIHtcblx0XHRpZiAoXCJjb250cmFzdFwiICsgYWxnb3JpdGhtLnRvTG93ZXJDYXNlKCkgPT09IGEudG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0cmV0dXJuIGNvbnRyYXN0TWV0aG9kc1thXShiYWNrZ3JvdW5kLCBmb3JlZ3JvdW5kLCByZXN0KTtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmtub3duIGNvbnRyYXN0IGFsZ29yaXRobTogJHthbGdvcml0aG19YCk7XG59XG5cbi8vIENocm9tYXRpY2l0eSBjb29yZGluYXRlc1xuZnVuY3Rpb24gdXYgKGNvbG9yKSB7XG5cdC8vIEFzc3VtZXMgZ2V0QWxsKCkgY2FsbHMgZ2V0Q29sb3IoKSBvbiBjb2xvclxuXHRsZXQgW1gsIFksIFpdID0gZ2V0QWxsKGNvbG9yLCB4eXpfZDY1KTtcblx0bGV0IGRlbm9tID0gWCArIDE1ICogWSArIDMgKiBaO1xuXHRyZXR1cm4gWzQgKiBYIC8gZGVub20sIDkgKiBZIC8gZGVub21dO1xufVxuXG5mdW5jdGlvbiB4eSAoY29sb3IpIHtcblx0Ly8gQXNzdW1lcyBnZXRBbGwoKSBjYWxscyBnZXRDb2xvcigpIG9uIGNvbG9yXG5cdGxldCBbWCwgWSwgWl0gPSBnZXRBbGwoY29sb3IsIHh5el9kNjUpO1xuXHRsZXQgIHN1bSA9IFggKyBZICsgWjtcblx0cmV0dXJuIFtYIC8gc3VtLCBZIC8gc3VtXTtcbn1cblxuZnVuY3Rpb24gcmVnaXN0ZXIkMSAoQ29sb3IpIHtcblx0Ly8gbm8gc2V0dGVycywgYXMgbGlnaHRuZXNzIGluZm9ybWF0aW9uIGlzIGxvc3Rcblx0Ly8gd2hlbiBjb252ZXJ0aW5nIGNvbG9yIHRvIGNocm9tYXRpY2l0eVxuXHRPYmplY3QuZGVmaW5lUHJvcGVydHkoQ29sb3IucHJvdG90eXBlLCBcInV2XCIsIHtcblx0XHRnZXQgKCkge1xuXHRcdFx0cmV0dXJuIHV2KHRoaXMpO1xuXHRcdH0sXG5cdH0pO1xuXG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShDb2xvci5wcm90b3R5cGUsIFwieHlcIiwge1xuXHRcdGdldCAoKSB7XG5cdFx0XHRyZXR1cm4geHkodGhpcyk7XG5cdFx0fSxcblx0fSk7XG59XG5cbnZhciBjaHJvbWF0aWNpdHkgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0cmVnaXN0ZXI6IHJlZ2lzdGVyJDEsXG5cdHV2OiB1dixcblx0eHk6IHh5XG59KTtcblxuZnVuY3Rpb24gZGVsdGFFIChjMSwgYzIsIG8gPSB7fSkge1xuXHRpZiAoaXNTdHJpbmcobykpIHtcblx0XHRvID0ge21ldGhvZDogb307XG5cdH1cblxuXHRsZXQge21ldGhvZCA9IGRlZmF1bHRzLmRlbHRhRSwgLi4ucmVzdH0gPSBvO1xuXG5cdGZvciAobGV0IG0gaW4gZGVsdGFFTWV0aG9kcykge1xuXHRcdGlmIChcImRlbHRhZVwiICsgbWV0aG9kLnRvTG93ZXJDYXNlKCkgPT09IG0udG9Mb3dlckNhc2UoKSkge1xuXHRcdFx0cmV0dXJuIGRlbHRhRU1ldGhvZHNbbV0oYzEsIGMyLCByZXN0KTtcblx0XHR9XG5cdH1cblxuXHR0aHJvdyBuZXcgVHlwZUVycm9yKGBVbmtub3duIGRlbHRhRSBtZXRob2Q6ICR7bWV0aG9kfWApO1xufVxuXG5mdW5jdGlvbiBsaWdodGVuIChjb2xvciwgYW1vdW50ID0gLjI1KSB7XG5cdGxldCBzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KFwib2tsY2hcIiwgXCJsY2hcIik7XG5cdGxldCBsaWdodG5lc3MgPSBbc3BhY2UsIFwibFwiXTtcblx0cmV0dXJuIHNldChjb2xvciwgbGlnaHRuZXNzLCBsID0+IGwgKiAoMSArIGFtb3VudCkpO1xufVxuXG5mdW5jdGlvbiBkYXJrZW4gKGNvbG9yLCBhbW91bnQgPSAuMjUpIHtcblx0bGV0IHNwYWNlID0gQ29sb3JTcGFjZS5nZXQoXCJva2xjaFwiLCBcImxjaFwiKTtcblx0bGV0IGxpZ2h0bmVzcyA9IFtzcGFjZSwgXCJsXCJdO1xuXHRyZXR1cm4gc2V0KGNvbG9yLCBsaWdodG5lc3MsIGwgPT4gbCAqICgxIC0gYW1vdW50KSk7XG59XG5cbnZhciB2YXJpYXRpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdGRhcmtlbjogZGFya2VuLFxuXHRsaWdodGVuOiBsaWdodGVuXG59KTtcblxuLyoqXG4gKiBGdW5jdGlvbnMgcmVsYXRlZCB0byBjb2xvciBpbnRlcnBvbGF0aW9uXG4gKi9cblxuLyoqXG4gKiBSZXR1cm4gYW4gaW50ZXJtZWRpYXRlIGNvbG9yIGJldHdlZW4gdHdvIGNvbG9yc1xuICogU2lnbmF0dXJlczogbWl4KGMxLCBjMiwgcCwgb3B0aW9ucylcbiAqICAgICAgICAgICAgIG1peChjMSwgYzIsIG9wdGlvbnMpXG4gKiAgICAgICAgICAgICBtaXgoY29sb3IpXG4gKiBAcGFyYW0ge0NvbG9yIHwgc3RyaW5nfSBjMSBUaGUgZmlyc3QgY29sb3JcbiAqIEBwYXJhbSB7Q29sb3IgfCBzdHJpbmd9IFtjMl0gVGhlIHNlY29uZCBjb2xvclxuICogQHBhcmFtIHtudW1iZXJ9IFtwPS41XSBBIDAtMSBwZXJjZW50YWdlIHdoZXJlIDAgaXMgYzEgYW5kIDEgaXMgYzJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbbz17fV1cbiAqIEByZXR1cm4ge0NvbG9yfVxuICovXG5mdW5jdGlvbiBtaXggKGMxLCBjMiwgcCA9IC41LCBvID0ge30pIHtcblx0W2MxLCBjMl0gPSBbZ2V0Q29sb3IoYzEpLCBnZXRDb2xvcihjMildO1xuXG5cdGlmICh0eXBlKHApID09PSBcIm9iamVjdFwiKSB7XG5cdFx0W3AsIG9dID0gWy41LCBwXTtcblx0fVxuXG5cdGxldCByID0gcmFuZ2UoYzEsIGMyLCBvKTtcblx0cmV0dXJuIHIocCk7XG59XG5cbi8qKlxuICpcbiAqIEBwYXJhbSB7Q29sb3IgfCBzdHJpbmcgfCBGdW5jdGlvbn0gYzEgVGhlIGZpcnN0IGNvbG9yIG9yIGEgcmFuZ2VcbiAqIEBwYXJhbSB7Q29sb3IgfCBzdHJpbmd9IFtjMl0gVGhlIHNlY29uZCBjb2xvciBpZiBjMSBpcyBub3QgYSByYW5nZVxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHJldHVybiB7Q29sb3JbXX1cbiAqL1xuZnVuY3Rpb24gc3RlcHMgKGMxLCBjMiwgb3B0aW9ucyA9IHt9KSB7XG5cdGxldCBjb2xvclJhbmdlO1xuXG5cdGlmIChpc1JhbmdlKGMxKSkge1xuXHRcdC8vIFR3ZWFraW5nIGV4aXN0aW5nIHJhbmdlXG5cdFx0W2NvbG9yUmFuZ2UsIG9wdGlvbnNdID0gW2MxLCBjMl07XG5cdFx0W2MxLCBjMl0gPSBjb2xvclJhbmdlLnJhbmdlQXJncy5jb2xvcnM7XG5cdH1cblxuXHRsZXQge1xuXHRcdG1heERlbHRhRSwgZGVsdGFFTWV0aG9kLFxuXHRcdHN0ZXBzID0gMiwgbWF4U3RlcHMgPSAxMDAwLFxuXHRcdC4uLnJhbmdlT3B0aW9uc1xuXHR9ID0gb3B0aW9ucztcblxuXHRpZiAoIWNvbG9yUmFuZ2UpIHtcblx0XHRbYzEsIGMyXSA9IFtnZXRDb2xvcihjMSksIGdldENvbG9yKGMyKV07XG5cdFx0Y29sb3JSYW5nZSA9IHJhbmdlKGMxLCBjMiwgcmFuZ2VPcHRpb25zKTtcblx0fVxuXG5cdGxldCB0b3RhbERlbHRhID0gZGVsdGFFKGMxLCBjMik7XG5cdGxldCBhY3R1YWxTdGVwcyA9IG1heERlbHRhRSA+IDAgPyBNYXRoLm1heChzdGVwcywgTWF0aC5jZWlsKHRvdGFsRGVsdGEgLyBtYXhEZWx0YUUpICsgMSkgOiBzdGVwcztcblx0bGV0IHJldCA9IFtdO1xuXG5cdGlmIChtYXhTdGVwcyAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0YWN0dWFsU3RlcHMgPSBNYXRoLm1pbihhY3R1YWxTdGVwcywgbWF4U3RlcHMpO1xuXHR9XG5cblx0aWYgKGFjdHVhbFN0ZXBzID09PSAxKSB7XG5cdFx0cmV0ID0gW3twOiAuNSwgY29sb3I6IGNvbG9yUmFuZ2UoLjUpfV07XG5cdH1cblx0ZWxzZSB7XG5cdFx0bGV0IHN0ZXAgPSAxIC8gKGFjdHVhbFN0ZXBzIC0gMSk7XG5cdFx0cmV0ID0gQXJyYXkuZnJvbSh7bGVuZ3RoOiBhY3R1YWxTdGVwc30sIChfLCBpKSA9PiB7XG5cdFx0XHRsZXQgcCA9IGkgKiBzdGVwO1xuXHRcdFx0cmV0dXJuIHtwLCBjb2xvcjogY29sb3JSYW5nZShwKX07XG5cdFx0fSk7XG5cdH1cblxuXHRpZiAobWF4RGVsdGFFID4gMCkge1xuXHRcdC8vIEl0ZXJhdGUgb3ZlciBhbGwgc3RvcHMgYW5kIGZpbmQgbWF4IGRlbHRhRVxuXHRcdGxldCBtYXhEZWx0YSA9IHJldC5yZWR1Y2UoKGFjYywgY3VyLCBpKSA9PiB7XG5cdFx0XHRpZiAoaSA9PT0gMCkge1xuXHRcdFx0XHRyZXR1cm4gMDtcblx0XHRcdH1cblxuXHRcdFx0bGV0IM6UzpUgPSBkZWx0YUUoY3VyLmNvbG9yLCByZXRbaSAtIDFdLmNvbG9yLCBkZWx0YUVNZXRob2QpO1xuXHRcdFx0cmV0dXJuIE1hdGgubWF4KGFjYywgzpTOlSk7XG5cdFx0fSwgMCk7XG5cblx0XHR3aGlsZSAobWF4RGVsdGEgPiBtYXhEZWx0YUUpIHtcblx0XHRcdC8vIEluc2VydCBpbnRlcm1lZGlhdGUgc3RvcHMgYW5kIG1lYXN1cmUgbWF4RGVsdGEgYWdhaW5cblx0XHRcdC8vIFdlIG5lZWQgdG8gZG8gdGhpcyBmb3IgYWxsIHBhaXJzLCBvdGhlcndpc2UgdGhlIG1pZHBvaW50IHNoaWZ0c1xuXHRcdFx0bWF4RGVsdGEgPSAwO1xuXG5cdFx0XHRmb3IgKGxldCBpID0gMTsgKGkgPCByZXQubGVuZ3RoKSAmJiAocmV0Lmxlbmd0aCA8IG1heFN0ZXBzKTsgaSsrKSB7XG5cdFx0XHRcdGxldCBwcmV2ID0gcmV0W2kgLSAxXTtcblx0XHRcdFx0bGV0IGN1ciA9IHJldFtpXTtcblxuXHRcdFx0XHRsZXQgcCA9IChjdXIucCArIHByZXYucCkgLyAyO1xuXHRcdFx0XHRsZXQgY29sb3IgPSBjb2xvclJhbmdlKHApO1xuXHRcdFx0XHRtYXhEZWx0YSA9IE1hdGgubWF4KG1heERlbHRhLCBkZWx0YUUoY29sb3IsIHByZXYuY29sb3IpLCBkZWx0YUUoY29sb3IsIGN1ci5jb2xvcikpO1xuXHRcdFx0XHRyZXQuc3BsaWNlKGksIDAsIHtwLCBjb2xvcjogY29sb3JSYW5nZShwKX0pO1xuXHRcdFx0XHRpKys7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0ID0gcmV0Lm1hcChhID0+IGEuY29sb3IpO1xuXG5cdHJldHVybiByZXQ7XG59XG5cbi8qKlxuICogSW50ZXJwb2xhdGUgdG8gY29sb3IyIGFuZCByZXR1cm4gYSBmdW5jdGlvbiB0aGF0IHRha2VzIGEgMC0xIHBlcmNlbnRhZ2VcbiAqIEBwYXJhbSB7Q29sb3IgfCBzdHJpbmcgfCBGdW5jdGlvbn0gY29sb3IxIFRoZSBmaXJzdCBjb2xvciBvciBhbiBleGlzdGluZyByYW5nZVxuICogQHBhcmFtIHtDb2xvciB8IHN0cmluZ30gW2NvbG9yMl0gSWYgY29sb3IxIGlzIGEgY29sb3IsIHRoaXMgaXMgdGhlIHNlY29uZCBjb2xvclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zPXt9XVxuICogQHJldHVybnMge0Z1bmN0aW9ufSBBIGZ1bmN0aW9uIHRoYXQgdGFrZXMgYSAwLTEgcGVyY2VudGFnZSBhbmQgcmV0dXJucyBhIGNvbG9yXG4gKi9cbmZ1bmN0aW9uIHJhbmdlIChjb2xvcjEsIGNvbG9yMiwgb3B0aW9ucyA9IHt9KSB7XG5cdGlmIChpc1JhbmdlKGNvbG9yMSkpIHtcblx0XHQvLyBUd2Vha2luZyBleGlzdGluZyByYW5nZVxuXHRcdGxldCBbciwgb3B0aW9uc10gPSBbY29sb3IxLCBjb2xvcjJdO1xuXG5cdFx0cmV0dXJuIHJhbmdlKC4uLnIucmFuZ2VBcmdzLmNvbG9ycywgey4uLnIucmFuZ2VBcmdzLm9wdGlvbnMsIC4uLm9wdGlvbnN9KTtcblx0fVxuXG5cdGxldCB7c3BhY2UsIG91dHB1dFNwYWNlLCBwcm9ncmVzc2lvbiwgcHJlbXVsdGlwbGllZH0gPSBvcHRpb25zO1xuXG5cdGNvbG9yMSA9IGdldENvbG9yKGNvbG9yMSk7XG5cdGNvbG9yMiA9IGdldENvbG9yKGNvbG9yMik7XG5cblx0Ly8gTWFrZSBzdXJlIHdlJ3JlIHdvcmtpbmcgb24gY29waWVzIG9mIHRoZXNlIGNvbG9yc1xuXHRjb2xvcjEgPSBjbG9uZShjb2xvcjEpO1xuXHRjb2xvcjIgPSBjbG9uZShjb2xvcjIpO1xuXG5cdGxldCByYW5nZUFyZ3MgPSB7Y29sb3JzOiBbY29sb3IxLCBjb2xvcjJdLCBvcHRpb25zfTtcblxuXHRpZiAoc3BhY2UpIHtcblx0XHRzcGFjZSA9IENvbG9yU3BhY2UuZ2V0KHNwYWNlKTtcblx0fVxuXHRlbHNlIHtcblx0XHRzcGFjZSA9IENvbG9yU3BhY2UucmVnaXN0cnlbZGVmYXVsdHMuaW50ZXJwb2xhdGlvblNwYWNlXSB8fCBjb2xvcjEuc3BhY2U7XG5cdH1cblxuXHRvdXRwdXRTcGFjZSA9IG91dHB1dFNwYWNlID8gQ29sb3JTcGFjZS5nZXQob3V0cHV0U3BhY2UpIDogc3BhY2U7XG5cblx0Y29sb3IxID0gdG8oY29sb3IxLCBzcGFjZSk7XG5cdGNvbG9yMiA9IHRvKGNvbG9yMiwgc3BhY2UpO1xuXG5cdC8vIEdhbXV0IG1hcCB0byBhdm9pZCBhcmVhcyBvZiBmbGF0IGNvbG9yXG5cdGNvbG9yMSA9IHRvR2FtdXQoY29sb3IxKTtcblx0Y29sb3IyID0gdG9HYW11dChjb2xvcjIpO1xuXG5cdC8vIEhhbmRsZSBodWUgaW50ZXJwb2xhdGlvblxuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9jc3N3Zy1kcmFmdHMvaXNzdWVzLzQ3MzUjaXNzdWVjb21tZW50LTYzNTc0MTg0MFxuXHRpZiAoc3BhY2UuY29vcmRzLmggJiYgc3BhY2UuY29vcmRzLmgudHlwZSA9PT0gXCJhbmdsZVwiKSB7XG5cdFx0bGV0IGFyYyA9IG9wdGlvbnMuaHVlID0gb3B0aW9ucy5odWUgfHwgXCJzaG9ydGVyXCI7XG5cblx0XHRsZXQgaHVlID0gW3NwYWNlLCBcImhcIl07XG5cdFx0bGV0IFvOuDEsIM64Ml0gPSBbZ2V0KGNvbG9yMSwgaHVlKSwgZ2V0KGNvbG9yMiwgaHVlKV07XG5cdFx0Ly8gVW5kZWZpbmVkIGh1ZXMgbXVzdCBiZSBldmFsdWF0ZWQgYmVmb3JlIGh1ZSBmaXgtdXAgdG8gcHJvcGVybHlcblx0XHQvLyBjYWxjdWxhdGUgaHVlIGFyY3MgYmV0d2VlbiB1bmRlZmluZWQgYW5kIGRlZmluZWQgaHVlcy5cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9jc3N3Zy1kcmFmdHMvaXNzdWVzLzk0MzYjaXNzdWVjb21tZW50LTE3NDY5NTc1NDVcblx0XHRpZiAoaXNOYU4ozrgxKSAmJiAhaXNOYU4ozrgyKSkge1xuXHRcdFx0zrgxID0gzrgyO1xuXHRcdH1cblx0XHRlbHNlIGlmIChpc05hTijOuDIpICYmICFpc05hTijOuDEpKSB7XG5cdFx0XHTOuDIgPSDOuDE7XG5cdFx0fVxuXHRcdFvOuDEsIM64Ml0gPSBhZGp1c3QoYXJjLCBbzrgxLCDOuDJdKTtcblx0XHRzZXQoY29sb3IxLCBodWUsIM64MSk7XG5cdFx0c2V0KGNvbG9yMiwgaHVlLCDOuDIpO1xuXHR9XG5cblx0aWYgKHByZW11bHRpcGxpZWQpIHtcblx0XHQvLyBub3QgY29waW5nIHdpdGggcG9sYXIgc3BhY2VzIHlldFxuXHRcdGNvbG9yMS5jb29yZHMgPSBjb2xvcjEuY29vcmRzLm1hcChjID0+IGMgKiBjb2xvcjEuYWxwaGEpO1xuXHRcdGNvbG9yMi5jb29yZHMgPSBjb2xvcjIuY29vcmRzLm1hcChjID0+IGMgKiBjb2xvcjIuYWxwaGEpO1xuXHR9XG5cblx0cmV0dXJuIE9iamVjdC5hc3NpZ24ocCA9PiB7XG5cdFx0cCA9IHByb2dyZXNzaW9uID8gcHJvZ3Jlc3Npb24ocCkgOiBwO1xuXHRcdGxldCBjb29yZHMgPSBjb2xvcjEuY29vcmRzLm1hcCgoc3RhcnQsIGkpID0+IHtcblx0XHRcdGxldCBlbmQgPSBjb2xvcjIuY29vcmRzW2ldO1xuXHRcdFx0cmV0dXJuIGludGVycG9sYXRlKHN0YXJ0LCBlbmQsIHApO1xuXHRcdH0pO1xuXG5cdFx0bGV0IGFscGhhID0gaW50ZXJwb2xhdGUoY29sb3IxLmFscGhhLCBjb2xvcjIuYWxwaGEsIHApO1xuXHRcdGxldCByZXQgPSB7c3BhY2UsIGNvb3JkcywgYWxwaGF9O1xuXG5cdFx0aWYgKHByZW11bHRpcGxpZWQpIHtcblx0XHRcdC8vIHVuZG8gcHJlbXVsdGlwbGljYXRpb25cblx0XHRcdHJldC5jb29yZHMgPSByZXQuY29vcmRzLm1hcChjID0+IGMgLyBhbHBoYSk7XG5cdFx0fVxuXG5cdFx0aWYgKG91dHB1dFNwYWNlICE9PSBzcGFjZSkge1xuXHRcdFx0cmV0ID0gdG8ocmV0LCBvdXRwdXRTcGFjZSk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHJldDtcblx0fSwge1xuXHRcdHJhbmdlQXJncyxcblx0fSk7XG59XG5cbmZ1bmN0aW9uIGlzUmFuZ2UgKHZhbCkge1xuXHRyZXR1cm4gdHlwZSh2YWwpID09PSBcImZ1bmN0aW9uXCIgJiYgISF2YWwucmFuZ2VBcmdzO1xufVxuXG5kZWZhdWx0cy5pbnRlcnBvbGF0aW9uU3BhY2UgPSBcImxhYlwiO1xuXG5mdW5jdGlvbiByZWdpc3RlciAoQ29sb3IpIHtcblx0Q29sb3IuZGVmaW5lRnVuY3Rpb24oXCJtaXhcIiwgbWl4LCB7cmV0dXJuczogXCJjb2xvclwifSk7XG5cdENvbG9yLmRlZmluZUZ1bmN0aW9uKFwicmFuZ2VcIiwgcmFuZ2UsIHtyZXR1cm5zOiBcImZ1bmN0aW9uPGNvbG9yPlwifSk7XG5cdENvbG9yLmRlZmluZUZ1bmN0aW9uKFwic3RlcHNcIiwgc3RlcHMsIHtyZXR1cm5zOiBcImFycmF5PGNvbG9yPlwifSk7XG59XG5cbnZhciBpbnRlcnBvbGF0aW9uID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdGlzUmFuZ2U6IGlzUmFuZ2UsXG5cdG1peDogbWl4LFxuXHRyYW5nZTogcmFuZ2UsXG5cdHJlZ2lzdGVyOiByZWdpc3Rlcixcblx0c3RlcHM6IHN0ZXBzXG59KTtcblxudmFyIEhTTCA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwiaHNsXCIsXG5cdG5hbWU6IFwiSFNMXCIsXG5cdGNvb3Jkczoge1xuXHRcdGg6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0XHRzOiB7XG5cdFx0XHRyYW5nZTogWzAsIDEwMF0sXG5cdFx0XHRuYW1lOiBcIlNhdHVyYXRpb25cIixcblx0XHR9LFxuXHRcdGw6IHtcblx0XHRcdHJhbmdlOiBbMCwgMTAwXSxcblx0XHRcdG5hbWU6IFwiTGlnaHRuZXNzXCIsXG5cdFx0fSxcblx0fSxcblxuXHRiYXNlOiBzUkdCLFxuXG5cdC8vIEFkYXB0ZWQgZnJvbSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLWNvbG9yLTQvYmV0dGVyLXJnYlRvSHNsLmpzXG5cdGZyb21CYXNlOiByZ2IgPT4ge1xuXHRcdGxldCBtYXggPSBNYXRoLm1heCguLi5yZ2IpO1xuXHRcdGxldCBtaW4gPSBNYXRoLm1pbiguLi5yZ2IpO1xuXHRcdGxldCBbciwgZywgYl0gPSByZ2I7XG5cdFx0bGV0IFtoLCBzLCBsXSA9IFtOYU4sIDAsIChtaW4gKyBtYXgpIC8gMl07XG5cdFx0bGV0IGQgPSBtYXggLSBtaW47XG5cblx0XHRpZiAoZCAhPT0gMCkge1xuXHRcdFx0cyA9IChsID09PSAwIHx8IGwgPT09IDEpID8gMCA6IChtYXggLSBsKSAvIE1hdGgubWluKGwsIDEgLSBsKTtcblxuXHRcdFx0c3dpdGNoIChtYXgpIHtcblx0XHRcdFx0Y2FzZSByOiBoID0gKGcgLSBiKSAvIGQgKyAoZyA8IGIgPyA2IDogMCk7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGc6IGggPSAoYiAtIHIpIC8gZCArIDI7IGJyZWFrO1xuXHRcdFx0XHRjYXNlIGI6IGggPSAociAtIGcpIC8gZCArIDQ7XG5cdFx0XHR9XG5cblx0XHRcdGggPSBoICogNjA7XG5cdFx0fVxuXG5cdFx0Ly8gVmVyeSBvdXQgb2YgZ2FtdXQgY29sb3JzIGNhbiBwcm9kdWNlIG5lZ2F0aXZlIHNhdHVyYXRpb25cblx0XHQvLyBJZiBzbywganVzdCByb3RhdGUgdGhlIGh1ZSBieSAxODAgYW5kIHVzZSBhIHBvc2l0aXZlIHNhdHVyYXRpb25cblx0XHQvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3czYy9jc3N3Zy1kcmFmdHMvaXNzdWVzLzkyMjJcblx0XHRpZiAocyA8IDApIHtcblx0XHRcdGggKz0gMTgwO1xuXHRcdFx0cyA9IE1hdGguYWJzKHMpO1xuXHRcdH1cblxuXHRcdGlmIChoID49IDM2MCkge1xuXHRcdFx0aCAtPSAzNjA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtoLCBzICogMTAwLCBsICogMTAwXTtcblx0fSxcblxuXHQvLyBBZGFwdGVkIGZyb20gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1YjSFNMX3RvX1JHQl9hbHRlcm5hdGl2ZVxuXHR0b0Jhc2U6IGhzbCA9PiB7XG5cdFx0bGV0IFtoLCBzLCBsXSA9IGhzbDtcblx0XHRoID0gaCAlIDM2MDtcblxuXHRcdGlmIChoIDwgMCkge1xuXHRcdFx0aCArPSAzNjA7XG5cdFx0fVxuXG5cdFx0cyAvPSAxMDA7XG5cdFx0bCAvPSAxMDA7XG5cblx0XHRmdW5jdGlvbiBmIChuKSB7XG5cdFx0XHRsZXQgayA9IChuICsgaCAvIDMwKSAlIDEyO1xuXHRcdFx0bGV0IGEgPSBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXHRcdFx0cmV0dXJuIGwgLSBhICogTWF0aC5tYXgoLTEsIE1hdGgubWluKGsgLSAzLCA5IC0gaywgMSkpO1xuXHRcdH1cblxuXHRcdHJldHVybiBbZigwKSwgZig4KSwgZig0KV07XG5cdH0sXG5cblx0Zm9ybWF0czoge1xuXHRcdFwiaHNsXCI6IHtcblx0XHRcdGNvb3JkczogW1wiPG51bWJlcj4gfCA8YW5nbGU+XCIsIFwiPHBlcmNlbnRhZ2U+XCIsIFwiPHBlcmNlbnRhZ2U+XCJdLFxuXHRcdH0sXG5cdFx0XCJoc2xhXCI6IHtcblx0XHRcdGNvb3JkczogW1wiPG51bWJlcj4gfCA8YW5nbGU+XCIsIFwiPHBlcmNlbnRhZ2U+XCIsIFwiPHBlcmNlbnRhZ2U+XCJdLFxuXHRcdFx0Y29tbWFzOiB0cnVlLFxuXHRcdFx0bGFzdEFscGhhOiB0cnVlLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuLy8gVGhlIEh1ZSwgV2hpdGVuZXNzIEJsYWNrbmVzcyAoSFdCKSBjb2xvcnNwYWNlXG4vLyBTZWUgaHR0cHM6Ly9kcmFmdHMuY3Nzd2cub3JnL2Nzcy1jb2xvci00LyN0aGUtaHdiLW5vdGF0aW9uXG4vLyBOb3RlIHRoYXQsIGxpa2UgSFNMLCBjYWxjdWxhdGlvbnMgYXJlIGRvbmUgZGlyZWN0bHkgb25cbi8vIGdhbW1hLWNvcnJlY3RlZCBzUkdCIHZhbHVlcyByYXRoZXIgdGhhbiBsaW5lYXJpc2luZyB0aGVtIGZpcnN0LlxuXG52YXIgSFNWID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJoc3ZcIixcblx0bmFtZTogXCJIU1ZcIixcblx0Y29vcmRzOiB7XG5cdFx0aDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAzNjBdLFxuXHRcdFx0dHlwZTogXCJhbmdsZVwiLFxuXHRcdFx0bmFtZTogXCJIdWVcIixcblx0XHR9LFxuXHRcdHM6IHtcblx0XHRcdHJhbmdlOiBbMCwgMTAwXSxcblx0XHRcdG5hbWU6IFwiU2F0dXJhdGlvblwiLFxuXHRcdH0sXG5cdFx0djoge1xuXHRcdFx0cmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJWYWx1ZVwiLFxuXHRcdH0sXG5cdH0sXG5cblx0YmFzZTogSFNMLFxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9IU0xfYW5kX0hTViNJbnRlcmNvbnZlcnNpb25cblx0ZnJvbUJhc2UgKGhzbCkge1xuXHRcdGxldCBbaCwgcywgbF0gPSBoc2w7XG5cdFx0cyAvPSAxMDA7XG5cdFx0bCAvPSAxMDA7XG5cblx0XHRsZXQgdiA9IGwgKyBzICogTWF0aC5taW4obCwgMSAtIGwpO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdGgsIC8vIGggaXMgdGhlIHNhbWVcblx0XHRcdHYgPT09IDAgPyAwIDogMjAwICogKDEgLSBsIC8gdiksIC8vIHNcblx0XHRcdDEwMCAqIHYsXG5cdFx0XTtcblx0fSxcblx0Ly8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSFNMX2FuZF9IU1YjSW50ZXJjb252ZXJzaW9uXG5cdHRvQmFzZSAoaHN2KSB7XG5cdFx0bGV0IFtoLCBzLCB2XSA9IGhzdjtcblxuXHRcdHMgLz0gMTAwO1xuXHRcdHYgLz0gMTAwO1xuXG5cdFx0bGV0IGwgPSB2ICogKDEgLSBzIC8gMik7XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0aCwgLy8gaCBpcyB0aGUgc2FtZVxuXHRcdFx0KGwgPT09IDAgfHwgbCA9PT0gMSkgPyAwIDogKCh2IC0gbCkgLyBNYXRoLm1pbihsLCAxIC0gbCkpICogMTAwLFxuXHRcdFx0bCAqIDEwMCxcblx0XHRdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWQ6IFwiLS1oc3ZcIixcblx0XHRcdGNvb3JkczogW1wiPG51bWJlcj4gfCA8YW5nbGU+XCIsIFwiPHBlcmNlbnRhZ2U+IHwgPG51bWJlcj5cIiwgXCI8cGVyY2VudGFnZT4gfCA8bnVtYmVyPlwiXSxcblx0XHR9LFxuXHR9LFxufSk7XG5cbi8vIFRoZSBIdWUsIFdoaXRlbmVzcyBCbGFja25lc3MgKEhXQikgY29sb3JzcGFjZVxuLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtY29sb3ItNC8jdGhlLWh3Yi1ub3RhdGlvblxuLy8gTm90ZSB0aGF0LCBsaWtlIEhTTCwgY2FsY3VsYXRpb25zIGFyZSBkb25lIGRpcmVjdGx5IG9uXG4vLyBnYW1tYS1jb3JyZWN0ZWQgc1JHQiB2YWx1ZXMgcmF0aGVyIHRoYW4gbGluZWFyaXNpbmcgdGhlbSBmaXJzdC5cblxudmFyIGh3YiA9IG5ldyBDb2xvclNwYWNlKHtcblx0aWQ6IFwiaHdiXCIsXG5cdG5hbWU6IFwiSFdCXCIsXG5cdGNvb3Jkczoge1xuXHRcdGg6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0XHR3OiB7XG5cdFx0XHRyYW5nZTogWzAsIDEwMF0sXG5cdFx0XHRuYW1lOiBcIldoaXRlbmVzc1wiLFxuXHRcdH0sXG5cdFx0Yjoge1xuXHRcdFx0cmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJCbGFja25lc3NcIixcblx0XHR9LFxuXHR9LFxuXG5cdGJhc2U6IEhTVixcblx0ZnJvbUJhc2UgKGhzdikge1xuXHRcdGxldCBbaCwgcywgdl0gPSBoc3Y7XG5cblx0XHRyZXR1cm4gW2gsIHYgKiAoMTAwIC0gcykgLyAxMDAsIDEwMCAtIHZdO1xuXHR9LFxuXHR0b0Jhc2UgKGh3Yikge1xuXHRcdGxldCBbaCwgdywgYl0gPSBod2I7XG5cblx0XHQvLyBOb3cgY29udmVydCBwZXJjZW50YWdlcyB0byBbMC4uMV1cblx0XHR3IC89IDEwMDtcblx0XHRiIC89IDEwMDtcblxuXHRcdC8vIEFjaHJvbWF0aWMgY2hlY2sgKHdoaXRlIHBsdXMgYmxhY2sgPj0gMSlcblx0XHRsZXQgc3VtID0gdyArIGI7XG5cdFx0aWYgKHN1bSA+PSAxKSB7XG5cdFx0XHRsZXQgZ3JheSA9IHcgLyBzdW07XG5cdFx0XHRyZXR1cm4gW2gsIDAsIGdyYXkgKiAxMDBdO1xuXHRcdH1cblxuXHRcdGxldCB2ID0gKDEgLSBiKTtcblx0XHRsZXQgcyA9ICh2ID09PSAwKSA/IDAgOiAxIC0gdyAvIHY7XG5cdFx0cmV0dXJuIFtoLCBzICogMTAwLCB2ICogMTAwXTtcblx0fSxcblxuXHRmb3JtYXRzOiB7XG5cdFx0XCJod2JcIjoge1xuXHRcdFx0Y29vcmRzOiBbXCI8bnVtYmVyPiB8IDxhbmdsZT5cIiwgXCI8cGVyY2VudGFnZT4gfCA8bnVtYmVyPlwiLCBcIjxwZXJjZW50YWdlPiB8IDxudW1iZXI+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuLy8gY29udmVydCBhbiBhcnJheSBvZiBsaW5lYXItbGlnaHQgYTk4LXJnYiB2YWx1ZXMgdG8gQ0lFIFhZWlxuLy8gaHR0cDovL3d3dy5icnVjZWxpbmRibG9vbS5jb20vaW5kZXguaHRtbD9FcW5fUkdCX1hZWl9NYXRyaXguaHRtbFxuLy8gaGFzIGdyZWF0ZXIgbnVtZXJpY2FsIHByZWNpc2lvbiB0aGFuIHNlY3Rpb24gNC4zLjUuMyBvZlxuLy8gaHR0cHM6Ly93d3cuYWRvYmUuY29tL2RpZ2l0YWxpbWFnL3BkZnMvQWRvYmVSR0IxOTk4LnBkZlxuLy8gYnV0IHRoZSB2YWx1ZXMgYmVsb3cgd2VyZSBjYWxjdWxhdGVkIGZyb20gZmlyc3QgcHJpbmNpcGxlc1xuLy8gZnJvbSB0aGUgY2hyb21hdGljaXR5IGNvb3JkaW5hdGVzIG9mIFIgRyBCIFdcbmNvbnN0IHRvWFlaX00kMiA9IFtcblx0WyAwLjU3NjY2OTA0MjkxMDEzMDUsICAgMC4xODU1NTgyMzc5MDY1NDYzLCAgIDAuMTg4MjI4NjQ2MjM0OTk0NyAgXSxcblx0WyAwLjI5NzM0NDk3NTI1MDUzNjA1LCAgMC42MjczNjM1NjYyNTU0NjYxLCAgIDAuMDc1MjkxNDU4NDkzOTk3ODggXSxcblx0WyAwLjAyNzAzMTM2MTM4NjQxMjM0LCAgMC4wNzA2ODg4NTI1MzU4MjcyMywgIDAuOTkxMzM3NTM2ODM3NjM4OCAgXSxcbl07XG5cbmNvbnN0IGZyb21YWVpfTSQyID0gW1xuXHRbICAyLjA0MTU4NzkwMzgxMDc0NjUsICAgIC0wLjU2NTAwNjk3NDI3ODg1OTYsICAgLTAuMzQ0NzMxMzUwNzc4MzI5NTYgXSxcblx0WyAtMC45NjkyNDM2MzYyODA4Nzk1LCAgICAgMS44NzU5Njc1MDE1MDc3MjAyLCAgICAwLjA0MTU1NTA1NzQwNzE3NTU3IF0sXG5cdFsgIDAuMDEzNDQ0MjgwNjMyMDMxMTQyLCAgLTAuMTE4MzYyMzkyMjMxMDE4MzgsICAgMS4wMTUxNzQ5OTQzOTEyMDU0ICBdLFxuXTtcblxudmFyIEE5OExpbmVhciA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwiYTk4cmdiLWxpbmVhclwiLFxuXHRjc3NJZDogXCItLWE5OC1yZ2ItbGluZWFyXCIsXG5cdG5hbWU6IFwiTGluZWFyIEFkb2Jlwq4gOTggUkdCIGNvbXBhdGlibGVcIixcblx0d2hpdGU6IFwiRDY1XCIsXG5cdHRvWFlaX006IHRvWFlaX00kMixcblx0ZnJvbVhZWl9NOiBmcm9tWFlaX00kMixcbn0pO1xuXG52YXIgYTk4cmdiID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuXHRpZDogXCJhOThyZ2JcIixcblx0Y3NzSWQ6IFwiYTk4LXJnYlwiLFxuXHRuYW1lOiBcIkFkb2Jlwq4gOTggUkdCIGNvbXBhdGlibGVcIixcblx0YmFzZTogQTk4TGluZWFyLFxuXHR0b0Jhc2U6IFJHQiA9PiBSR0IubWFwKHZhbCA9PiBNYXRoLnBvdyhNYXRoLmFicyh2YWwpLCA1NjMgLyAyNTYpICogTWF0aC5zaWduKHZhbCkpLFxuXHRmcm9tQmFzZTogUkdCID0+IFJHQi5tYXAodmFsID0+IE1hdGgucG93KE1hdGguYWJzKHZhbCksIDI1NiAvIDU2MykgKiBNYXRoLnNpZ24odmFsKSksXG59KTtcblxuLy8gY29udmVydCBhbiBhcnJheSBvZiAgcHJvcGhvdG8tcmdiIHZhbHVlcyB0byBDSUUgWFlaXG4vLyB1c2luZyAgRDUwIChzbyBubyBjaHJvbWF0aWMgYWRhcHRhdGlvbiBuZWVkZWQgYWZ0ZXJ3YXJkcylcbi8vIG1hdHJpeCBjYW5ub3QgYmUgZXhwcmVzc2VkIGluIHJhdGlvbmFsIGZvcm0sIGJ1dCBpcyBjYWxjdWxhdGVkIHRvIDY0IGJpdCBhY2N1cmFjeVxuLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS93M2MvY3Nzd2ctZHJhZnRzL2lzc3Vlcy83Njc1XG5jb25zdCB0b1hZWl9NJDEgPSBbXG5cdFsgMC43OTc3NjY2NDQ5MDA2NDIzMCwgIDAuMTM1MTgxMjk3NDAwNTMzMDgsICAwLjAzMTM0NzczNDEyODM5MjIwIF0sXG5cdFsgMC4yODgwNzQ4Mjg4MTk0MDEzMCwgIDAuNzExODM1MjM0MjQxODczMDAsICAwLjAwMDA4OTkzNjkzODcyNTY0IF0sXG5cdFsgMC4wMDAwMDAwMDAwMDAwMDAwMCwgIDAuMDAwMDAwMDAwMDAwMDAwMDAsICAwLjgyNTEwNDYwMjUxMDQ2MDIwIF0sXG5dO1xuXG5jb25zdCBmcm9tWFlaX00kMSA9IFtcblx0WyAgMS4zNDU3ODY4ODE2NDcxNTgzMCwgLTAuMjU1NTcyMDg3Mzc5Nzk0NjQsIC0wLjA1MTEwMTg2NDk3NTU0NTI2IF0sXG5cdFsgLTAuNTQ0NjMwNzA1MTI0OTAxOTAsICAxLjUwODI0Nzc0Mjg0NTE0NjgwLCAgMC4wMjA1Mjc0NDc0MzY0MjEzOSBdLFxuXHRbICAwLjAwMDAwMDAwMDAwMDAwMDAwLCAgMC4wMDAwMDAwMDAwMDAwMDAwMCwgIDEuMjExOTY3NTQ1NjM4OTQ1MjAgXSxcbl07XG5cbnZhciBQcm9QaG90b0xpbmVhciA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwicHJvcGhvdG8tbGluZWFyXCIsXG5cdGNzc0lkOiBcIi0tcHJvcGhvdG8tcmdiLWxpbmVhclwiLFxuXHRuYW1lOiBcIkxpbmVhciBQcm9QaG90b1wiLFxuXHR3aGl0ZTogXCJENTBcIixcblx0YmFzZTogWFlaX0Q1MCxcblx0dG9YWVpfTTogdG9YWVpfTSQxLFxuXHRmcm9tWFlaX006IGZyb21YWVpfTSQxLFxufSk7XG5cbmNvbnN0IEV0ID0gMSAvIDUxMjtcbmNvbnN0IEV0MiA9IDE2IC8gNTEyO1xuXG52YXIgcHJvcGhvdG8gPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG5cdGlkOiBcInByb3Bob3RvXCIsXG5cdGNzc0lkOiBcInByb3Bob3RvLXJnYlwiLFxuXHRuYW1lOiBcIlByb1Bob3RvXCIsXG5cdGJhc2U6IFByb1Bob3RvTGluZWFyLFxuXHR0b0Jhc2UgKFJHQikge1xuXHRcdC8vIFRyYW5zZmVyIGN1cnZlIGlzIGdhbW1hIDEuOCB3aXRoIGEgc21hbGwgbGluZWFyIHBvcnRpb25cblx0XHRyZXR1cm4gUkdCLm1hcCh2ID0+IHYgPCBFdDIgPyB2IC8gMTYgOiB2ICoqIDEuOCk7XG5cdH0sXG5cdGZyb21CYXNlIChSR0IpIHtcblx0XHRyZXR1cm4gUkdCLm1hcCh2ID0+IHYgPj0gRXQgPyB2ICoqICgxIC8gMS44KSA6IDE2ICogdik7XG5cdH0sXG59KTtcblxudmFyIG9rbGNoID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJva2xjaFwiLFxuXHRuYW1lOiBcIk9rbGNoXCIsXG5cdGNvb3Jkczoge1xuXHRcdGw6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMV0sXG5cdFx0XHRuYW1lOiBcIkxpZ2h0bmVzc1wiLFxuXHRcdH0sXG5cdFx0Yzoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAwLjRdLFxuXHRcdFx0bmFtZTogXCJDaHJvbWFcIixcblx0XHR9LFxuXHRcdGg6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0fSxcblx0d2hpdGU6IFwiRDY1XCIsXG5cblx0YmFzZTogT0tMYWIsXG5cdGZyb21CYXNlIChva2xhYikge1xuXHRcdC8vIENvbnZlcnQgdG8gcG9sYXIgZm9ybVxuXHRcdGxldCBbTCwgYSwgYl0gPSBva2xhYjtcblx0XHRsZXQgaDtcblx0XHRjb25zdCDOtSA9IDAuMDAwMjsgLy8gY2hyb21hdGljIGNvbXBvbmVudHMgbXVjaCBzbWFsbGVyIHRoYW4gYSxiXG5cblx0XHRpZiAoTWF0aC5hYnMoYSkgPCDOtSAmJiBNYXRoLmFicyhiKSA8IM61KSB7XG5cdFx0XHRoID0gTmFOO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGggPSBNYXRoLmF0YW4yKGIsIGEpICogMTgwIC8gTWF0aC5QSTtcblx0XHR9XG5cblx0XHRyZXR1cm4gW1xuXHRcdFx0TCwgLy8gT0tMYWIgTCBpcyBzdGlsbCBMXG5cdFx0XHRNYXRoLnNxcnQoYSAqKiAyICsgYiAqKiAyKSwgLy8gQ2hyb21hXG5cdFx0XHRjb25zdHJhaW4oaCksIC8vIEh1ZSwgaW4gZGVncmVlcyBbMCB0byAzNjApXG5cdFx0XTtcblx0fSxcblx0Ly8gQ29udmVydCBmcm9tIHBvbGFyIGZvcm1cblx0dG9CYXNlIChva2xjaCkge1xuXHRcdGxldCBbTCwgQywgaF0gPSBva2xjaDtcblx0XHRsZXQgYSwgYjtcblxuXHRcdC8vIGNoZWNrIGZvciBOYU4gaHVlXG5cdFx0aWYgKGlzTmFOKGgpKSB7XG5cdFx0XHRhID0gMDtcblx0XHRcdGIgPSAwO1xuXHRcdH1cblx0XHRlbHNlIHtcblx0XHRcdGEgPSBDICogTWF0aC5jb3MoaCAqIE1hdGguUEkgLyAxODApO1xuXHRcdFx0YiA9IEMgKiBNYXRoLnNpbihoICogTWF0aC5QSSAvIDE4MCk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFsgTCwgYSwgYiBdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRcIm9rbGNoXCI6IHtcblx0XHRcdGNvb3JkczogW1wiPHBlcmNlbnRhZ2U+IHwgPG51bWJlcj5cIiwgXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlswLDFdXCIsIFwiPG51bWJlcj4gfCA8YW5nbGU+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxubGV0IHdoaXRlID0gV0hJVEVTLkQ2NTtcblxuY29uc3QgzrUkMiA9IDIxNiAvIDI0Mzg5OyAgLy8gNl4zLzI5XjMgPT0gKDI0LzExNileM1xuY29uc3QgzrokMSA9IDI0Mzg5IC8gMjc7ICAgLy8gMjleMy8zXjNcbmNvbnN0IFtVX1BSSU1FX1dISVRFLCBWX1BSSU1FX1dISVRFXSA9IHV2KHtzcGFjZTogeHl6X2Q2NSwgY29vcmRzOiB3aGl0ZX0pO1xuXG52YXIgTHV2ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJsdXZcIixcblx0bmFtZTogXCJMdXZcIixcblx0Y29vcmRzOiB7XG5cdFx0bDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJMaWdodG5lc3NcIixcblx0XHR9LFxuXHRcdC8vIFJlZmVyZW5jZSByYW5nZXMgZnJvbSBodHRwczovL2ZhY2VsZXNzdXNlci5naXRodWIuaW8vY29sb3JhaWRlL2NvbG9ycy9sdXYvXG5cdFx0dToge1xuXHRcdFx0cmVmUmFuZ2U6IFstMjE1LCAyMTVdLFxuXHRcdH0sXG5cdFx0djoge1xuXHRcdFx0cmVmUmFuZ2U6IFstMjE1LCAyMTVdLFxuXHRcdH0sXG5cdH0sXG5cblx0d2hpdGU6IHdoaXRlLFxuXHRiYXNlOiB4eXpfZDY1LFxuXG5cdC8vIENvbnZlcnQgRDY1LWFkYXB0ZWQgWFlaIHRvIEx1dlxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DSUVMVVYjVGhlX2ZvcndhcmRfdHJhbnNmb3JtYXRpb25cblx0ZnJvbUJhc2UgKFhZWikge1xuXHRcdGxldCB4eXogPSBbc2tpcE5vbmUoWFlaWzBdKSwgc2tpcE5vbmUoWFlaWzFdKSwgc2tpcE5vbmUoWFlaWzJdKV07XG5cdFx0bGV0IHkgPSB4eXpbMV07XG5cblx0XHRsZXQgW3VwLCB2cF0gPSB1dih7c3BhY2U6IHh5el9kNjUsIGNvb3JkczogeHl6fSk7XG5cblx0XHQvLyBQcm90ZWN0IGFnYWluc3QgWFlaIG9mIFswLCAwLCAwXVxuXHRcdGlmICghTnVtYmVyLmlzRmluaXRlKHVwKSB8fCAhTnVtYmVyLmlzRmluaXRlKHZwKSkge1xuXHRcdFx0cmV0dXJuIFswLCAwLCAwXTtcblx0XHR9XG5cblx0XHRsZXQgTCA9IHkgPD0gzrUkMiA/IM66JDEgKiB5IDogMTE2ICogTWF0aC5jYnJ0KHkpIC0gMTY7XG5cdFx0cmV0dXJuIFtcblx0XHRcdEwsXG5cdFx0XHQxMyAqIEwgKiAodXAgLSBVX1BSSU1FX1dISVRFKSxcblx0XHRcdDEzICogTCAqICh2cCAtIFZfUFJJTUVfV0hJVEUpLFxuXHRcdCBdO1xuXHR9LFxuXG5cdC8vIENvbnZlcnQgTHV2IHRvIEQ2NS1hZGFwdGVkIFhZWlxuXHQvLyBodHRwczovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9DSUVMVVYjVGhlX3JldmVyc2VfdHJhbnNmb3JtYXRpb25cblx0dG9CYXNlIChMdXYpIHtcblx0XHRsZXQgW0wsIHUsIHZdID0gTHV2O1xuXG5cdFx0Ly8gUHJvdGVjdCBhZ2FpbnN0IGRpdmlzaW9uIGJ5IHplcm8gYW5kIE5hTiBMaWdodG5lc3Ncblx0XHRpZiAoTCA9PT0gMCB8fCBpc05vbmUoTCkpIHtcblx0XHRcdHJldHVybiBbMCwgMCwgMF07XG5cdFx0fVxuXG5cdFx0dSA9IHNraXBOb25lKHUpO1xuXHRcdHYgPSBza2lwTm9uZSh2KTtcblxuXHRcdGxldCB1cCA9ICh1IC8gKDEzICogTCkpICsgVV9QUklNRV9XSElURTtcblx0XHRsZXQgdnAgPSAodiAvICgxMyAqIEwpKSArIFZfUFJJTUVfV0hJVEU7XG5cblx0XHRsZXQgeSA9IEwgPD0gOCA/IEwgLyDOuiQxIDogTWF0aC5wb3coKEwgKyAxNikgLyAxMTYsIDMpO1xuXG5cdFx0cmV0dXJuIFtcblx0XHRcdHkgKiAoKDkgKiB1cCkgLyAoNCAqIHZwKSksXG5cdFx0XHR5LFxuXHRcdFx0eSAqICgoMTIgLSAzICogdXAgLSAyMCAqIHZwKSAvICg0ICogdnApKSxcblx0XHRdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWQ6IFwiLS1sdXZcIixcblx0XHRcdGNvb3JkczogW1wiPG51bWJlcj4gfCA8cGVyY2VudGFnZT5cIiwgXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlstMSwxXVwiLCBcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+Wy0xLDFdXCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxudmFyIExDSHV2ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJsY2h1dlwiLFxuXHRuYW1lOiBcIkxDaHV2XCIsXG5cdGNvb3Jkczoge1xuXHRcdGw6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMTAwXSxcblx0XHRcdG5hbWU6IFwiTGlnaHRuZXNzXCIsXG5cdFx0fSxcblx0XHRjOiB7XG5cdFx0XHRyZWZSYW5nZTogWzAsIDIyMF0sXG5cdFx0XHRuYW1lOiBcIkNocm9tYVwiLFxuXHRcdH0sXG5cdFx0aDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAzNjBdLFxuXHRcdFx0dHlwZTogXCJhbmdsZVwiLFxuXHRcdFx0bmFtZTogXCJIdWVcIixcblx0XHR9LFxuXHR9LFxuXG5cdGJhc2U6IEx1dixcblx0ZnJvbUJhc2UgKEx1dikge1xuXHRcdC8vIENvbnZlcnQgdG8gcG9sYXIgZm9ybVxuXHRcdGxldCBbTCwgdSwgdl0gPSBMdXY7XG5cdFx0bGV0IGh1ZTtcblx0XHRjb25zdCDOtSA9IDAuMDI7XG5cblx0XHRpZiAoTWF0aC5hYnModSkgPCDOtSAmJiBNYXRoLmFicyh2KSA8IM61KSB7XG5cdFx0XHRodWUgPSBOYU47XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0aHVlID0gTWF0aC5hdGFuMih2LCB1KSAqIDE4MCAvIE1hdGguUEk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtcblx0XHRcdEwsIC8vIEwgaXMgc3RpbGwgTFxuXHRcdFx0TWF0aC5zcXJ0KHUgKiogMiArIHYgKiogMiksIC8vIENocm9tYVxuXHRcdFx0Y29uc3RyYWluKGh1ZSksIC8vIEh1ZSwgaW4gZGVncmVlcyBbMCB0byAzNjApXG5cdFx0XTtcblx0fSxcblx0dG9CYXNlIChMQ0gpIHtcblx0XHQvLyBDb252ZXJ0IGZyb20gcG9sYXIgZm9ybVxuXHRcdGxldCBbTGlnaHRuZXNzLCBDaHJvbWEsIEh1ZV0gPSBMQ0g7XG5cdFx0Ly8gQ2xhbXAgYW55IG5lZ2F0aXZlIENocm9tYVxuXHRcdGlmIChDaHJvbWEgPCAwKSB7XG5cdFx0XHRDaHJvbWEgPSAwO1xuXHRcdH1cblx0XHQvLyBEZWFsIHdpdGggTmFOIEh1ZVxuXHRcdGlmIChpc05hTihIdWUpKSB7XG5cdFx0XHRIdWUgPSAwO1xuXHRcdH1cblx0XHRyZXR1cm4gW1xuXHRcdFx0TGlnaHRuZXNzLCAvLyBMIGlzIHN0aWxsIExcblx0XHRcdENocm9tYSAqIE1hdGguY29zKEh1ZSAqIE1hdGguUEkgLyAxODApLCAvLyB1XG5cdFx0XHRDaHJvbWEgKiBNYXRoLnNpbihIdWUgKiBNYXRoLlBJIC8gMTgwKSwgIC8vIHZcblx0XHRdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWQ6IFwiLS1sY2h1dlwiLFxuXHRcdFx0Y29vcmRzOiBbXCI8bnVtYmVyPiB8IDxwZXJjZW50YWdlPlwiLCBcIjxudW1iZXI+IHwgPHBlcmNlbnRhZ2U+XCIsIFwiPG51bWJlcj4gfCA8YW5nbGU+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuLypcbkFkYXB0ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2hzbHV2L2hzbHV2LWphdmFzY3JpcHQvYmxvYi8xNGI0OWU2Y2Y5YTkxMzc5MTYwOTZiODQ4N2E1MzcyNjI2YjU3YmE0L3NyYy9oc2x1di50c1xuXG5Db3B5cmlnaHQgKGMpIDIwMTItMjAyMiBBbGV4ZWkgQm9yb25pbmVcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuXG5jb25zdCDOtSQxID0gMjE2IC8gMjQzODk7ICAvLyA2XjMvMjleMyA9PSAoMjQvMTE2KV4zXG5jb25zdCDOuiA9IDI0Mzg5IC8gMjc7ICAgLy8gMjleMy8zXjNcblxuY29uc3QgbV9yMCA9IGZyb21YWVpfTSQzWzBdWzBdO1xuY29uc3QgbV9yMSA9IGZyb21YWVpfTSQzWzBdWzFdO1xuY29uc3QgbV9yMiA9IGZyb21YWVpfTSQzWzBdWzJdO1xuY29uc3QgbV9nMCA9IGZyb21YWVpfTSQzWzFdWzBdO1xuY29uc3QgbV9nMSA9IGZyb21YWVpfTSQzWzFdWzFdO1xuY29uc3QgbV9nMiA9IGZyb21YWVpfTSQzWzFdWzJdO1xuY29uc3QgbV9iMCA9IGZyb21YWVpfTSQzWzJdWzBdO1xuY29uc3QgbV9iMSA9IGZyb21YWVpfTSQzWzJdWzFdO1xuY29uc3QgbV9iMiA9IGZyb21YWVpfTSQzWzJdWzJdO1xuXG5mdW5jdGlvbiBkaXN0YW5jZUZyb21PcmlnaW5BbmdsZSAoc2xvcGUsIGludGVyY2VwdCwgYW5nbGUpIHtcblx0Y29uc3QgZCA9IGludGVyY2VwdCAvIChNYXRoLnNpbihhbmdsZSkgLSBzbG9wZSAqIE1hdGguY29zKGFuZ2xlKSk7XG5cdHJldHVybiBkIDwgMCA/IEluZmluaXR5IDogZDtcbn1cblxuZnVuY3Rpb24gY2FsY3VsYXRlQm91bmRpbmdMaW5lcyAobCkge1xuXHRjb25zdCBzdWIxID0gTWF0aC5wb3cobCArIDE2LCAzKSAvIDE1NjA4OTY7XG5cdGNvbnN0IHN1YjIgPSBzdWIxID4gzrUkMSA/IHN1YjEgOiBsIC8gzro7XG5cdGNvbnN0IHMxciA9IHN1YjIgKiAoMjg0NTE3ICogbV9yMCAtIDk0ODM5ICogbV9yMik7XG5cdGNvbnN0IHMyciA9IHN1YjIgKiAoODM4NDIyICogbV9yMiArIDc2OTg2MCAqIG1fcjEgKyA3MzE3MTggKiBtX3IwKTtcblx0Y29uc3QgczNyID0gc3ViMiAqICg2MzIyNjAgKiBtX3IyIC0gMTI2NDUyICogbV9yMSk7XG5cdGNvbnN0IHMxZyA9IHN1YjIgKiAoMjg0NTE3ICogbV9nMCAtIDk0ODM5ICogbV9nMik7XG5cdGNvbnN0IHMyZyA9IHN1YjIgKiAoODM4NDIyICogbV9nMiArIDc2OTg2MCAqIG1fZzEgKyA3MzE3MTggKiBtX2cwKTtcblx0Y29uc3QgczNnID0gc3ViMiAqICg2MzIyNjAgKiBtX2cyIC0gMTI2NDUyICogbV9nMSk7XG5cdGNvbnN0IHMxYiA9IHN1YjIgKiAoMjg0NTE3ICogbV9iMCAtIDk0ODM5ICogbV9iMik7XG5cdGNvbnN0IHMyYiA9IHN1YjIgKiAoODM4NDIyICogbV9iMiArIDc2OTg2MCAqIG1fYjEgKyA3MzE3MTggKiBtX2IwKTtcblx0Y29uc3QgczNiID0gc3ViMiAqICg2MzIyNjAgKiBtX2IyIC0gMTI2NDUyICogbV9iMSk7XG5cblx0cmV0dXJuIHtcblx0XHRyMHM6IHMxciAvIHMzcixcblx0XHRyMGk6IHMyciAqIGwgLyBzM3IsXG5cdFx0cjFzOiBzMXIgLyAoczNyICsgMTI2NDUyKSxcblx0XHRyMWk6IChzMnIgLSA3Njk4NjApICogbCAvIChzM3IgKyAxMjY0NTIpLFxuXHRcdGcwczogczFnIC8gczNnLFxuXHRcdGcwaTogczJnICogbCAvIHMzZyxcblx0XHRnMXM6IHMxZyAvIChzM2cgKyAxMjY0NTIpLFxuXHRcdGcxaTogKHMyZyAtIDc2OTg2MCkgKiBsIC8gKHMzZyArIDEyNjQ1MiksXG5cdFx0YjBzOiBzMWIgLyBzM2IsXG5cdFx0YjBpOiBzMmIgKiBsIC8gczNiLFxuXHRcdGIxczogczFiIC8gKHMzYiArIDEyNjQ1MiksXG5cdFx0YjFpOiAoczJiIC0gNzY5ODYwKSAqIGwgLyAoczNiICsgMTI2NDUyKSxcblx0fTtcbn1cblxuZnVuY3Rpb24gY2FsY01heENocm9tYUhzbHV2IChsaW5lcywgaCkge1xuXHRjb25zdCBodWVSYWQgPSBoIC8gMzYwICogTWF0aC5QSSAqIDI7XG5cdGNvbnN0IHIwID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMucjBzLCBsaW5lcy5yMGksIGh1ZVJhZCk7XG5cdGNvbnN0IHIxID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMucjFzLCBsaW5lcy5yMWksIGh1ZVJhZCk7XG5cdGNvbnN0IGcwID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMuZzBzLCBsaW5lcy5nMGksIGh1ZVJhZCk7XG5cdGNvbnN0IGcxID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMuZzFzLCBsaW5lcy5nMWksIGh1ZVJhZCk7XG5cdGNvbnN0IGIwID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMuYjBzLCBsaW5lcy5iMGksIGh1ZVJhZCk7XG5cdGNvbnN0IGIxID0gZGlzdGFuY2VGcm9tT3JpZ2luQW5nbGUobGluZXMuYjFzLCBsaW5lcy5iMWksIGh1ZVJhZCk7XG5cblx0cmV0dXJuIE1hdGgubWluKHIwLCByMSwgZzAsIGcxLCBiMCwgYjEpO1xufVxuXG52YXIgaHNsdXYgPSBuZXcgQ29sb3JTcGFjZSh7XG5cdGlkOiBcImhzbHV2XCIsXG5cdG5hbWU6IFwiSFNMdXZcIixcblx0Y29vcmRzOiB7XG5cdFx0aDoge1xuXHRcdFx0cmVmUmFuZ2U6IFswLCAzNjBdLFxuXHRcdFx0dHlwZTogXCJhbmdsZVwiLFxuXHRcdFx0bmFtZTogXCJIdWVcIixcblx0XHR9LFxuXHRcdHM6IHtcblx0XHRcdHJhbmdlOiBbMCwgMTAwXSxcblx0XHRcdG5hbWU6IFwiU2F0dXJhdGlvblwiLFxuXHRcdH0sXG5cdFx0bDoge1xuXHRcdFx0cmFuZ2U6IFswLCAxMDBdLFxuXHRcdFx0bmFtZTogXCJMaWdodG5lc3NcIixcblx0XHR9LFxuXHR9LFxuXG5cdGJhc2U6IExDSHV2LFxuXHRnYW11dFNwYWNlOiBzUkdCLFxuXG5cdC8vIENvbnZlcnQgTENIdXYgdG8gSFNMdXZcblx0ZnJvbUJhc2UgKGxjaCkge1xuXHRcdGxldCBbbCwgYywgaF0gPSBbc2tpcE5vbmUobGNoWzBdKSwgc2tpcE5vbmUobGNoWzFdKSwgc2tpcE5vbmUobGNoWzJdKV07XG5cdFx0bGV0IHM7XG5cblx0XHRpZiAobCA+IDk5Ljk5OTk5OTkpIHtcblx0XHRcdHMgPSAwO1xuXHRcdFx0bCA9IDEwMDtcblx0XHR9XG5cdFx0ZWxzZSBpZiAobCA8IDAuMDAwMDAwMDEpIHtcblx0XHRcdHMgPSAwO1xuXHRcdFx0bCA9IDA7XG5cdFx0fVxuXHRcdGVsc2Uge1xuXHRcdFx0bGV0IGxpbmVzID0gY2FsY3VsYXRlQm91bmRpbmdMaW5lcyhsKTtcblx0XHRcdGxldCBtYXggPSBjYWxjTWF4Q2hyb21hSHNsdXYobGluZXMsIGgpO1xuXHRcdFx0cyA9IGMgLyBtYXggKiAxMDA7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIFtoLCBzLCBsXTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IEhTTHV2IHRvIExDSHV2XG5cdHRvQmFzZSAoaHNsKSB7XG5cdFx0bGV0IFtoLCBzLCBsXSA9IFtza2lwTm9uZShoc2xbMF0pLCBza2lwTm9uZShoc2xbMV0pLCBza2lwTm9uZShoc2xbMl0pXTtcblx0XHRsZXQgYztcblxuXHRcdGlmIChsID4gOTkuOTk5OTk5OSkge1xuXHRcdFx0bCA9IDEwMDtcblx0XHRcdGMgPSAwO1xuXHRcdH1cblx0XHRlbHNlIGlmIChsIDwgMC4wMDAwMDAwMSkge1xuXHRcdFx0bCA9IDA7XG5cdFx0XHRjID0gMDtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRsZXQgbGluZXMgPSBjYWxjdWxhdGVCb3VuZGluZ0xpbmVzKGwpO1xuXHRcdFx0bGV0IG1heCA9IGNhbGNNYXhDaHJvbWFIc2x1dihsaW5lcywgaCk7XG5cdFx0XHRjID0gbWF4IC8gMTAwICogcztcblx0XHR9XG5cblx0XHRyZXR1cm4gW2wsIGMsIGhdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWQ6IFwiLS1oc2x1dlwiLFxuXHRcdFx0Y29vcmRzOiBbXCI8bnVtYmVyPiB8IDxhbmdsZT5cIiwgXCI8cGVyY2VudGFnZT4gfCA8bnVtYmVyPlwiLCBcIjxwZXJjZW50YWdlPiB8IDxudW1iZXI+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuLypcbkFkYXB0ZWQgZnJvbTogaHR0cHM6Ly9naXRodWIuY29tL2hzbHV2L2hzbHV2LWphdmFzY3JpcHQvYmxvYi8xNGI0OWU2Y2Y5YTkxMzc5MTYwOTZiODQ4N2E1MzcyNjI2YjU3YmE0L3NyYy9oc2x1di50c1xuXG5Db3B5cmlnaHQgKGMpIDIwMTItMjAyMiBBbGV4ZWkgQm9yb25pbmVcblxuUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxub2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xudG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG5mdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuXG5UaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpbiBhbGxcbmNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG5cblRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbklNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG5BVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG5MSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTiBUSEVcblNPRlRXQVJFLlxuKi9cblxuXG5mcm9tWFlaX00kM1swXVswXTtcbmZyb21YWVpfTSQzWzBdWzFdO1xuZnJvbVhZWl9NJDNbMF1bMl07XG5mcm9tWFlaX00kM1sxXVswXTtcbmZyb21YWVpfTSQzWzFdWzFdO1xuZnJvbVhZWl9NJDNbMV1bMl07XG5mcm9tWFlaX00kM1syXVswXTtcbmZyb21YWVpfTSQzWzJdWzFdO1xuZnJvbVhZWl9NJDNbMl1bMl07XG5cbmZ1bmN0aW9uIGRpc3RhbmNlRnJvbU9yaWdpbiAoc2xvcGUsIGludGVyY2VwdCkge1xuXHRyZXR1cm4gTWF0aC5hYnMoaW50ZXJjZXB0KSAvIE1hdGguc3FydChNYXRoLnBvdyhzbG9wZSwgMikgKyAxKTtcbn1cblxuZnVuY3Rpb24gY2FsY01heENocm9tYUhwbHV2IChsaW5lcykge1xuXHRsZXQgcjAgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMucjBzLCBsaW5lcy5yMGkpO1xuXHRsZXQgcjEgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMucjFzLCBsaW5lcy5yMWkpO1xuXHRsZXQgZzAgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMuZzBzLCBsaW5lcy5nMGkpO1xuXHRsZXQgZzEgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMuZzFzLCBsaW5lcy5nMWkpO1xuXHRsZXQgYjAgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMuYjBzLCBsaW5lcy5iMGkpO1xuXHRsZXQgYjEgPSBkaXN0YW5jZUZyb21PcmlnaW4obGluZXMuYjFzLCBsaW5lcy5iMWkpO1xuXG5cdHJldHVybiBNYXRoLm1pbihyMCwgcjEsIGcwLCBnMSwgYjAsIGIxKTtcbn1cblxudmFyIGhwbHV2ID0gbmV3IENvbG9yU3BhY2Uoe1xuXHRpZDogXCJocGx1dlwiLFxuXHRuYW1lOiBcIkhQTHV2XCIsXG5cdGNvb3Jkczoge1xuXHRcdGg6IHtcblx0XHRcdHJlZlJhbmdlOiBbMCwgMzYwXSxcblx0XHRcdHR5cGU6IFwiYW5nbGVcIixcblx0XHRcdG5hbWU6IFwiSHVlXCIsXG5cdFx0fSxcblx0XHRzOiB7XG5cdFx0XHRyYW5nZTogWzAsIDEwMF0sXG5cdFx0XHRuYW1lOiBcIlNhdHVyYXRpb25cIixcblx0XHR9LFxuXHRcdGw6IHtcblx0XHRcdHJhbmdlOiBbMCwgMTAwXSxcblx0XHRcdG5hbWU6IFwiTGlnaHRuZXNzXCIsXG5cdFx0fSxcblx0fSxcblxuXHRiYXNlOiBMQ0h1dixcblx0Z2FtdXRTcGFjZTogXCJzZWxmXCIsXG5cblx0Ly8gQ29udmVydCBMQ0h1diB0byBIUEx1dlxuXHRmcm9tQmFzZSAobGNoKSB7XG5cdFx0bGV0IFtsLCBjLCBoXSA9IFtza2lwTm9uZShsY2hbMF0pLCBza2lwTm9uZShsY2hbMV0pLCBza2lwTm9uZShsY2hbMl0pXTtcblx0XHRsZXQgcztcblxuXHRcdGlmIChsID4gOTkuOTk5OTk5OSkge1xuXHRcdFx0cyA9IDA7XG5cdFx0XHRsID0gMTAwO1xuXHRcdH1cblx0XHRlbHNlIGlmIChsIDwgMC4wMDAwMDAwMSkge1xuXHRcdFx0cyA9IDA7XG5cdFx0XHRsID0gMDtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRsZXQgbGluZXMgPSBjYWxjdWxhdGVCb3VuZGluZ0xpbmVzKGwpO1xuXHRcdFx0bGV0IG1heCA9IGNhbGNNYXhDaHJvbWFIcGx1dihsaW5lcyk7XG5cdFx0XHRzID0gYyAvIG1heCAqIDEwMDtcblx0XHR9XG5cdFx0cmV0dXJuIFtoLCBzLCBsXTtcblx0fSxcblxuXHQvLyBDb252ZXJ0IEhQTHV2IHRvIExDSHV2XG5cdHRvQmFzZSAoaHNsKSB7XG5cdFx0bGV0IFtoLCBzLCBsXSA9IFtza2lwTm9uZShoc2xbMF0pLCBza2lwTm9uZShoc2xbMV0pLCBza2lwTm9uZShoc2xbMl0pXTtcblx0XHRsZXQgYztcblxuXHRcdGlmIChsID4gOTkuOTk5OTk5OSkge1xuXHRcdFx0bCA9IDEwMDtcblx0XHRcdGMgPSAwO1xuXHRcdH1cblx0XHRlbHNlIGlmIChsIDwgMC4wMDAwMDAwMSkge1xuXHRcdFx0bCA9IDA7XG5cdFx0XHRjID0gMDtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHRsZXQgbGluZXMgPSBjYWxjdWxhdGVCb3VuZGluZ0xpbmVzKGwpO1xuXHRcdFx0bGV0IG1heCA9IGNhbGNNYXhDaHJvbWFIcGx1dihsaW5lcyk7XG5cdFx0XHRjID0gbWF4IC8gMTAwICogcztcblx0XHR9XG5cblx0XHRyZXR1cm4gW2wsIGMsIGhdO1xuXHR9LFxuXG5cdGZvcm1hdHM6IHtcblx0XHRjb2xvcjoge1xuXHRcdFx0aWQ6IFwiLS1ocGx1dlwiLFxuXHRcdFx0Y29vcmRzOiBbXCI8bnVtYmVyPiB8IDxhbmdsZT5cIiwgXCI8cGVyY2VudGFnZT4gfCA8bnVtYmVyPlwiLCBcIjxwZXJjZW50YWdlPiB8IDxudW1iZXI+XCJdLFxuXHRcdH0sXG5cdH0sXG59KTtcblxuY29uc3QgWXcgPSAyMDM7XHQvLyBhYnNvbHV0ZSBsdW1pbmFuY2Ugb2YgbWVkaWEgd2hpdGUsIGNkL23CslxuY29uc3QgbiA9IDI2MTAgLyAoMiAqKiAxNCk7XG5jb25zdCBuaW52ID0gKDIgKiogMTQpIC8gMjYxMDtcbmNvbnN0IG0gPSAyNTIzIC8gKDIgKiogNSk7XG5jb25zdCBtaW52ID0gKDIgKiogNSkgLyAyNTIzO1xuY29uc3QgYzEgPSAzNDI0IC8gKDIgKiogMTIpO1xuY29uc3QgYzIgPSAyNDEzIC8gKDIgKiogNyk7XG5jb25zdCBjMyA9IDIzOTIgLyAoMiAqKiA3KTtcblxudmFyIHJlYzIxMDBQcSA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwicmVjMjEwMHBxXCIsXG5cdGNzc0lkOiBcInJlYzIxMDAtcHFcIixcblx0bmFtZTogXCJSRUMuMjEwMC1QUVwiLFxuXHRiYXNlOiBSRUMyMDIwTGluZWFyLFxuXHR0b0Jhc2UgKFJHQikge1xuXHRcdC8vIGdpdmVuIFBRIGVuY29kZWQgY29tcG9uZW50IGluIHJhbmdlIFswLCAxXVxuXHRcdC8vIHJldHVybiBtZWRpYS13aGl0ZSByZWxhdGl2ZSBsaW5lYXItbGlnaHRcblx0XHRyZXR1cm4gUkdCLm1hcChmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHRsZXQgeCA9ICgoTWF0aC5tYXgoKCh2YWwgKiogbWludikgLSBjMSksIDApIC8gKGMyIC0gKGMzICogKHZhbCAqKiBtaW52KSkpKSAqKiBuaW52KTtcblx0XHRcdHJldHVybiAoeCAqIDEwMDAwIC8gWXcpOyBcdC8vIGx1bWluYW5jZSByZWxhdGl2ZSB0byBkaWZmdXNlIHdoaXRlLCBbMCwgNzAgb3Igc29dLlxuXHRcdH0pO1xuXHR9LFxuXHRmcm9tQmFzZSAoUkdCKSB7XG5cdFx0Ly8gZ2l2ZW4gbWVkaWEtd2hpdGUgcmVsYXRpdmUgbGluZWFyLWxpZ2h0XG5cdFx0Ly8gcmV0dXJuUFEgZW5jb2RlZCBjb21wb25lbnQgaW4gcmFuZ2UgWzAsIDFdXG5cdFx0cmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0bGV0IHggPSBNYXRoLm1heCh2YWwgKiBZdyAvIDEwMDAwLCAwKTsgXHQvLyBhYnNvbHV0ZSBsdW1pbmFuY2Ugb2YgcGVhayB3aGl0ZSBpcyAxMCwwMDAgY2QvbcKyLlxuXHRcdFx0bGV0IG51bSA9IChjMSArIChjMiAqICh4ICoqIG4pKSk7XG5cdFx0XHRsZXQgZGVub20gPSAoMSArIChjMyAqICh4ICoqIG4pKSk7XG5cblx0XHRcdHJldHVybiAoKG51bSAvIGRlbm9tKSAgKiogbSk7XG5cdFx0fSk7XG5cdH0sXG59KTtcblxuLy8gRklYTUUgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9MZWFWZXJvdS9jb2xvci5qcy9pc3N1ZXMvMTkwXG5cbmNvbnN0IGEgPSAwLjE3ODgzMjc3O1xuY29uc3QgYiA9IDAuMjg0NjY4OTI7IC8vIDEgLSAoNCAqIGEpXG5jb25zdCBjID0gMC41NTk5MTA3MzsgLy8gMC41IC0gYSAqIE1hdGgubG9nKDQgKmEpXG5cbmNvbnN0IHNjYWxlID0gMy43NzQzO1x0Ly8gUGxhY2UgMTglIGdyZXkgYXQgSExHIDAuMzgsIHNvIG1lZGlhIHdoaXRlIGF0IDAuNzVcblxudmFyIHJlYzIxMDBIbGcgPSBuZXcgUkdCQ29sb3JTcGFjZSh7XG5cdGlkOiBcInJlYzIxMDBobGdcIixcblx0Y3NzSWQ6IFwicmVjMjEwMC1obGdcIixcblx0bmFtZTogXCJSRUMuMjEwMC1ITEdcIixcblx0cmVmZXJyZWQ6IFwic2NlbmVcIixcblxuXHRiYXNlOiBSRUMyMDIwTGluZWFyLFxuXHR0b0Jhc2UgKFJHQikge1xuXHRcdC8vIGdpdmVuIEhMRyBlbmNvZGVkIGNvbXBvbmVudCBpbiByYW5nZSBbMCwgMV1cblx0XHQvLyByZXR1cm4gbWVkaWEtd2hpdGUgcmVsYXRpdmUgbGluZWFyLWxpZ2h0XG5cdFx0cmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0Ly8gZmlyc3QgdGhlIEhMRyBFT1RGXG5cdFx0XHQvLyBJVFUtUiBCVC4yMzkwLTEwIHAuMzAgc2VjdGlvblxuXHRcdFx0Ly8gNi4zIFRoZSBoeWJyaWQgbG9nLWdhbW1hIGVsZWN0cm8tb3B0aWNhbCB0cmFuc2ZlciBmdW5jdGlvbiAoRU9URilcblx0XHRcdC8vIFRoZW4gc2NhbGUgYnkgMyBzbyBtZWRpYSB3aGl0ZSBpcyAxLjBcblx0XHRcdGlmICh2YWwgPD0gMC41KSB7XG5cdFx0XHRcdHJldHVybiAodmFsICoqIDIpIC8gMyAqIHNjYWxlO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuICgoTWF0aC5leHAoKHZhbCAtIGMpIC8gYSkgKyBiKSAvIDEyKSAqIHNjYWxlO1xuXHRcdH0pO1xuXHR9LFxuXHRmcm9tQmFzZSAoUkdCKSB7XG5cdFx0Ly8gZ2l2ZW4gbWVkaWEtd2hpdGUgcmVsYXRpdmUgbGluZWFyLWxpZ2h0XG5cdFx0Ly8gd2hlcmUgZGlmZnVzZSB3aGl0ZSBpcyAxLjAsXG5cdFx0Ly8gcmV0dXJuIEhMRyBlbmNvZGVkIGNvbXBvbmVudCBpbiByYW5nZSBbMCwgMV1cblx0XHRyZXR1cm4gUkdCLm1hcChmdW5jdGlvbiAodmFsKSB7XG5cdFx0XHQvLyBmaXJzdCBzY2FsZSB0byBwdXQgbGluZWFyLWxpZ2h0IG1lZGlhIHdoaXRlIGF0IDEvM1xuXHRcdFx0dmFsIC89IHNjYWxlO1xuXHRcdFx0Ly8gbm93IHRoZSBITEcgT0VURlxuXHRcdFx0Ly8gSVRVLVIgQlQuMjM5MC0xMCBwLjIzXG5cdFx0XHQvLyA2LjEgVGhlIGh5YnJpZCBsb2ctZ2FtbWEgb3B0by1lbGVjdHJvbmljIHRyYW5zZmVyIGZ1bmN0aW9uIChPRVRGKVxuXHRcdFx0aWYgKHZhbCA8PSAxIC8gMTIpIHtcblx0XHRcdFx0cmV0dXJuIE1hdGguc3FydCgzICogdmFsKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBhICogTWF0aC5sb2coMTIgKiB2YWwgLSBiKSArIGM7XG5cdFx0fSk7XG5cdH0sXG59KTtcblxuY29uc3QgQ0FUcyA9IHt9O1xuXG5ob29rcy5hZGQoXCJjaHJvbWF0aWMtYWRhcHRhdGlvbi1zdGFydFwiLCBlbnYgPT4ge1xuXHRpZiAoZW52Lm9wdGlvbnMubWV0aG9kKSB7XG5cdFx0ZW52Lk0gPSBhZGFwdChlbnYuVzEsIGVudi5XMiwgZW52Lm9wdGlvbnMubWV0aG9kKTtcblx0fVxufSk7XG5cbmhvb2tzLmFkZChcImNocm9tYXRpYy1hZGFwdGF0aW9uLWVuZFwiLCBlbnYgPT4ge1xuXHRpZiAoIWVudi5NKSB7XG5cdFx0ZW52Lk0gPSBhZGFwdChlbnYuVzEsIGVudi5XMiwgZW52Lm9wdGlvbnMubWV0aG9kKTtcblx0fVxufSk7XG5cbmZ1bmN0aW9uIGRlZmluZUNBVCAoe2lkLCB0b0NvbmVfTSwgZnJvbUNvbmVfTX0pIHtcblx0Ly8gVXNlIGlkLCB0b0NvbmVfTSwgZnJvbUNvbmVfTSBsaWtlIHZhcmlhYmxlc1xuXHRDQVRzW2lkXSA9IGFyZ3VtZW50c1swXTtcbn1cblxuZnVuY3Rpb24gYWRhcHQgKFcxLCBXMiwgaWQgPSBcIkJyYWRmb3JkXCIpIHtcblx0Ly8gYWRhcHQgZnJvbSBhIHNvdXJjZSB3aGl0ZXBvaW50IG9yIGlsbHVtaW5hbnQgVzFcblx0Ly8gdG8gYSBkZXN0aW5hdGlvbiB3aGl0ZXBvaW50IG9yIGlsbHVtaW5hbnQgVzIsXG5cdC8vIHVzaW5nIHRoZSBnaXZlbiBjaHJvbWF0aWMgYWRhcHRhdGlvbiB0cmFuc2Zvcm0gKENBVClcblx0Ly8gZGVidWdnZXI7XG5cdGxldCBtZXRob2QgPSBDQVRzW2lkXTtcblxuXHRsZXQgW8+BcywgzrNzLCDOsnNdID0gbXVsdGlwbHlNYXRyaWNlcyhtZXRob2QudG9Db25lX00sIFcxKTtcblx0bGV0IFvPgWQsIM6zZCwgzrJkXSA9IG11bHRpcGx5TWF0cmljZXMobWV0aG9kLnRvQ29uZV9NLCBXMik7XG5cblx0Ly8gYWxsIHByYWN0aWNhbCBpbGx1bWluYW50cyBoYXZlIG5vbi16ZXJvIFhZWiBzbyBubyBkaXZpc2lvbiBieSB6ZXJvIGNhbiBvY2N1ciBiZWxvd1xuXHRsZXQgc2NhbGUgPSBbXG5cdFx0W8+BZCAvIM+BcywgIDAsICAgICAgICAwICAgICAgXSxcblx0XHRbMCwgICAgICAgIM6zZCAvIM6zcywgIDAgICAgICBdLFxuXHRcdFswLCAgICAgICAgMCwgICAgICAgIM6yZCAvIM6yc10sXG5cdF07XG5cdC8vIGNvbnNvbGUubG9nKHtzY2FsZX0pO1xuXG5cdGxldCBzY2FsZWRfY29uZV9NID0gbXVsdGlwbHlNYXRyaWNlcyhzY2FsZSwgbWV0aG9kLnRvQ29uZV9NKTtcblx0bGV0IGFkYXB0X01cdD0gbXVsdGlwbHlNYXRyaWNlcyhtZXRob2QuZnJvbUNvbmVfTSwgc2NhbGVkX2NvbmVfTSk7XG5cdC8vIGNvbnNvbGUubG9nKHtzY2FsZWRfY29uZV9NLCBhZGFwdF9NfSk7XG5cdHJldHVybiBhZGFwdF9NO1xufVxuXG5kZWZpbmVDQVQoe1xuXHRpZDogXCJ2b24gS3JpZXNcIixcblx0dG9Db25lX006IFtcblx0XHRbICAwLjQwMDI0MDAsICAwLjcwNzYwMDAsIC0wLjA4MDgxMDAgXSxcblx0XHRbIC0wLjIyNjMwMDAsICAxLjE2NTMyMDAsICAwLjA0NTcwMDAgXSxcblx0XHRbICAwLjAwMDAwMDAsICAwLjAwMDAwMDAsICAwLjkxODIyMDAgXSxcblx0XSxcblx0ZnJvbUNvbmVfTTogW1xuXHRcdFsgMS44NTk5MzYzODc0NTU4Mzk3LCAtMS4xMjkzODE2MTg1ODAwOTE2LCAgIDAuMjE5ODk3NDA5NTk2MTkzMjggICAgIF0sXG5cdFx0WyAwLjM2MTE5MTQzNjI0MTc2NzYsICAwLjYzODgxMjQ2MzI4NTA0MjIsICAtMC4wMDAwMDYzNzA1OTY4Mzg2NDk4OTkgXSxcblx0XHRbIDAsICAgICAgICAgICAgICAgICAgIDAsICAgICAgICAgICAgICAgICAgICAxLjA4OTA2MzYyMzA5Njg2MTMgICAgICBdLFxuXHRdLFxufSk7XG5cbmRlZmluZUNBVCh7XG5cdGlkOiBcIkJyYWRmb3JkXCIsXG5cdC8vIENvbnZlcnQgYW4gYXJyYXkgb2YgWFlaIHZhbHVlcyBpbiB0aGUgcmFuZ2UgMC4wIC0gMS4wXG5cdC8vIHRvIGNvbmUgZnVuZGFtZW50YWxzXG5cdHRvQ29uZV9NOiBbXG5cdFx0WyAgMC44OTUxMDAwLCAgMC4yNjY0MDAwLCAtMC4xNjE0MDAwIF0sXG5cdFx0WyAtMC43NTAyMDAwLCAgMS43MTM1MDAwLCAgMC4wMzY3MDAwIF0sXG5cdFx0WyAgMC4wMzg5MDAwLCAtMC4wNjg1MDAwLCAgMS4wMjk2MDAwIF0sXG5cdF0sXG5cdC8vIGFuZCBiYWNrXG5cdGZyb21Db25lX006IFtcblx0XHRbICAwLjk4Njk5MjkwNTQ2NjcxMjEsIC0wLjE0NzA1NDI1NjQyMDk5MDEzLCAwLjE1OTk2MjY1MTY2MzczMTIyICBdLFxuXHRcdFsgIDAuNDMyMzA1MjY5NzIzMzk0NSwgIDAuNTE4MzYwMjcxNTM2Nzc3NCwgIDAuMDQ5MjkxMjI4MjEyODU1NTk0IF0sXG5cdFx0WyAtMC4wMDg1Mjg2NjQ1NzUxNzczMiwgMC4wNDAwNDI4MjE2NTQwODQ4NiwgMC45Njg0ODY2OTU3ODc1NSAgICAgXSxcblx0XSxcbn0pO1xuXG5kZWZpbmVDQVQoe1xuXHRpZDogXCJDQVQwMlwiLFxuXHQvLyB3aXRoIGNvbXBsZXRlIGNocm9tYXRpYyBhZGFwdGF0aW9uIHRvIFcyLCBzbyBEID0gMS4wXG5cdHRvQ29uZV9NOiBbXG5cdFx0WyAgMC43MzI4MDAwLCAgMC40Mjk2MDAwLCAtMC4xNjI0MDAwIF0sXG5cdFx0WyAtMC43MDM2MDAwLCAgMS42OTc1MDAwLCAgMC4wMDYxMDAwIF0sXG5cdFx0WyAgMC4wMDMwMDAwLCAgMC4wMTM2MDAwLCAgMC45ODM0MDAwIF0sXG5cdF0sXG5cdGZyb21Db25lX006IFtcblx0XHRbICAxLjA5NjEyMzgyMDgzNTUxNDIsICAgLTAuMjc4ODY5MDAwMjE4Mjg3MjYsIDAuMTgyNzQ1MTc5MzgyNzczMDcgXSxcblx0XHRbICAwLjQ1NDM2OTA0MTk3NTM1OTIsICAgIDAuNDczNTMzMTU0MzA3NDExNywgIDAuMDcyMDk3ODAzNzE3MjI5MTEgXSxcblx0XHRbIC0wLjAwOTYyNzYwODczODQyOTM1NSwgLTAuMDA1Njk4MDMxMjE2MTEzNDIsIDEuMDE1MzI1NjM5OTU0NTQyNyAgXSxcblx0XSxcbn0pO1xuXG5kZWZpbmVDQVQoe1xuXHRpZDogXCJDQVQxNlwiLFxuXHR0b0NvbmVfTTogW1xuXHRcdFsgIDAuNDAxMjg4LCAgMC42NTAxNzMsIC0wLjA1MTQ2MSBdLFxuXHRcdFsgLTAuMjUwMjY4LCAgMS4yMDQ0MTQsICAwLjA0NTg1NCBdLFxuXHRcdFsgLTAuMDAyMDc5LCAgMC4wNDg5NTIsICAwLjk1MzEyNyBdLFxuXHRdLFxuXHQvLyB0aGUgZXh0cmEgcHJlY2lzaW9uIGlzIG5lZWRlZCB0byBhdm9pZCByb3VuZHRyaXBwaW5nIGVycm9yc1xuXHRmcm9tQ29uZV9NOiBbXG5cdFx0WyAgMS44NjIwNjc4NTUwODcyMzMsICAgLTEuMDExMjU0NjMwNTMxNjg0NSwgIDAuMTQ5MTg2Nzc1NDQ0NDUxNzIgIF0sXG5cdFx0WyAgMC4zODc1MjY1NDMyMzYxMzcyLCAgIDAuNjIxNDQ3NDQxOTMxNDc1MywgLTAuMDA4OTczOTg1MTY3NjEyNTIxIF0sXG5cdFx0WyAtMC4wMTU4NDE0OTg4NDkzMzM4NiwgLTAuMDM0MTIyOTM4MDI4NTE1NTcsIDEuMDQ5OTY0NDM2ODc3ODQ5NiAgIF0sXG5cdF0sXG59KTtcblxuT2JqZWN0LmFzc2lnbihXSElURVMsIHtcblx0Ly8gd2hpdGVwb2ludCB2YWx1ZXMgZnJvbSBBU1RNIEUzMDgtMDEgd2l0aCAxMG5tIHNwYWNpbmcsIDE5MzEgMiBkZWdyZWUgb2JzZXJ2ZXJcblx0Ly8gYWxsIG5vcm1hbGl6ZWQgdG8gWSAobHVtaW5hbmNlKSA9IDEuMDAwMDBcblx0Ly8gSWxsdW1pbmFudCBBIGlzIGEgdHVuZ3N0ZW4gZWxlY3RyaWMgbGlnaHQsIGdpdmluZyBhIHZlcnkgd2FybSwgb3JhbmdlIGxpZ2h0LlxuXHRBOiAgIFsxLjA5ODUwLCAxLjAwMDAwLCAwLjM1NTg1XSxcblxuXHQvLyBJbGx1bWluYW50IEMgd2FzIGFuIGVhcmx5IGFwcHJveGltYXRpb24gdG8gZGF5bGlnaHQ6IGlsbHVtaW5hbnQgQSB3aXRoIGEgYmx1ZSBmaWx0ZXIuXG5cdEM6ICAgWzAuOTgwNzQsIDEuMDAwMDAwLCAxLjE4MjMyXSxcblxuXHQvLyBUaGUgZGF5bGlnaHQgc2VyaWVzIG9mIGlsbHVtaW5hbnRzIHNpbXVsYXRlIG5hdHVyYWwgZGF5bGlnaHQuXG5cdC8vIFRoZSBjb2xvciB0ZW1wZXJhdHVyZSAoaW4gZGVncmVlcyBLZWx2aW4vMTAwKSByYW5nZXMgZnJvbVxuXHQvLyBjb29sLCBvdmVyY2FzdCBkYXlsaWdodCAoRDUwKSB0byBicmlnaHQsIGRpcmVjdCBzdW5saWdodCAoRDY1KS5cblx0RDU1OiBbMC45NTY4MiwgMS4wMDAwMCwgMC45MjE0OV0sXG5cdEQ3NTogWzAuOTQ5NzIsIDEuMDAwMDAsIDEuMjI2MzhdLFxuXG5cdC8vIEVxdWFsLWVuZXJneSBpbGx1bWluYW50LCB1c2VkIGluIHR3by1zdGFnZSBDQVQxNlxuXHRFOiAgIFsxLjAwMDAwLCAxLjAwMDAwLCAxLjAwMDAwXSxcblxuXHQvLyBUaGUgRiBzZXJpZXMgb2YgaWxsdW1pbmFudHMgcmVwcmVzZW50IGZsdW9yZXNjZW50IGxpZ2h0c1xuXHRGMjogIFswLjk5MTg2LCAxLjAwMDAwLCAwLjY3MzkzXSxcblx0Rjc6ICBbMC45NTA0MSwgMS4wMDAwMCwgMS4wODc0N10sXG5cdEYxMTogWzEuMDA5NjIsIDEuMDAwMDAsIDAuNjQzNTBdLFxufSk7XG5cbi8vIFRoZSBBQ0VTIHdoaXRlcG9pbnRcbi8vIHNlZSBUQi0yMDE4LTAwMSBEZXJpdmF0aW9uIG9mIHRoZSBBQ0VTIFdoaXRlIFBvaW50IENJRSBDaHJvbWF0aWNpdHkgQ29vcmRpbmF0ZXNcbi8vIGFsc28gaHR0cHM6Ly9naXRodWIuY29tL2FtcGFzL2FjZXMtZGV2L2Jsb2IvbWFzdGVyL2RvY3VtZW50cy9weXRob24vVEItMjAxOC0wMDEvYWNlc193cC5weVxuLy8gU2ltaWxhciB0byBENjBcbldISVRFUy5BQ0VTID0gWzAuMzIxNjggLyAwLjMzNzY3LCAxLjAwMDAwLCAoMS4wMDAwMCAtIDAuMzIxNjggLSAwLjMzNzY3KSAvIDAuMzM3NjddO1xuXG4vLyBjb252ZXJ0IGFuIGFycmF5IG9mIGxpbmVhci1saWdodCBBQ0VTY2MgdmFsdWVzIHRvIENJRSBYWVpcbmNvbnN0IHRvWFlaX00gPSBbXG5cdFsgIDAuNjYyNDU0MTgxMTA4NTA1MywgICAwLjEzNDAwNDIwNjQ1NjQzMzEzLCAgMC4xNTYxODc2ODcwMDQ5MDc4ICBdLFxuXHRbICAwLjI3MjIyODcxNjc4MDkxNDU0LCAgMC42NzQwODE3NjU4MTExNDg0LCAgIDAuMDUzNjg5NTE3NDA3OTM3MDUgXSxcblx0WyAtMC4wMDU1NzQ2NDk0OTAzOTQxMDgsIDAuMDA0MDYwNzMzNTI4OTgyODI2LCAxLjAxMDMzOTEwMDMxMjk5NzEgIF0sXG5dO1xuY29uc3QgZnJvbVhZWl9NID0gW1xuXHRbICAxLjY0MTAyMzM3OTY5NDMyNTcsICAgLTAuMzI0ODAzMjk0MTg0NzksICAgIC0wLjIzNjQyNDY5NTIzNzYxMjI1ICBdLFxuXHRbIC0wLjY2MzY2Mjg1ODcyMjk4MjksICAgIDEuNjE1MzMxNTkxNjU3MzM3OSwgICAwLjAxNjc1NjM0NzY4NTUzMDEzNyBdLFxuXHRbICAwLjAxMTcyMTg5NDMyODM3NTM3NiwgLTAuMDA4Mjg0NDQxOTk2MjM3NDA5LCAwLjk4ODM5NDg1ODUzOTAyMTUgICBdLFxuXTtcblxudmFyIEFDRVNjZyA9IG5ldyBSR0JDb2xvclNwYWNlKHtcblx0aWQ6IFwiYWNlc2NnXCIsXG5cdGNzc0lkOiBcIi0tYWNlc2NnXCIsXG5cdG5hbWU6IFwiQUNFU2NnXCIsXG5cblx0Ly8gQUNFU2NnIOKAkyBBIHNjZW5lLXJlZmVycmVkLCBsaW5lYXItbGlnaHQgZW5jb2Rpbmcgb2YgQUNFUyBEYXRhXG5cdC8vIGh0dHBzOi8vZG9jcy5hY2VzY2VudHJhbC5jb20vc3BlY2lmaWNhdGlvbnMvYWNlc2NnL1xuXHQvLyB1c2VzIHRoZSBBUDEgcHJpbWFyaWVzLCBzZWUgc2VjdGlvbiA0LjMuMSBDb2xvciBwcmltYXJpZXNcblx0Y29vcmRzOiB7XG5cdFx0cjoge1xuXHRcdFx0cmFuZ2U6IFswLCA2NTUwNF0sXG5cdFx0XHRuYW1lOiBcIlJlZFwiLFxuXHRcdH0sXG5cdFx0Zzoge1xuXHRcdFx0cmFuZ2U6IFswLCA2NTUwNF0sXG5cdFx0XHRuYW1lOiBcIkdyZWVuXCIsXG5cdFx0fSxcblx0XHRiOiB7XG5cdFx0XHRyYW5nZTogWzAsIDY1NTA0XSxcblx0XHRcdG5hbWU6IFwiQmx1ZVwiLFxuXHRcdH0sXG5cdH0sXG5cblx0cmVmZXJyZWQ6IFwic2NlbmVcIixcblxuXHR3aGl0ZTogV0hJVEVTLkFDRVMsXG5cblx0dG9YWVpfTSxcblx0ZnJvbVhZWl9NLFxufSk7XG5cbi8vIGV4cG9ydCBkZWZhdWx0IENvbG9yO1xuXG5jb25zdCDOtSA9IDIgKiogLTE2O1xuXG4vLyB0aGUgc21hbGxlc3QgdmFsdWUgd2hpY2gsIGluIHRoZSAzMmJpdCBJRUVFIDc1NCBmbG9hdCBlbmNvZGluZyxcbi8vIGRlY29kZXMgYXMgYSBub24tbmVnYXRpdmUgdmFsdWVcbmNvbnN0IEFDRVNfbWluX25vbnplcm8gPSAtMC4zNTgyODY4MztcblxuLy8gYnJpZ2h0ZXN0IGVuY29kZWQgdmFsdWUsIGRlY29kZXMgdG8gNjU1MDRcbmNvbnN0IEFDRVNfY2NfbWF4ID0gKE1hdGgubG9nMig2NTUwNCkgKyA5LjcyKSAvIDE3LjUyOyAvLyAxLjQ2OFxuXG52YXIgYWNlc2NjID0gbmV3IFJHQkNvbG9yU3BhY2Uoe1xuXHRpZDogXCJhY2VzY2NcIixcblx0Y3NzSWQ6IFwiLS1hY2VzY2NcIixcblx0bmFtZTogXCJBQ0VTY2NcIixcblx0Ly8gc2VlIFMtMjAxNC0wMDMgQUNFU2NjIOKAkyBBIExvZ2FyaXRobWljIEVuY29kaW5nIG9mIEFDRVMgRGF0YVxuXHQvLyBodHRwczovL2RvY3MuYWNlc2NlbnRyYWwuY29tL3NwZWNpZmljYXRpb25zL2FjZXNjYy9cblx0Ly8gdXNlcyB0aGUgQVAxIHByaW1hcmllcywgc2VlIHNlY3Rpb24gNC4zLjEgQ29sb3IgcHJpbWFyaWVzXG5cblx0Ly8gQXBwZW5kaXggQTogXCJWZXJ5IHNtYWxsIEFDRVMgc2NlbmUgcmVmZXJyZWQgdmFsdWVzIGJlbG93IDcgMS80IHN0b3BzXG5cdC8vIGJlbG93IDE4JSBtaWRkbGUgZ3JheSBhcmUgZW5jb2RlZCBhcyBuZWdhdGl2ZSBBQ0VTY2MgdmFsdWVzLlxuXHQvLyBUaGVzZSB2YWx1ZXMgc2hvdWxkIGJlIHByZXNlcnZlZCBwZXIgdGhlIGVuY29kaW5nIGluIFNlY3Rpb24gNC40XG5cdC8vIHNvIHRoYXQgYWxsIHBvc2l0aXZlIEFDRVMgdmFsdWVzIGFyZSBtYWludGFpbmVkLlwiXG5cdGNvb3Jkczoge1xuXHRcdHI6IHtcblx0XHRcdHJhbmdlOiBbQUNFU19taW5fbm9uemVybywgQUNFU19jY19tYXhdLFxuXHRcdFx0bmFtZTogXCJSZWRcIixcblx0XHR9LFxuXHRcdGc6IHtcblx0XHRcdHJhbmdlOiBbQUNFU19taW5fbm9uemVybywgQUNFU19jY19tYXhdLFxuXHRcdFx0bmFtZTogXCJHcmVlblwiLFxuXHRcdH0sXG5cdFx0Yjoge1xuXHRcdFx0cmFuZ2U6IFtBQ0VTX21pbl9ub256ZXJvLCBBQ0VTX2NjX21heF0sXG5cdFx0XHRuYW1lOiBcIkJsdWVcIixcblx0XHR9LFxuXHR9LFxuXHRyZWZlcnJlZDogXCJzY2VuZVwiLFxuXG5cdGJhc2U6IEFDRVNjZyxcblx0Ly8gZnJvbSBzZWN0aW9uIDQuNC4yIERlY29kaW5nIEZ1bmN0aW9uXG5cdHRvQmFzZSAoUkdCKSB7XG5cdFx0Y29uc3QgbG93ID0gKDkuNzIgLSAxNSkgLyAxNy41MjsgLy8gLTAuMzAxNFxuXG5cdFx0cmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0aWYgKHZhbCA8PSBsb3cpIHtcblx0XHRcdFx0cmV0dXJuICgyICoqICgodmFsICogMTcuNTIpIC0gOS43MikgLSDOtSkgKiAyOyAvLyB2ZXJ5IGxvdyB2YWx1ZXMsIGJlbG93IC0wLjMwMTRcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHZhbCA8IEFDRVNfY2NfbWF4KSB7XG5cdFx0XHRcdHJldHVybiAyICoqICgodmFsICogMTcuNTIpIC0gOS43Mik7XG5cdFx0XHR9XG5cdFx0XHRlbHNlIHsgLy8gdmFsID49IEFDRVNfY2NfbWF4XG5cdFx0XHRcdHJldHVybiA2NTUwNDtcblx0XHRcdH1cblx0XHR9KTtcblx0fSxcblxuXHQvLyBOb24tbGluZWFyIGVuY29kaW5nIGZ1bmN0aW9uIGZyb20gUy0yMDE0LTAwMywgc2VjdGlvbiA0LjQuMSBFbmNvZGluZyBGdW5jdGlvblxuXHRmcm9tQmFzZSAoUkdCKSB7XG5cdFx0cmV0dXJuIFJHQi5tYXAoZnVuY3Rpb24gKHZhbCkge1xuXHRcdFx0aWYgKHZhbCA8PSAwKSB7XG5cdFx0XHRcdHJldHVybiAoTWF0aC5sb2cyKM61KSArIDkuNzIpIC8gMTcuNTI7IC8vIC0wLjM1ODRcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHZhbCA8IM61KSB7XG5cdFx0XHRcdHJldHVybiAgKE1hdGgubG9nMijOtSArIHZhbCAqIDAuNSkgKyA5LjcyKSAvIDE3LjUyO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSB7IC8vIHZhbCA+PSDOtVxuXHRcdFx0XHRyZXR1cm4gIChNYXRoLmxvZzIodmFsKSArIDkuNzIpIC8gMTcuNTI7XG5cdFx0XHR9XG5cdFx0fSk7XG5cdH0sXG5cdC8vIGVuY29kZWQgbWVkaWEgd2hpdGUgKHJnYiAxLDEsMSkgPT4gbGluZWFyICBbIDIyMi44NjEsIDIyMi44NjEsIDIyMi44NjEgXVxuXHQvLyBlbmNvZGVkIG1lZGlhIGJsYWNrIChyZ2IgMCwwLDApID0+IGxpbmVhciBbIDAuMDAxMTg1NywgMC4wMDExODU3LCAwLjAwMTE4NTddXG59KTtcblxudmFyIHNwYWNlcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcblx0X19wcm90b19fOiBudWxsLFxuXHRBOThSR0I6IGE5OHJnYixcblx0QTk4UkdCX0xpbmVhcjogQTk4TGluZWFyLFxuXHRBQ0VTY2M6IGFjZXNjYyxcblx0QUNFU2NnOiBBQ0VTY2csXG5cdENBTTE2X0pNaDogY2FtMTYsXG5cdEhDVDogaGN0LFxuXHRIUEx1djogaHBsdXYsXG5cdEhTTDogSFNMLFxuXHRIU0x1djogaHNsdXYsXG5cdEhTVjogSFNWLFxuXHRIV0I6IGh3Yixcblx0SUNUQ1A6IGljdGNwLFxuXHRKekN6SHo6IGp6Y3poeixcblx0SnphemJ6OiBKemF6YnosXG5cdExDSDogbGNoLFxuXHRMQ0h1djogTENIdXYsXG5cdExhYjogbGFiLFxuXHRMYWJfRDY1OiBsYWJfZDY1LFxuXHRMdXY6IEx1dixcblx0T0tMQ0g6IG9rbGNoLFxuXHRPS0xhYjogT0tMYWIsXG5cdFAzOiBQMyxcblx0UDNfTGluZWFyOiBQM0xpbmVhcixcblx0UHJvUGhvdG86IHByb3Bob3RvLFxuXHRQcm9QaG90b19MaW5lYXI6IFByb1Bob3RvTGluZWFyLFxuXHRSRUNfMjAyMDogUkVDMjAyMCxcblx0UkVDXzIwMjBfTGluZWFyOiBSRUMyMDIwTGluZWFyLFxuXHRSRUNfMjEwMF9ITEc6IHJlYzIxMDBIbGcsXG5cdFJFQ18yMTAwX1BROiByZWMyMTAwUHEsXG5cdFhZWl9BQlNfRDY1OiBYWVpfQWJzX0Q2NSxcblx0WFlaX0Q1MDogWFlaX0Q1MCxcblx0WFlaX0Q2NTogeHl6X2Q2NSxcblx0c1JHQjogc1JHQixcblx0c1JHQl9MaW5lYXI6IHNSR0JMaW5lYXJcbn0pO1xuXG4vKipcbiAqIENsYXNzIHRoYXQgcmVwcmVzZW50cyBhIGNvbG9yXG4gKi9cbmNsYXNzIENvbG9yIHtcblx0LyoqXG5cdCAqIENyZWF0ZXMgYW4gaW5zdGFuY2Ugb2YgQ29sb3IuXG5cdCAqIFNpZ25hdHVyZXM6XG5cdCAqIC0gYG5ldyBDb2xvcihzdHJpbmdUb1BhcnNlKWBcblx0ICogLSBgbmV3IENvbG9yKG90aGVyQ29sb3IpYFxuXHQgKiAtIGBuZXcgQ29sb3Ioe3NwYWNlLCBjb29yZHMsIGFscGhhfSlgXG5cdCAqIC0gYG5ldyBDb2xvcihzcGFjZSwgY29vcmRzLCBhbHBoYSlgXG5cdCAqIC0gYG5ldyBDb2xvcihzcGFjZUlkLCBjb29yZHMsIGFscGhhKWBcblx0ICovXG5cdGNvbnN0cnVjdG9yICguLi5hcmdzKSB7XG5cdFx0bGV0IGNvbG9yO1xuXG5cdFx0aWYgKGFyZ3MubGVuZ3RoID09PSAxKSB7XG5cdFx0XHRjb2xvciA9IGdldENvbG9yKGFyZ3NbMF0pO1xuXHRcdH1cblxuXHRcdGxldCBzcGFjZSwgY29vcmRzLCBhbHBoYTtcblxuXHRcdGlmIChjb2xvcikge1xuXHRcdFx0c3BhY2UgPSBjb2xvci5zcGFjZSB8fCBjb2xvci5zcGFjZUlkO1xuXHRcdFx0Y29vcmRzID0gY29sb3IuY29vcmRzO1xuXHRcdFx0YWxwaGEgPSBjb2xvci5hbHBoYTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBkZWZhdWx0IHNpZ25hdHVyZSBuZXcgQ29sb3IoQ29sb3JTcGFjZSwgYXJyYXkgWywgYWxwaGFdKVxuXHRcdFx0W3NwYWNlLCBjb29yZHMsIGFscGhhXSA9IGFyZ3M7XG5cdFx0fVxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KHRoaXMsIFwic3BhY2VcIiwge1xuXHRcdFx0dmFsdWU6IENvbG9yU3BhY2UuZ2V0KHNwYWNlKSxcblx0XHRcdHdyaXRhYmxlOiBmYWxzZSxcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IHRydWUsIC8vIHNlZSBub3RlIGluIGh0dHBzOi8vMjYyLmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvOC4wLyNzZWMtcHJveHktb2JqZWN0LWludGVybmFsLW1ldGhvZHMtYW5kLWludGVybmFsLXNsb3RzLWdldC1wLXJlY2VpdmVyXG5cdFx0fSk7XG5cblx0XHR0aGlzLmNvb3JkcyA9IGNvb3JkcyA/IGNvb3Jkcy5zbGljZSgpIDogWzAsIDAsIDBdO1xuXG5cdFx0Ly8gQ2xhbXAgYWxwaGEgdG8gWzAsIDFdXG5cdFx0dGhpcy5hbHBoYSA9IGFscGhhID4gMSB8fCBhbHBoYSA9PT0gdW5kZWZpbmVkID8gMSA6IChhbHBoYSA8IDAgPyAwIDogYWxwaGEpO1xuXG5cdFx0Ly8gQ29udmVydCBcIk5hTlwiIHRvIE5hTlxuXHRcdGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5jb29yZHMubGVuZ3RoOyBpKyspIHtcblx0XHRcdGlmICh0aGlzLmNvb3Jkc1tpXSA9PT0gXCJOYU5cIikge1xuXHRcdFx0XHR0aGlzLmNvb3Jkc1tpXSA9IE5hTjtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBEZWZpbmUgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgZWFjaCBjb29yZGluYXRlXG5cdFx0Zm9yIChsZXQgaWQgaW4gdGhpcy5zcGFjZS5jb29yZHMpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCBpZCwge1xuXHRcdFx0XHRnZXQ6ICgpID0+IHRoaXMuZ2V0KGlkKSxcblx0XHRcdFx0c2V0OiB2YWx1ZSA9PiB0aGlzLnNldChpZCwgdmFsdWUpLFxuXHRcdFx0fSk7XG5cdFx0fVxuXHR9XG5cblx0Z2V0IHNwYWNlSWQgKCkge1xuXHRcdHJldHVybiB0aGlzLnNwYWNlLmlkO1xuXHR9XG5cblx0Y2xvbmUgKCkge1xuXHRcdHJldHVybiBuZXcgQ29sb3IodGhpcy5zcGFjZSwgdGhpcy5jb29yZHMsIHRoaXMuYWxwaGEpO1xuXHR9XG5cblx0dG9KU09OICgpIHtcblx0XHRyZXR1cm4ge1xuXHRcdFx0c3BhY2VJZDogdGhpcy5zcGFjZUlkLFxuXHRcdFx0Y29vcmRzOiB0aGlzLmNvb3Jkcyxcblx0XHRcdGFscGhhOiB0aGlzLmFscGhhLFxuXHRcdH07XG5cdH1cblxuXHRkaXNwbGF5ICguLi5hcmdzKSB7XG5cdFx0bGV0IHJldCA9IGRpc3BsYXkodGhpcywgLi4uYXJncyk7XG5cblx0XHQvLyBDb252ZXJ0IGNvbG9yIG9iamVjdCB0byBDb2xvciBpbnN0YW5jZVxuXHRcdHJldC5jb2xvciA9IG5ldyBDb2xvcihyZXQuY29sb3IpO1xuXG5cdFx0cmV0dXJuIHJldDtcblx0fVxuXG5cdC8qKlxuXHQgKiBHZXQgYSBjb2xvciBmcm9tIHRoZSBhcmd1bWVudCBwYXNzZWRcblx0ICogQmFzaWNhbGx5IGdldHMgdXMgdGhlIHNhbWUgcmVzdWx0IGFzIG5ldyBDb2xvcihjb2xvcikgYnV0IGRvZXNuJ3QgY2xvbmUgYW4gZXhpc3RpbmcgY29sb3Igb2JqZWN0XG5cdCAqL1xuXHRzdGF0aWMgZ2V0IChjb2xvciwgLi4uYXJncykge1xuXHRcdGlmIChjb2xvciBpbnN0YW5jZW9mIENvbG9yKSB7XG5cdFx0XHRyZXR1cm4gY29sb3I7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG5ldyBDb2xvcihjb2xvciwgLi4uYXJncyk7XG5cdH1cblxuXHRzdGF0aWMgZGVmaW5lRnVuY3Rpb24gKG5hbWUsIGNvZGUsIG8gPSBjb2RlKSB7XG5cdFx0bGV0IHtpbnN0YW5jZSA9IHRydWUsIHJldHVybnN9ID0gbztcblxuXHRcdGxldCBmdW5jID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRcdGxldCByZXQgPSBjb2RlKC4uLmFyZ3MpO1xuXG5cdFx0XHRpZiAocmV0dXJucyA9PT0gXCJjb2xvclwiKSB7XG5cdFx0XHRcdHJldCA9IENvbG9yLmdldChyZXQpO1xuXHRcdFx0fVxuXHRcdFx0ZWxzZSBpZiAocmV0dXJucyA9PT0gXCJmdW5jdGlvbjxjb2xvcj5cIikge1xuXHRcdFx0XHRsZXQgZiA9IHJldDtcblx0XHRcdFx0cmV0ID0gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcblx0XHRcdFx0XHRsZXQgcmV0ID0gZiguLi5hcmdzKTtcblx0XHRcdFx0XHRyZXR1cm4gQ29sb3IuZ2V0KHJldCk7XG5cdFx0XHRcdH07XG5cdFx0XHRcdC8vIENvcHkgYW55IGZ1bmN0aW9uIG1ldGFkYXRhXG5cdFx0XHRcdE9iamVjdC5hc3NpZ24ocmV0LCBmKTtcblx0XHRcdH1cblx0XHRcdGVsc2UgaWYgKHJldHVybnMgPT09IFwiYXJyYXk8Y29sb3I+XCIpIHtcblx0XHRcdFx0cmV0ID0gcmV0Lm1hcChjID0+IENvbG9yLmdldChjKSk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fTtcblxuXHRcdGlmICghKG5hbWUgaW4gQ29sb3IpKSB7XG5cdFx0XHRDb2xvcltuYW1lXSA9IGZ1bmM7XG5cdFx0fVxuXG5cdFx0aWYgKGluc3RhbmNlKSB7XG5cdFx0XHRDb2xvci5wcm90b3R5cGVbbmFtZV0gPSBmdW5jdGlvbiAoLi4uYXJncykge1xuXHRcdFx0XHRyZXR1cm4gZnVuYyh0aGlzLCAuLi5hcmdzKTtcblx0XHRcdH07XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGRlZmluZUZ1bmN0aW9ucyAobykge1xuXHRcdGZvciAobGV0IG5hbWUgaW4gbykge1xuXHRcdFx0Q29sb3IuZGVmaW5lRnVuY3Rpb24obmFtZSwgb1tuYW1lXSwgb1tuYW1lXSk7XG5cdFx0fVxuXHR9XG5cblx0c3RhdGljIGV4dGVuZCAoZXhwb3J0cykge1xuXHRcdGlmIChleHBvcnRzLnJlZ2lzdGVyKSB7XG5cdFx0XHRleHBvcnRzLnJlZ2lzdGVyKENvbG9yKTtcblx0XHR9XG5cdFx0ZWxzZSB7XG5cdFx0XHQvLyBObyByZWdpc3RlciBtZXRob2QsIGp1c3QgYWRkIHRoZSBtb2R1bGUncyBmdW5jdGlvbnNcblx0XHRcdGZvciAobGV0IG5hbWUgaW4gZXhwb3J0cykge1xuXHRcdFx0XHRDb2xvci5kZWZpbmVGdW5jdGlvbihuYW1lLCBleHBvcnRzW25hbWVdKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cbn1cblxuQ29sb3IuZGVmaW5lRnVuY3Rpb25zKHtcblx0Z2V0LFxuXHRnZXRBbGwsXG5cdHNldCxcblx0c2V0QWxsLFxuXHR0byxcblx0ZXF1YWxzLFxuXHRpbkdhbXV0LFxuXHR0b0dhbXV0LFxuXHRkaXN0YW5jZSxcblx0dG9TdHJpbmc6IHNlcmlhbGl6ZSxcbn0pO1xuXG5PYmplY3QuYXNzaWduKENvbG9yLCB7XG5cdHV0aWwsXG5cdGhvb2tzLFxuXHRXSElURVMsXG5cdFNwYWNlOiBDb2xvclNwYWNlLFxuXHRzcGFjZXM6IENvbG9yU3BhY2UucmVnaXN0cnksXG5cdHBhcnNlLFxuXG5cdC8vIEdsb2JhbCBkZWZhdWx0cyBvbmUgbWF5IHdhbnQgdG8gY29uZmlndXJlXG5cdGRlZmF1bHRzLFxufSk7XG5cbmZvciAobGV0IGtleSBvZiBPYmplY3Qua2V5cyhzcGFjZXMpKSB7XG5cdENvbG9yU3BhY2UucmVnaXN0ZXIoc3BhY2VzW2tleV0pO1xufVxuXG4vKipcbiAqIFRoaXMgcGx1Z2luIGRlZmluZXMgZ2V0dGVycyBhbmQgc2V0dGVycyBmb3IgY29sb3Jbc3BhY2VJZF1cbiAqIGUuZy4gY29sb3IubGNoIG9uICphbnkqIGNvbG9yIGdpdmVzIHVzIHRoZSBsY2ggY29vcmRzXG4gKi9cblxuLy8gQWRkIHNwYWNlIGFjY2Vzc29ycyB0byBleGlzdGluZyBjb2xvciBzcGFjZXNcbmZvciAobGV0IGlkIGluIENvbG9yU3BhY2UucmVnaXN0cnkpIHtcblx0YWRkU3BhY2VBY2Nlc3NvcnMoaWQsIENvbG9yU3BhY2UucmVnaXN0cnlbaWRdKTtcbn1cblxuLy8gQWRkIHNwYWNlIGFjY2Vzc29ycyB0byBjb2xvciBzcGFjZXMgbm90IHlldCBjcmVhdGVkXG5ob29rcy5hZGQoXCJjb2xvcnNwYWNlLWluaXQtZW5kXCIsIHNwYWNlID0+IHtcblx0YWRkU3BhY2VBY2Nlc3NvcnMoc3BhY2UuaWQsIHNwYWNlKTtcblx0c3BhY2UuYWxpYXNlcz8uZm9yRWFjaChhbGlhcyA9PiB7XG5cdFx0YWRkU3BhY2VBY2Nlc3NvcnMoYWxpYXMsIHNwYWNlKTtcblx0fSk7XG59KTtcblxuZnVuY3Rpb24gYWRkU3BhY2VBY2Nlc3NvcnMgKGlkLCBzcGFjZSkge1xuXHRsZXQgcHJvcElkID0gaWQucmVwbGFjZSgvLS9nLCBcIl9cIik7XG5cblx0T2JqZWN0LmRlZmluZVByb3BlcnR5KENvbG9yLnByb3RvdHlwZSwgcHJvcElkLCB7XG5cdFx0Ly8gQ29udmVydCBjb29yZHMgdG8gY29vcmRzIGluIGFub3RoZXIgY29sb3JzcGFjZSBhbmQgcmV0dXJuIHRoZW1cblx0XHQvLyBTb3VyY2UgY29sb3JzcGFjZTogdGhpcy5zcGFjZUlkXG5cdFx0Ly8gVGFyZ2V0IGNvbG9yc3BhY2U6IGlkXG5cdFx0Z2V0ICgpIHtcblx0XHRcdGxldCByZXQgPSB0aGlzLmdldEFsbChpZCk7XG5cblx0XHRcdGlmICh0eXBlb2YgUHJveHkgPT09IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0Ly8gSWYgcHJveGllcyBhcmUgbm90IHN1cHBvcnRlZCwganVzdCByZXR1cm4gYSBzdGF0aWMgYXJyYXlcblx0XHRcdFx0cmV0dXJuIHJldDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gRW5hYmxlIGNvbG9yLnNwYWNlSWQuY29vcmROYW1lIHN5bnRheFxuXHRcdFx0cmV0dXJuIG5ldyBQcm94eShyZXQsIHtcblx0XHRcdFx0aGFzOiAob2JqLCBwcm9wZXJ0eSkgPT4ge1xuXHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRDb2xvclNwYWNlLnJlc29sdmVDb29yZChbc3BhY2UsIHByb3BlcnR5XSk7XG5cdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0Y2F0Y2ggKGUpIHt9XG5cblx0XHRcdFx0XHRyZXR1cm4gUmVmbGVjdC5oYXMob2JqLCBwcm9wZXJ0eSk7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGdldDogKG9iaiwgcHJvcGVydHksIHJlY2VpdmVyKSA9PiB7XG5cdFx0XHRcdFx0aWYgKHByb3BlcnR5ICYmIHR5cGVvZiBwcm9wZXJ0eSAhPT0gXCJzeW1ib2xcIiAmJiAhKHByb3BlcnR5IGluIG9iaikpIHtcblx0XHRcdFx0XHRcdGxldCB7aW5kZXh9ID0gQ29sb3JTcGFjZS5yZXNvbHZlQ29vcmQoW3NwYWNlLCBwcm9wZXJ0eV0pO1xuXG5cdFx0XHRcdFx0XHRpZiAoaW5kZXggPj0gMCkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gb2JqW2luZGV4XTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gUmVmbGVjdC5nZXQob2JqLCBwcm9wZXJ0eSwgcmVjZWl2ZXIpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHRzZXQ6IChvYmosIHByb3BlcnR5LCB2YWx1ZSwgcmVjZWl2ZXIpID0+IHtcblx0XHRcdFx0XHRpZiAocHJvcGVydHkgJiYgdHlwZW9mIHByb3BlcnR5ICE9PSBcInN5bWJvbFwiICYmICEocHJvcGVydHkgaW4gb2JqKSB8fCBwcm9wZXJ0eSA+PSAwKSB7XG5cdFx0XHRcdFx0XHRsZXQge2luZGV4fSA9IENvbG9yU3BhY2UucmVzb2x2ZUNvb3JkKFtzcGFjZSwgcHJvcGVydHldKTtcblxuXHRcdFx0XHRcdFx0aWYgKGluZGV4ID49IDApIHtcblx0XHRcdFx0XHRcdFx0b2JqW2luZGV4XSA9IHZhbHVlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFVwZGF0ZSBjb2xvci5jb29yZHNcblx0XHRcdFx0XHRcdFx0dGhpcy5zZXRBbGwoaWQsIG9iaik7XG5cblx0XHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIFJlZmxlY3Quc2V0KG9iaiwgcHJvcGVydHksIHZhbHVlLCByZWNlaXZlcik7XG5cdFx0XHRcdH0sXG5cdFx0XHR9KTtcblx0XHR9LFxuXHRcdC8vIENvbnZlcnQgY29vcmRzIGluIGFub3RoZXIgY29sb3JzcGFjZSB0byBpbnRlcm5hbCBjb29yZHMgYW5kIHNldCB0aGVtXG5cdFx0Ly8gVGFyZ2V0IGNvbG9yc3BhY2U6IHRoaXMuc3BhY2VJZFxuXHRcdC8vIFNvdXJjZSBjb2xvcnNwYWNlOiBpZFxuXHRcdHNldCAoY29vcmRzKSB7XG5cdFx0XHR0aGlzLnNldEFsbChpZCwgY29vcmRzKTtcblx0XHR9LFxuXHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHR9KTtcbn1cblxuLy8gSW1wb3J0IGFsbCBtb2R1bGVzIG9mIENvbG9yLmpzXG5cbkNvbG9yLmV4dGVuZChkZWx0YUVNZXRob2RzKTtcbkNvbG9yLmV4dGVuZCh7ZGVsdGFFfSk7XG5PYmplY3QuYXNzaWduKENvbG9yLCB7ZGVsdGFFTWV0aG9kc30pO1xuQ29sb3IuZXh0ZW5kKHZhcmlhdGlvbnMpO1xuQ29sb3IuZXh0ZW5kKHtjb250cmFzdH0pO1xuQ29sb3IuZXh0ZW5kKGNocm9tYXRpY2l0eSk7XG5Db2xvci5leHRlbmQobHVtaW5hbmNlKTtcbkNvbG9yLmV4dGVuZChpbnRlcnBvbGF0aW9uKTtcbkNvbG9yLmV4dGVuZChjb250cmFzdE1ldGhvZHMpO1xuXG5leHBvcnQgeyBDb2xvciBhcyBkZWZhdWx0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb2xvci5qcy5tYXBcbiJdLCJuYW1lcyI6W10sImlnbm9yZUxpc3QiOlswXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/colorjs.io/dist/color.js\n");

/***/ })

};
;